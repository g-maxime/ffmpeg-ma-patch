diff --git a/DeckLinkSDK/Linux/include/DeckLinkAPI.h b/DeckLinkSDK/Linux/include/DeckLinkAPI.h
new file mode 100644
index 0000000000..84f201c7ad
--- /dev/null
+++ b/DeckLinkSDK/Linux/include/DeckLinkAPI.h
@@ -0,0 +1,1299 @@
+/* -LICENSE-START-
+ ** Copyright (c) 2022 Blackmagic Design
+ **  
+ ** Permission is hereby granted, free of charge, to any person or organization 
+ ** obtaining a copy of the software and accompanying documentation (the 
+ ** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+ ** and transmit the Software, and to prepare derivative works of the Software, 
+ ** and to permit third-parties to whom the Software is furnished to do so, in 
+ ** accordance with:
+ ** 
+ ** (1) if the Software is obtained from Blackmagic Design, the End User License 
+ ** Agreement for the Software Development Kit ("EULA") available at 
+ ** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+ ** 
+ ** (2) if the Software is obtained from any third party, such licensing terms 
+ ** as notified by that third party,
+ ** 
+ ** and all subject to the following:
+ ** 
+ ** (3) the copyright notices in the Software and this entire statement, 
+ ** including the above license grant, this restriction and the following 
+ ** disclaimer, must be included in all copies of the Software, in whole or in 
+ ** part, and all derivative works of the Software, unless such copies or 
+ ** derivative works are solely in the form of machine-executable object code 
+ ** generated by a source language processor.
+ ** 
+ ** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+ ** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+ ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+ ** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+ ** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+ ** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+ ** DEALINGS IN THE SOFTWARE.
+ ** 
+ ** A copy of the Software is available free of charge at 
+ ** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+ ** 
+ ** -LICENSE-END-
+ */
+
+
+#ifndef BMD_DECKLINKAPI_H
+#define BMD_DECKLINKAPI_H
+
+
+#ifndef BMD_CONST
+    #if defined(_MSC_VER)
+        #define BMD_CONST __declspec(selectany) static const
+    #else
+        #define BMD_CONST static const
+    #endif
+#endif
+
+#ifndef BMD_PUBLIC
+	#define BMD_PUBLIC
+#endif
+
+/* DeckLink API */
+
+#include <stdint.h>
+#include "LinuxCOM.h"
+
+#include "DeckLinkAPITypes.h"
+#include "DeckLinkAPIModes.h"
+#include "DeckLinkAPIDiscovery.h"
+#include "DeckLinkAPIConfiguration.h"
+#include "DeckLinkAPIDeckControl.h"
+
+#define BLACKMAGIC_DECKLINK_API_MAGIC	1
+
+// Type Declarations
+
+
+// Interface ID Declarations
+
+BMD_CONST REFIID IID_IDeckLinkVideoOutputCallback                 = /* 20AA5225-1958-47CB-820B-80A8D521A6EE */ { 0x20,0xAA,0x52,0x25,0x19,0x58,0x47,0xCB,0x82,0x0B,0x80,0xA8,0xD5,0x21,0xA6,0xEE };
+BMD_CONST REFIID IID_IDeckLinkInputCallback                       = /* C6FCE4C9-C4E4-4047-82FB-5D238232A902 */ { 0xC6,0xFC,0xE4,0xC9,0xC4,0xE4,0x40,0x47,0x82,0xFB,0x5D,0x23,0x82,0x32,0xA9,0x02 };
+BMD_CONST REFIID IID_IDeckLinkEncoderInputCallback                = /* ACF13E61-F4A0-4974-A6A7-59AFF6268B31 */ { 0xAC,0xF1,0x3E,0x61,0xF4,0xA0,0x49,0x74,0xA6,0xA7,0x59,0xAF,0xF6,0x26,0x8B,0x31 };
+BMD_CONST REFIID IID_IDeckLinkMemoryAllocator                     = /* B36EB6E7-9D29-4AA8-92EF-843B87A289E8 */ { 0xB3,0x6E,0xB6,0xE7,0x9D,0x29,0x4A,0xA8,0x92,0xEF,0x84,0x3B,0x87,0xA2,0x89,0xE8 };
+BMD_CONST REFIID IID_IDeckLinkAudioOutputCallback                 = /* 403C681B-7F46-4A12-B993-2BB127084EE6 */ { 0x40,0x3C,0x68,0x1B,0x7F,0x46,0x4A,0x12,0xB9,0x93,0x2B,0xB1,0x27,0x08,0x4E,0xE6 };
+BMD_CONST REFIID IID_IDeckLinkIterator                            = /* 50FB36CD-3063-4B73-BDBB-958087F2D8BA */ { 0x50,0xFB,0x36,0xCD,0x30,0x63,0x4B,0x73,0xBD,0xBB,0x95,0x80,0x87,0xF2,0xD8,0xBA };
+BMD_CONST REFIID IID_IDeckLinkAPIInformation                      = /* 7BEA3C68-730D-4322-AF34-8A7152B532A4 */ { 0x7B,0xEA,0x3C,0x68,0x73,0x0D,0x43,0x22,0xAF,0x34,0x8A,0x71,0x52,0xB5,0x32,0xA4 };
+BMD_CONST REFIID IID_IDeckLinkOutput                              = /* BE2D9020-461E-442F-84B7-E949CB953B9D */ { 0xBE,0x2D,0x90,0x20,0x46,0x1E,0x44,0x2F,0x84,0xB7,0xE9,0x49,0xCB,0x95,0x3B,0x9D };
+BMD_CONST REFIID IID_IDeckLinkInput                               = /* C21CDB6E-F414-46E4-A636-80A566E0ED37 */ { 0xC2,0x1C,0xDB,0x6E,0xF4,0x14,0x46,0xE4,0xA6,0x36,0x80,0xA5,0x66,0xE0,0xED,0x37 };
+BMD_CONST REFIID IID_IDeckLinkHDMIInputEDID                       = /* ABBBACBC-45BC-4665-9D92-ACE6E5A97902 */ { 0xAB,0xBB,0xAC,0xBC,0x45,0xBC,0x46,0x65,0x9D,0x92,0xAC,0xE6,0xE5,0xA9,0x79,0x02 };
+BMD_CONST REFIID IID_IDeckLinkEncoderInput                        = /* F222551D-13DF-4FD8-B587-9D4F19EC12C9 */ { 0xF2,0x22,0x55,0x1D,0x13,0xDF,0x4F,0xD8,0xB5,0x87,0x9D,0x4F,0x19,0xEC,0x12,0xC9 };
+BMD_CONST REFIID IID_IDeckLinkVideoFrame                          = /* 3F716FE0-F023-4111-BE5D-EF4414C05B17 */ { 0x3F,0x71,0x6F,0xE0,0xF0,0x23,0x41,0x11,0xBE,0x5D,0xEF,0x44,0x14,0xC0,0x5B,0x17 };
+BMD_CONST REFIID IID_IDeckLinkMutableVideoFrame                   = /* 69E2639F-40DA-4E19-B6F2-20ACE815C390 */ { 0x69,0xE2,0x63,0x9F,0x40,0xDA,0x4E,0x19,0xB6,0xF2,0x20,0xAC,0xE8,0x15,0xC3,0x90 };
+BMD_CONST REFIID IID_IDeckLinkVideoFrame3DExtensions              = /* DA0F7E4A-EDC7-48A8-9CDD-2DB51C729CD7 */ { 0xDA,0x0F,0x7E,0x4A,0xED,0xC7,0x48,0xA8,0x9C,0xDD,0x2D,0xB5,0x1C,0x72,0x9C,0xD7 };
+BMD_CONST REFIID IID_IDeckLinkVideoFrameMetadataExtensions        = /* E232A5B7-4DB4-44C9-9152-F47C12E5F051 */ { 0xE2,0x32,0xA5,0xB7,0x4D,0xB4,0x44,0xC9,0x91,0x52,0xF4,0x7C,0x12,0xE5,0xF0,0x51 };
+BMD_CONST REFIID IID_IDeckLinkVideoInputFrame                     = /* 05CFE374-537C-4094-9A57-680525118F44 */ { 0x05,0xCF,0xE3,0x74,0x53,0x7C,0x40,0x94,0x9A,0x57,0x68,0x05,0x25,0x11,0x8F,0x44 };
+BMD_CONST REFIID IID_IDeckLinkAncillaryPacket                     = /* CC5BBF7E-029C-4D3B-9158-6000EF5E3670 */ { 0xCC,0x5B,0xBF,0x7E,0x02,0x9C,0x4D,0x3B,0x91,0x58,0x60,0x00,0xEF,0x5E,0x36,0x70 };
+BMD_CONST REFIID IID_IDeckLinkAncillaryPacketIterator             = /* 3FC8994B-88FB-4C17-968F-9AAB69D964A7 */ { 0x3F,0xC8,0x99,0x4B,0x88,0xFB,0x4C,0x17,0x96,0x8F,0x9A,0xAB,0x69,0xD9,0x64,0xA7 };
+BMD_CONST REFIID IID_IDeckLinkVideoFrameAncillaryPackets          = /* 6C186C0F-459E-41D8-AEE2-4812D81AEE68 */ { 0x6C,0x18,0x6C,0x0F,0x45,0x9E,0x41,0xD8,0xAE,0xE2,0x48,0x12,0xD8,0x1A,0xEE,0x68 };
+BMD_CONST REFIID IID_IDeckLinkVideoFrameAncillary                 = /* 732E723C-D1A4-4E29-9E8E-4A88797A0004 */ { 0x73,0x2E,0x72,0x3C,0xD1,0xA4,0x4E,0x29,0x9E,0x8E,0x4A,0x88,0x79,0x7A,0x00,0x04 };
+BMD_CONST REFIID IID_IDeckLinkEncoderPacket                       = /* B693F36C-316E-4AF1-B6C2-F389A4BCA620 */ { 0xB6,0x93,0xF3,0x6C,0x31,0x6E,0x4A,0xF1,0xB6,0xC2,0xF3,0x89,0xA4,0xBC,0xA6,0x20 };
+BMD_CONST REFIID IID_IDeckLinkEncoderVideoPacket                  = /* 4E7FD944-E8C7-4EAC-B8C0-7B77F80F5AE0 */ { 0x4E,0x7F,0xD9,0x44,0xE8,0xC7,0x4E,0xAC,0xB8,0xC0,0x7B,0x77,0xF8,0x0F,0x5A,0xE0 };
+BMD_CONST REFIID IID_IDeckLinkEncoderAudioPacket                  = /* 49E8EDC8-693B-4E14-8EF6-12C658F5A07A */ { 0x49,0xE8,0xED,0xC8,0x69,0x3B,0x4E,0x14,0x8E,0xF6,0x12,0xC6,0x58,0xF5,0xA0,0x7A };
+BMD_CONST REFIID IID_IDeckLinkH265NALPacket                       = /* 639C8E0B-68D5-4BDE-A6D4-95F3AEAFF2E7 */ { 0x63,0x9C,0x8E,0x0B,0x68,0xD5,0x4B,0xDE,0xA6,0xD4,0x95,0xF3,0xAE,0xAF,0xF2,0xE7 };
+BMD_CONST REFIID IID_IDeckLinkAudioInputPacket                    = /* E43D5870-2894-11DE-8C30-0800200C9A66 */ { 0xE4,0x3D,0x58,0x70,0x28,0x94,0x11,0xDE,0x8C,0x30,0x08,0x00,0x20,0x0C,0x9A,0x66 };
+BMD_CONST REFIID IID_IDeckLinkScreenPreviewCallback               = /* B1D3F49A-85FE-4C5D-95C8-0B5D5DCCD438 */ { 0xB1,0xD3,0xF4,0x9A,0x85,0xFE,0x4C,0x5D,0x95,0xC8,0x0B,0x5D,0x5D,0xCC,0xD4,0x38 };
+BMD_CONST REFIID IID_IDeckLinkGLScreenPreviewHelper               = /* 504E2209-CAC7-4C1A-9FB4-C5BB6274D22F */ { 0x50,0x4E,0x22,0x09,0xCA,0xC7,0x4C,0x1A,0x9F,0xB4,0xC5,0xBB,0x62,0x74,0xD2,0x2F };
+BMD_CONST REFIID IID_IDeckLinkNotificationCallback                = /* B002A1EC-070D-4288-8289-BD5D36E5FF0D */ { 0xB0,0x02,0xA1,0xEC,0x07,0x0D,0x42,0x88,0x82,0x89,0xBD,0x5D,0x36,0xE5,0xFF,0x0D };
+BMD_CONST REFIID IID_IDeckLinkNotification                        = /* B85DF4C8-BDF5-47C1-8064-28162EBDD4EB */ { 0xB8,0x5D,0xF4,0xC8,0xBD,0xF5,0x47,0xC1,0x80,0x64,0x28,0x16,0x2E,0xBD,0xD4,0xEB };
+BMD_CONST REFIID IID_IDeckLinkProfileAttributes                   = /* 17D4BF8E-4911-473A-80A0-731CF6FF345B */ { 0x17,0xD4,0xBF,0x8E,0x49,0x11,0x47,0x3A,0x80,0xA0,0x73,0x1C,0xF6,0xFF,0x34,0x5B };
+BMD_CONST REFIID IID_IDeckLinkProfileIterator                     = /* 29E5A8C0-8BE4-46EB-93AC-31DAAB5B7BF2 */ { 0x29,0xE5,0xA8,0xC0,0x8B,0xE4,0x46,0xEB,0x93,0xAC,0x31,0xDA,0xAB,0x5B,0x7B,0xF2 };
+BMD_CONST REFIID IID_IDeckLinkProfile                             = /* 16093466-674A-432B-9DA0-1AC2C5A8241C */ { 0x16,0x09,0x34,0x66,0x67,0x4A,0x43,0x2B,0x9D,0xA0,0x1A,0xC2,0xC5,0xA8,0x24,0x1C };
+BMD_CONST REFIID IID_IDeckLinkProfileCallback                     = /* A4F9341E-97AA-4E04-8935-15F809898CEA */ { 0xA4,0xF9,0x34,0x1E,0x97,0xAA,0x4E,0x04,0x89,0x35,0x15,0xF8,0x09,0x89,0x8C,0xEA };
+BMD_CONST REFIID IID_IDeckLinkProfileManager                      = /* 30D41429-3998-4B6D-84F8-78C94A797C6E */ { 0x30,0xD4,0x14,0x29,0x39,0x98,0x4B,0x6D,0x84,0xF8,0x78,0xC9,0x4A,0x79,0x7C,0x6E };
+BMD_CONST REFIID IID_IDeckLinkStatus                              = /* 5F558200-4028-49BC-BEAC-DB3FA4A96E46 */ { 0x5F,0x55,0x82,0x00,0x40,0x28,0x49,0xBC,0xBE,0xAC,0xDB,0x3F,0xA4,0xA9,0x6E,0x46 };
+BMD_CONST REFIID IID_IDeckLinkKeyer                               = /* 89AFCAF5-65F8-421E-98F7-96FE5F5BFBA3 */ { 0x89,0xAF,0xCA,0xF5,0x65,0xF8,0x42,0x1E,0x98,0xF7,0x96,0xFE,0x5F,0x5B,0xFB,0xA3 };
+BMD_CONST REFIID IID_IDeckLinkVideoConversion                     = /* 3BBCB8A2-DA2C-42D9-B5D8-88083644E99A */ { 0x3B,0xBC,0xB8,0xA2,0xDA,0x2C,0x42,0xD9,0xB5,0xD8,0x88,0x08,0x36,0x44,0xE9,0x9A };
+BMD_CONST REFIID IID_IDeckLinkDeviceNotificationCallback          = /* 4997053B-0ADF-4CC8-AC70-7A50C4BE728F */ { 0x49,0x97,0x05,0x3B,0x0A,0xDF,0x4C,0xC8,0xAC,0x70,0x7A,0x50,0xC4,0xBE,0x72,0x8F };
+BMD_CONST REFIID IID_IDeckLinkDiscovery                           = /* CDBF631C-BC76-45FA-B44D-C55059BC6101 */ { 0xCD,0xBF,0x63,0x1C,0xBC,0x76,0x45,0xFA,0xB4,0x4D,0xC5,0x50,0x59,0xBC,0x61,0x01 };
+
+/* Enum BMDVideoOutputFlags - Flags to control the output of ancillary data along with video. */
+
+typedef uint32_t BMDVideoOutputFlags;
+enum _BMDVideoOutputFlags {
+    bmdVideoOutputFlagDefault                                    = 0,
+    bmdVideoOutputVANC                                           = 1 << 0,
+    bmdVideoOutputVITC                                           = 1 << 1,
+    bmdVideoOutputRP188                                          = 1 << 2,
+    bmdVideoOutputDualStream3D                                   = 1 << 4,
+    bmdVideoOutputSynchronizeToPlaybackGroup                     = 1 << 6
+};
+
+/* Enum BMDSupportedVideoModeFlags - Flags to describe supported video modes */
+
+typedef uint32_t BMDSupportedVideoModeFlags;
+enum _BMDSupportedVideoModeFlags {
+    bmdSupportedVideoModeDefault                                 = 0,
+    bmdSupportedVideoModeKeying                                  = 1 << 0,
+    bmdSupportedVideoModeDualStream3D                            = 1 << 1,
+    bmdSupportedVideoModeSDISingleLink                           = 1 << 2,
+    bmdSupportedVideoModeSDIDualLink                             = 1 << 3,
+    bmdSupportedVideoModeSDIQuadLink                             = 1 << 4,
+    bmdSupportedVideoModeInAnyProfile                            = 1 << 5
+};
+
+/* Enum BMDPacketType - Type of packet */
+
+typedef uint32_t BMDPacketType;
+enum _BMDPacketType {
+    bmdPacketTypeStreamInterruptedMarker                         = /* 'sint' */ 0x73696E74,	// A packet of this type marks the time when a video stream was interrupted, for example by a disconnected cable
+    bmdPacketTypeStreamData                                      = /* 'sdat' */ 0x73646174	// Regular stream data
+};
+
+/* Enum BMDFrameFlags - Frame flags */
+
+typedef uint32_t BMDFrameFlags;
+enum _BMDFrameFlags {
+    bmdFrameFlagDefault                                          = 0,
+    bmdFrameFlagFlipVertical                                     = 1 << 0,
+    bmdFrameContainsHDRMetadata                                  = 1 << 1,
+
+    /* Flags that are applicable only to instances of IDeckLinkVideoInputFrame */
+
+    bmdFrameCapturedAsPsF                                        = 1 << 30,
+    bmdFrameHasNoInputSource                                     = 1 << 31
+};
+
+/* Enum BMDVideoInputFlags - Flags applicable to video input */
+
+typedef uint32_t BMDVideoInputFlags;
+enum _BMDVideoInputFlags {
+    bmdVideoInputFlagDefault                                     = 0,
+    bmdVideoInputEnableFormatDetection                           = 1 << 0,
+    bmdVideoInputDualStream3D                                    = 1 << 1,
+    bmdVideoInputSynchronizeToCaptureGroup                       = 1 << 2
+};
+
+/* Enum BMDVideoInputFormatChangedEvents - Bitmask passed to the VideoInputFormatChanged notification to identify the properties of the input signal that have changed */
+
+typedef uint32_t BMDVideoInputFormatChangedEvents;
+enum _BMDVideoInputFormatChangedEvents {
+    bmdVideoInputDisplayModeChanged                              = 1 << 0,
+    bmdVideoInputFieldDominanceChanged                           = 1 << 1,
+    bmdVideoInputColorspaceChanged                               = 1 << 2
+};
+
+/* Enum BMDDetectedVideoInputFormatFlags - Flags passed to the VideoInputFormatChanged notification to describe the detected video input signal */
+
+typedef uint32_t BMDDetectedVideoInputFormatFlags;
+enum _BMDDetectedVideoInputFormatFlags {
+    bmdDetectedVideoInputYCbCr422                                = 1 << 0,
+    bmdDetectedVideoInputRGB444                                  = 1 << 1,
+    bmdDetectedVideoInputDualStream3D                            = 1 << 2,
+    bmdDetectedVideoInput12BitDepth                              = 1 << 3,
+    bmdDetectedVideoInput10BitDepth                              = 1 << 4,
+    bmdDetectedVideoInput8BitDepth                               = 1 << 5
+};
+
+/* Enum BMDDeckLinkCapturePassthroughMode - Enumerates whether the video output is electrically connected to the video input or if the clean switching mode is enabled */
+
+typedef uint32_t BMDDeckLinkCapturePassthroughMode;
+enum _BMDDeckLinkCapturePassthroughMode {
+    bmdDeckLinkCapturePassthroughModeDisabled                    = /* 'pdis' */ 0x70646973,
+    bmdDeckLinkCapturePassthroughModeDirect                      = /* 'pdir' */ 0x70646972,
+    bmdDeckLinkCapturePassthroughModeCleanSwitch                 = /* 'pcln' */ 0x70636C6E
+};
+
+/* Enum BMDOutputFrameCompletionResult - Frame Completion Callback */
+
+typedef uint32_t BMDOutputFrameCompletionResult;
+enum _BMDOutputFrameCompletionResult {
+    bmdOutputFrameCompleted,
+    bmdOutputFrameDisplayedLate,
+    bmdOutputFrameDropped,
+    bmdOutputFrameFlushed
+};
+
+/* Enum BMDReferenceStatus - GenLock input status */
+
+typedef uint32_t BMDReferenceStatus;
+enum _BMDReferenceStatus {
+    bmdReferenceUnlocked                                         = 0,
+    bmdReferenceNotSupportedByHardware                           = 1 << 0,
+    bmdReferenceLocked                                           = 1 << 1
+};
+
+/* Enum BMDAudioFormat - Audio Format */
+
+typedef uint32_t BMDAudioFormat;
+enum _BMDAudioFormat {
+    bmdAudioFormatPCM                                            = /* 'lpcm' */ 0x6C70636D	// Linear signed PCM samples
+};
+
+/* Enum BMDAudioSampleRate - Audio sample rates supported for output/input */
+
+typedef uint32_t BMDAudioSampleRate;
+enum _BMDAudioSampleRate {
+    bmdAudioSampleRate48kHz                                      = 48000
+};
+
+/* Enum BMDAudioSampleType - Audio sample sizes supported for output/input */
+
+typedef uint32_t BMDAudioSampleType;
+enum _BMDAudioSampleType {
+    bmdAudioSampleType16bitInteger                               = 16,
+    bmdAudioSampleType32bitInteger                               = 32
+};
+
+/* Enum BMDAudioOutputStreamType - Audio output stream type */
+
+typedef uint32_t BMDAudioOutputStreamType;
+enum _BMDAudioOutputStreamType {
+    bmdAudioOutputStreamContinuous,
+    bmdAudioOutputStreamContinuousDontResample,
+    bmdAudioOutputStreamTimestamped
+};
+
+/* Enum BMDAncillaryPacketFormat - Ancillary packet format */
+
+typedef uint32_t BMDAncillaryPacketFormat;
+enum _BMDAncillaryPacketFormat {
+    bmdAncillaryPacketFormatUInt8                                = /* 'ui08' */ 0x75693038,
+    bmdAncillaryPacketFormatUInt16                               = /* 'ui16' */ 0x75693136,
+    bmdAncillaryPacketFormatYCbCr10                              = /* 'v210' */ 0x76323130
+};
+
+/* Enum BMDTimecodeFormat - Timecode formats for frame metadata */
+
+typedef uint32_t BMDTimecodeFormat;
+enum _BMDTimecodeFormat {
+    bmdTimecodeRP188VITC1                                        = /* 'rpv1' */ 0x72707631,	// RP188 timecode where DBB1 equals VITC1 (line 9)
+    bmdTimecodeRP188VITC2                                        = /* 'rp12' */ 0x72703132,	// RP188 timecode where DBB1 equals VITC2 (line 9 for progressive or line 571 for interlaced/PsF)
+    bmdTimecodeRP188LTC                                          = /* 'rplt' */ 0x72706C74,	// RP188 timecode where DBB1 equals LTC (line 10)
+    bmdTimecodeRP188HighFrameRate                                = /* 'rphr' */ 0x72706872,	// RP188 timecode where DBB1 is an HFRTC (SMPTE ST 12-3), the only timecode allowing the frame value to go above 30
+    bmdTimecodeRP188Any                                          = /* 'rp18' */ 0x72703138,	// Convenience for capture, returning the first valid timecode in {HFRTC (if supported), VITC1, VITC2, LTC }
+    bmdTimecodeVITC                                              = /* 'vitc' */ 0x76697463,
+    bmdTimecodeVITCField2                                        = /* 'vit2' */ 0x76697432,
+    bmdTimecodeSerial                                            = /* 'seri' */ 0x73657269
+};
+
+/* Enum BMDAnalogVideoFlags - Analog video display flags */
+
+typedef uint32_t BMDAnalogVideoFlags;
+enum _BMDAnalogVideoFlags {
+    bmdAnalogVideoFlagCompositeSetup75                           = 1 << 0,
+    bmdAnalogVideoFlagComponentBetacamLevels                     = 1 << 1
+};
+
+/* Enum BMDAudioOutputAnalogAESSwitch - Audio output Analog/AESEBU switch */
+
+typedef uint32_t BMDAudioOutputAnalogAESSwitch;
+enum _BMDAudioOutputAnalogAESSwitch {
+    bmdAudioOutputSwitchAESEBU                                   = /* 'aes ' */ 0x61657320,
+    bmdAudioOutputSwitchAnalog                                   = /* 'anlg' */ 0x616E6C67
+};
+
+/* Enum BMDVideoOutputConversionMode - Video/audio conversion mode */
+
+typedef uint32_t BMDVideoOutputConversionMode;
+enum _BMDVideoOutputConversionMode {
+    bmdNoVideoOutputConversion                                   = /* 'none' */ 0x6E6F6E65,
+    bmdVideoOutputLetterboxDownconversion                        = /* 'ltbx' */ 0x6C746278,
+    bmdVideoOutputAnamorphicDownconversion                       = /* 'amph' */ 0x616D7068,
+    bmdVideoOutputHD720toHD1080Conversion                        = /* '720c' */ 0x37323063,
+    bmdVideoOutputHardwareLetterboxDownconversion                = /* 'HWlb' */ 0x48576C62,
+    bmdVideoOutputHardwareAnamorphicDownconversion               = /* 'HWam' */ 0x4857616D,
+    bmdVideoOutputHardwareCenterCutDownconversion                = /* 'HWcc' */ 0x48576363,
+    bmdVideoOutputHardware720p1080pCrossconversion               = /* 'xcap' */ 0x78636170,
+    bmdVideoOutputHardwareAnamorphic720pUpconversion             = /* 'ua7p' */ 0x75613770,
+    bmdVideoOutputHardwareAnamorphic1080iUpconversion            = /* 'ua1i' */ 0x75613169,
+    bmdVideoOutputHardwareAnamorphic149To720pUpconversion        = /* 'u47p' */ 0x75343770,
+    bmdVideoOutputHardwareAnamorphic149To1080iUpconversion       = /* 'u41i' */ 0x75343169,
+    bmdVideoOutputHardwarePillarbox720pUpconversion              = /* 'up7p' */ 0x75703770,
+    bmdVideoOutputHardwarePillarbox1080iUpconversion             = /* 'up1i' */ 0x75703169
+};
+
+/* Enum BMDVideoInputConversionMode - Video input conversion mode */
+
+typedef uint32_t BMDVideoInputConversionMode;
+enum _BMDVideoInputConversionMode {
+    bmdNoVideoInputConversion                                    = /* 'none' */ 0x6E6F6E65,
+    bmdVideoInputLetterboxDownconversionFromHD1080               = /* '10lb' */ 0x31306C62,
+    bmdVideoInputAnamorphicDownconversionFromHD1080              = /* '10am' */ 0x3130616D,
+    bmdVideoInputLetterboxDownconversionFromHD720                = /* '72lb' */ 0x37326C62,
+    bmdVideoInputAnamorphicDownconversionFromHD720               = /* '72am' */ 0x3732616D,
+    bmdVideoInputLetterboxUpconversion                           = /* 'lbup' */ 0x6C627570,
+    bmdVideoInputAnamorphicUpconversion                          = /* 'amup' */ 0x616D7570
+};
+
+/* Enum BMDVideo3DPackingFormat - Video 3D packing format */
+
+typedef uint32_t BMDVideo3DPackingFormat;
+enum _BMDVideo3DPackingFormat {
+    bmdVideo3DPackingSidebySideHalf                              = /* 'sbsh' */ 0x73627368,
+    bmdVideo3DPackingLinebyLine                                  = /* 'lbyl' */ 0x6C62796C,
+    bmdVideo3DPackingTopAndBottom                                = /* 'tabo' */ 0x7461626F,
+    bmdVideo3DPackingFramePacking                                = /* 'frpk' */ 0x6672706B,
+    bmdVideo3DPackingLeftOnly                                    = /* 'left' */ 0x6C656674,
+    bmdVideo3DPackingRightOnly                                   = /* 'righ' */ 0x72696768
+};
+
+/* Enum BMDIdleVideoOutputOperation - Video output operation when not playing video */
+
+typedef uint32_t BMDIdleVideoOutputOperation;
+enum _BMDIdleVideoOutputOperation {
+    bmdIdleVideoOutputBlack                                      = /* 'blac' */ 0x626C6163,
+    bmdIdleVideoOutputLastFrame                                  = /* 'lafa' */ 0x6C616661
+};
+
+/* Enum BMDVideoEncoderFrameCodingMode - Video frame coding mode */
+
+typedef uint32_t BMDVideoEncoderFrameCodingMode;
+enum _BMDVideoEncoderFrameCodingMode {
+    bmdVideoEncoderFrameCodingModeInter                          = /* 'inte' */ 0x696E7465,
+    bmdVideoEncoderFrameCodingModeIntra                          = /* 'intr' */ 0x696E7472
+};
+
+/* Enum BMDDNxHRLevel - DNxHR Levels */
+
+typedef uint32_t BMDDNxHRLevel;
+enum _BMDDNxHRLevel {
+    bmdDNxHRLevelSQ                                              = /* 'dnsq' */ 0x646E7371,
+    bmdDNxHRLevelLB                                              = /* 'dnlb' */ 0x646E6C62,
+    bmdDNxHRLevelHQ                                              = /* 'dnhq' */ 0x646E6871,
+    bmdDNxHRLevelHQX                                             = /* 'dhqx' */ 0x64687178,
+    bmdDNxHRLevel444                                             = /* 'd444' */ 0x64343434
+};
+
+/* Enum BMDLinkConfiguration - Video link configuration */
+
+typedef uint32_t BMDLinkConfiguration;
+enum _BMDLinkConfiguration {
+    bmdLinkConfigurationSingleLink                               = /* 'lcsl' */ 0x6C63736C,
+    bmdLinkConfigurationDualLink                                 = /* 'lcdl' */ 0x6C63646C,
+    bmdLinkConfigurationQuadLink                                 = /* 'lcql' */ 0x6C63716C
+};
+
+/* Enum BMDDeviceInterface - Device interface type */
+
+typedef uint32_t BMDDeviceInterface;
+enum _BMDDeviceInterface {
+    bmdDeviceInterfacePCI                                        = /* 'pci ' */ 0x70636920,
+    bmdDeviceInterfaceUSB                                        = /* 'usb ' */ 0x75736220,
+    bmdDeviceInterfaceThunderbolt                                = /* 'thun' */ 0x7468756E
+};
+
+/* Enum BMDColorspace - Colorspace */
+
+typedef uint32_t BMDColorspace;
+enum _BMDColorspace {
+    bmdColorspaceRec601                                          = /* 'r601' */ 0x72363031,
+    bmdColorspaceRec709                                          = /* 'r709' */ 0x72373039,
+    bmdColorspaceRec2020                                         = /* '2020' */ 0x32303230
+};
+
+/* Enum BMDDynamicRange - SDR or HDR */
+
+typedef uint32_t BMDDynamicRange;
+enum _BMDDynamicRange {
+    bmdDynamicRangeSDR                                           = 0,	// Standard Dynamic Range in accordance with SMPTE ST 2036-1
+    bmdDynamicRangeHDRStaticPQ                                   = 1 << 29,	// High Dynamic Range PQ in accordance with SMPTE ST 2084
+    bmdDynamicRangeHDRStaticHLG                                  = 1 << 30	// High Dynamic Range HLG in accordance with ITU-R BT.2100-0
+};
+
+/* Enum BMDDeckLinkHDMIInputEDIDID - DeckLink HDMI Input EDID ID */
+
+typedef uint32_t BMDDeckLinkHDMIInputEDIDID;
+enum _BMDDeckLinkHDMIInputEDIDID {
+
+    /* Integers */
+
+    bmdDeckLinkHDMIInputEDIDDynamicRange                         = /* 'HIDy' */ 0x48494479	// Parameter is of type BMDDynamicRange. Default is (bmdDynamicRangeSDR|bmdDynamicRangeHDRStaticPQ)
+};
+
+/* Enum BMDDeckLinkFrameMetadataID - DeckLink Frame Metadata ID */
+
+typedef uint32_t BMDDeckLinkFrameMetadataID;
+enum _BMDDeckLinkFrameMetadataID {
+
+    /* Colorspace Metadata - Integers */
+
+    bmdDeckLinkFrameMetadataColorspace                           = /* 'cspc' */ 0x63737063,	// Colorspace of video frame (see BMDColorspace)
+
+    /* HDR Metadata - Integers */
+
+    bmdDeckLinkFrameMetadataHDRElectroOpticalTransferFunc        = /* 'eotf' */ 0x656F7466,	// EOTF in range 0-7 as per CEA 861.3
+
+    /* HDR Metadata - Floats */
+
+    bmdDeckLinkFrameMetadataHDRDisplayPrimariesRedX              = /* 'hdrx' */ 0x68647278,	// Red display primaries in range 0.0 - 1.0
+    bmdDeckLinkFrameMetadataHDRDisplayPrimariesRedY              = /* 'hdry' */ 0x68647279,	// Red display primaries in range 0.0 - 1.0
+    bmdDeckLinkFrameMetadataHDRDisplayPrimariesGreenX            = /* 'hdgx' */ 0x68646778,	// Green display primaries in range 0.0 - 1.0
+    bmdDeckLinkFrameMetadataHDRDisplayPrimariesGreenY            = /* 'hdgy' */ 0x68646779,	// Green display primaries in range 0.0 - 1.0
+    bmdDeckLinkFrameMetadataHDRDisplayPrimariesBlueX             = /* 'hdbx' */ 0x68646278,	// Blue display primaries in range 0.0 - 1.0
+    bmdDeckLinkFrameMetadataHDRDisplayPrimariesBlueY             = /* 'hdby' */ 0x68646279,	// Blue display primaries in range 0.0 - 1.0
+    bmdDeckLinkFrameMetadataHDRWhitePointX                       = /* 'hdwx' */ 0x68647778,	// White point in range 0.0 - 1.0
+    bmdDeckLinkFrameMetadataHDRWhitePointY                       = /* 'hdwy' */ 0x68647779,	// White point in range 0.0 - 1.0
+    bmdDeckLinkFrameMetadataHDRMaxDisplayMasteringLuminance      = /* 'hdml' */ 0x68646D6C,	// Max display mastering luminance in range 1 cd/m2 - 65535 cd/m2
+    bmdDeckLinkFrameMetadataHDRMinDisplayMasteringLuminance      = /* 'hmil' */ 0x686D696C,	// Min display mastering luminance in range 0.0001 cd/m2 - 6.5535 cd/m2
+    bmdDeckLinkFrameMetadataHDRMaximumContentLightLevel          = /* 'mcll' */ 0x6D636C6C,	// Maximum Content Light Level in range 1 cd/m2 - 65535 cd/m2
+    bmdDeckLinkFrameMetadataHDRMaximumFrameAverageLightLevel     = /* 'fall' */ 0x66616C6C	// Maximum Frame Average Light Level in range 1 cd/m2 - 65535 cd/m2
+};
+
+/* Enum BMDProfileID - Identifies a profile */
+
+typedef uint32_t BMDProfileID;
+enum _BMDProfileID {
+    bmdProfileOneSubDeviceFullDuplex                             = /* '1dfd' */ 0x31646664,
+    bmdProfileOneSubDeviceHalfDuplex                             = /* '1dhd' */ 0x31646864,
+    bmdProfileTwoSubDevicesFullDuplex                            = /* '2dfd' */ 0x32646664,
+    bmdProfileTwoSubDevicesHalfDuplex                            = /* '2dhd' */ 0x32646864,
+    bmdProfileFourSubDevicesHalfDuplex                           = /* '4dhd' */ 0x34646864
+};
+
+/* Enum BMDHDMITimecodePacking - Packing form of timecode on HDMI */
+
+typedef uint32_t BMDHDMITimecodePacking;
+enum _BMDHDMITimecodePacking {
+    bmdHDMITimecodePackingIEEEOUI000085                          = 0x00008500,
+    bmdHDMITimecodePackingIEEEOUI080046                          = 0x08004601,
+    bmdHDMITimecodePackingIEEEOUI5CF9F0                          = 0x5CF9F003
+};
+
+/* Enum BMDInternalKeyingAncillaryDataSource - Source for VANC and timecode data when performing internal keying */
+
+typedef uint32_t BMDInternalKeyingAncillaryDataSource;
+enum _BMDInternalKeyingAncillaryDataSource {
+    bmdInternalKeyingUsesAncillaryDataFromInputSignal            = /* 'ikai' */ 0x696B6169,
+    bmdInternalKeyingUsesAncillaryDataFromKeyFrame               = /* 'ikak' */ 0x696B616B
+};
+
+/* Enum BMDDeckLinkAttributeID - DeckLink Attribute ID */
+
+typedef uint32_t BMDDeckLinkAttributeID;
+enum _BMDDeckLinkAttributeID {
+
+    /* Flags */
+
+    BMDDeckLinkSupportsInternalKeying                            = /* 'keyi' */ 0x6B657969,
+    BMDDeckLinkSupportsExternalKeying                            = /* 'keye' */ 0x6B657965,
+    BMDDeckLinkSupportsInputFormatDetection                      = /* 'infd' */ 0x696E6664,
+    BMDDeckLinkHasReferenceInput                                 = /* 'hrin' */ 0x6872696E,
+    BMDDeckLinkHasSerialPort                                     = /* 'hspt' */ 0x68737074,
+    BMDDeckLinkHasAnalogVideoOutputGain                          = /* 'avog' */ 0x61766F67,
+    BMDDeckLinkCanOnlyAdjustOverallVideoOutputGain               = /* 'ovog' */ 0x6F766F67,
+    BMDDeckLinkHasVideoInputAntiAliasingFilter                   = /* 'aafl' */ 0x6161666C,
+    BMDDeckLinkHasBypass                                         = /* 'byps' */ 0x62797073,
+    BMDDeckLinkSupportsClockTimingAdjustment                     = /* 'ctad' */ 0x63746164,
+    BMDDeckLinkSupportsFullFrameReferenceInputTimingOffset       = /* 'frin' */ 0x6672696E,
+    BMDDeckLinkSupportsSMPTELevelAOutput                         = /* 'lvla' */ 0x6C766C61,
+    BMDDeckLinkSupportsAutoSwitchingPPsFOnInput                  = /* 'apsf' */ 0x61707366,
+    BMDDeckLinkSupportsDualLinkSDI                               = /* 'sdls' */ 0x73646C73,
+    BMDDeckLinkSupportsQuadLinkSDI                               = /* 'sqls' */ 0x73716C73,
+    BMDDeckLinkSupportsIdleOutput                                = /* 'idou' */ 0x69646F75,
+    BMDDeckLinkVANCRequires10BitYUVVideoFrames                   = /* 'vioY' */ 0x76696F59,	// Legacy product requires v210 active picture for IDeckLinkVideoFrameAncillaryPackets or 10-bit VANC
+    BMDDeckLinkHasLTCTimecodeInput                               = /* 'hltc' */ 0x686C7463,
+    BMDDeckLinkSupportsHDRMetadata                               = /* 'hdrm' */ 0x6864726D,
+    BMDDeckLinkSupportsColorspaceMetadata                        = /* 'cmet' */ 0x636D6574,
+    BMDDeckLinkSupportsHDMITimecode                              = /* 'htim' */ 0x6874696D,
+    BMDDeckLinkSupportsHighFrameRateTimecode                     = /* 'HFRT' */ 0x48465254,
+    BMDDeckLinkSupportsSynchronizeToCaptureGroup                 = /* 'stcg' */ 0x73746367,
+    BMDDeckLinkSupportsSynchronizeToPlaybackGroup                = /* 'stpg' */ 0x73747067,
+
+    /* Integers */
+
+    BMDDeckLinkMaximumAudioChannels                              = /* 'mach' */ 0x6D616368,
+    BMDDeckLinkMaximumAnalogAudioInputChannels                   = /* 'iach' */ 0x69616368,
+    BMDDeckLinkMaximumAnalogAudioOutputChannels                  = /* 'aach' */ 0x61616368,
+    BMDDeckLinkNumberOfSubDevices                                = /* 'nsbd' */ 0x6E736264,
+    BMDDeckLinkSubDeviceIndex                                    = /* 'subi' */ 0x73756269,
+    BMDDeckLinkPersistentID                                      = /* 'peid' */ 0x70656964,
+    BMDDeckLinkDeviceGroupID                                     = /* 'dgid' */ 0x64676964,
+    BMDDeckLinkTopologicalID                                     = /* 'toid' */ 0x746F6964,
+    BMDDeckLinkVideoOutputConnections                            = /* 'vocn' */ 0x766F636E,	// Returns a BMDVideoConnection bit field
+    BMDDeckLinkVideoInputConnections                             = /* 'vicn' */ 0x7669636E,	// Returns a BMDVideoConnection bit field
+    BMDDeckLinkAudioOutputConnections                            = /* 'aocn' */ 0x616F636E,	// Returns a BMDAudioConnection bit field
+    BMDDeckLinkAudioInputConnections                             = /* 'aicn' */ 0x6169636E,	// Returns a BMDAudioConnection bit field
+    BMDDeckLinkVideoIOSupport                                    = /* 'vios' */ 0x76696F73,	// Returns a BMDVideoIOSupport bit field
+    BMDDeckLinkDeckControlConnections                            = /* 'dccn' */ 0x6463636E,	// Returns a BMDDeckControlConnection bit field
+    BMDDeckLinkDeviceInterface                                   = /* 'dbus' */ 0x64627573,	// Returns a BMDDeviceInterface
+    BMDDeckLinkAudioInputRCAChannelCount                         = /* 'airc' */ 0x61697263,
+    BMDDeckLinkAudioInputXLRChannelCount                         = /* 'aixc' */ 0x61697863,
+    BMDDeckLinkAudioOutputRCAChannelCount                        = /* 'aorc' */ 0x616F7263,
+    BMDDeckLinkAudioOutputXLRChannelCount                        = /* 'aoxc' */ 0x616F7863,
+    BMDDeckLinkProfileID                                         = /* 'prid' */ 0x70726964,	// Returns a BMDProfileID
+    BMDDeckLinkDuplex                                            = /* 'dupx' */ 0x64757078,
+    BMDDeckLinkMinimumPrerollFrames                              = /* 'mprf' */ 0x6D707266,
+    BMDDeckLinkSupportedDynamicRange                             = /* 'sudr' */ 0x73756472,
+
+    /* Floats */
+
+    BMDDeckLinkVideoInputGainMinimum                             = /* 'vigm' */ 0x7669676D,
+    BMDDeckLinkVideoInputGainMaximum                             = /* 'vigx' */ 0x76696778,
+    BMDDeckLinkVideoOutputGainMinimum                            = /* 'vogm' */ 0x766F676D,
+    BMDDeckLinkVideoOutputGainMaximum                            = /* 'vogx' */ 0x766F6778,
+    BMDDeckLinkMicrophoneInputGainMinimum                        = /* 'migm' */ 0x6D69676D,
+    BMDDeckLinkMicrophoneInputGainMaximum                        = /* 'migx' */ 0x6D696778,
+
+    /* Strings */
+
+    BMDDeckLinkSerialPortDeviceName                              = /* 'slpn' */ 0x736C706E,
+    BMDDeckLinkVendorName                                        = /* 'vndr' */ 0x766E6472,
+    BMDDeckLinkDisplayName                                       = /* 'dspn' */ 0x6473706E,
+    BMDDeckLinkModelName                                         = /* 'mdln' */ 0x6D646C6E,
+    BMDDeckLinkDeviceHandle                                      = /* 'devh' */ 0x64657668
+};
+
+/* Enum BMDDeckLinkAPIInformationID - DeckLinkAPI information ID */
+
+typedef uint32_t BMDDeckLinkAPIInformationID;
+enum _BMDDeckLinkAPIInformationID {
+
+    /* Integer or String */
+
+    BMDDeckLinkAPIVersion                                        = /* 'vers' */ 0x76657273
+};
+
+/* Enum BMDDeckLinkStatusID - DeckLink Status ID */
+
+typedef uint32_t BMDDeckLinkStatusID;
+enum _BMDDeckLinkStatusID {
+
+    /* Integers */
+
+    bmdDeckLinkStatusDetectedVideoInputMode                      = /* 'dvim' */ 0x6476696D,
+    bmdDeckLinkStatusDetectedVideoInputFormatFlags               = /* 'dvff' */ 0x64766666,
+    bmdDeckLinkStatusDetectedVideoInputFieldDominance            = /* 'dvfd' */ 0x64766664,
+    bmdDeckLinkStatusDetectedVideoInputColorspace                = /* 'dscl' */ 0x6473636C,
+    bmdDeckLinkStatusDetectedVideoInputDynamicRange              = /* 'dsdr' */ 0x64736472,
+    bmdDeckLinkStatusDetectedSDILinkConfiguration                = /* 'dslc' */ 0x64736C63,
+    bmdDeckLinkStatusCurrentVideoInputMode                       = /* 'cvim' */ 0x6376696D,
+    bmdDeckLinkStatusCurrentVideoInputPixelFormat                = /* 'cvip' */ 0x63766970,
+    bmdDeckLinkStatusCurrentVideoInputFlags                      = /* 'cvif' */ 0x63766966,
+    bmdDeckLinkStatusCurrentVideoOutputMode                      = /* 'cvom' */ 0x63766F6D,
+    bmdDeckLinkStatusCurrentVideoOutputFlags                     = /* 'cvof' */ 0x63766F66,
+    bmdDeckLinkStatusPCIExpressLinkWidth                         = /* 'pwid' */ 0x70776964,
+    bmdDeckLinkStatusPCIExpressLinkSpeed                         = /* 'plnk' */ 0x706C6E6B,
+    bmdDeckLinkStatusLastVideoOutputPixelFormat                  = /* 'opix' */ 0x6F706978,
+    bmdDeckLinkStatusReferenceSignalMode                         = /* 'refm' */ 0x7265666D,
+    bmdDeckLinkStatusReferenceSignalFlags                        = /* 'reff' */ 0x72656666,
+    bmdDeckLinkStatusBusy                                        = /* 'busy' */ 0x62757379,
+    bmdDeckLinkStatusInterchangeablePanelType                    = /* 'icpt' */ 0x69637074,
+    bmdDeckLinkStatusDeviceTemperature                           = /* 'dtmp' */ 0x64746D70,
+
+    /* Flags */
+
+    bmdDeckLinkStatusVideoInputSignalLocked                      = /* 'visl' */ 0x7669736C,
+    bmdDeckLinkStatusReferenceSignalLocked                       = /* 'refl' */ 0x7265666C,
+
+    /* Bytes */
+
+    bmdDeckLinkStatusReceivedEDID                                = /* 'edid' */ 0x65646964
+};
+
+/* Enum BMDDeckLinkVideoStatusFlags -  */
+
+typedef uint32_t BMDDeckLinkVideoStatusFlags;
+enum _BMDDeckLinkVideoStatusFlags {
+    bmdDeckLinkVideoStatusPsF                                    = 1 << 0,
+    bmdDeckLinkVideoStatusDualStream3D                           = 1 << 1
+};
+
+/* Enum BMDDuplexMode - Duplex of the device */
+
+typedef uint32_t BMDDuplexMode;
+enum _BMDDuplexMode {
+    bmdDuplexFull                                                = /* 'dxfu' */ 0x64786675,
+    bmdDuplexHalf                                                = /* 'dxha' */ 0x64786861,
+    bmdDuplexSimplex                                             = /* 'dxsp' */ 0x64787370,
+    bmdDuplexInactive                                            = /* 'dxin' */ 0x6478696E
+};
+
+/* Enum BMDPanelType - The type of interchangeable panel */
+
+typedef uint32_t BMDPanelType;
+enum _BMDPanelType {
+    bmdPanelNotDetected                                          = /* 'npnl' */ 0x6E706E6C,
+    bmdPanelTeranexMiniSmartPanel                                = /* 'tmsm' */ 0x746D736D
+};
+
+/* Enum BMDDeviceBusyState - Current device busy state */
+
+typedef uint32_t BMDDeviceBusyState;
+enum _BMDDeviceBusyState {
+    bmdDeviceCaptureBusy                                         = 1 << 0,
+    bmdDevicePlaybackBusy                                        = 1 << 1,
+    bmdDeviceSerialPortBusy                                      = 1 << 2
+};
+
+/* Enum BMDVideoIOSupport - Device video input/output support */
+
+typedef uint32_t BMDVideoIOSupport;
+enum _BMDVideoIOSupport {
+    bmdDeviceSupportsCapture                                     = 1 << 0,
+    bmdDeviceSupportsPlayback                                    = 1 << 1
+};
+
+/* Enum BMD3DPreviewFormat - Linked Frame preview format */
+
+typedef uint32_t BMD3DPreviewFormat;
+enum _BMD3DPreviewFormat {
+    bmd3DPreviewFormatDefault                                    = /* 'defa' */ 0x64656661,
+    bmd3DPreviewFormatLeftOnly                                   = /* 'left' */ 0x6C656674,
+    bmd3DPreviewFormatRightOnly                                  = /* 'righ' */ 0x72696768,
+    bmd3DPreviewFormatSideBySide                                 = /* 'side' */ 0x73696465,
+    bmd3DPreviewFormatTopBottom                                  = /* 'topb' */ 0x746F7062
+};
+
+/* Enum BMDNotifications - Events that can be subscribed through IDeckLinkNotification */
+
+typedef uint32_t BMDNotifications;
+enum _BMDNotifications {
+    bmdPreferencesChanged                                        = /* 'pref' */ 0x70726566,
+    bmdStatusChanged                                             = /* 'stat' */ 0x73746174
+};
+
+#if defined(__cplusplus)
+
+// Forward Declarations
+
+class IDeckLinkVideoOutputCallback;
+class IDeckLinkInputCallback;
+class IDeckLinkEncoderInputCallback;
+class IDeckLinkMemoryAllocator;
+class IDeckLinkAudioOutputCallback;
+class IDeckLinkIterator;
+class IDeckLinkAPIInformation;
+class IDeckLinkOutput;
+class IDeckLinkInput;
+class IDeckLinkHDMIInputEDID;
+class IDeckLinkEncoderInput;
+class IDeckLinkVideoFrame;
+class IDeckLinkMutableVideoFrame;
+class IDeckLinkVideoFrame3DExtensions;
+class IDeckLinkVideoFrameMetadataExtensions;
+class IDeckLinkVideoInputFrame;
+class IDeckLinkAncillaryPacket;
+class IDeckLinkAncillaryPacketIterator;
+class IDeckLinkVideoFrameAncillaryPackets;
+class IDeckLinkVideoFrameAncillary;
+class IDeckLinkEncoderPacket;
+class IDeckLinkEncoderVideoPacket;
+class IDeckLinkEncoderAudioPacket;
+class IDeckLinkH265NALPacket;
+class IDeckLinkAudioInputPacket;
+class IDeckLinkScreenPreviewCallback;
+class IDeckLinkGLScreenPreviewHelper;
+class IDeckLinkNotificationCallback;
+class IDeckLinkNotification;
+class IDeckLinkProfileAttributes;
+class IDeckLinkProfileIterator;
+class IDeckLinkProfile;
+class IDeckLinkProfileCallback;
+class IDeckLinkProfileManager;
+class IDeckLinkStatus;
+class IDeckLinkKeyer;
+class IDeckLinkVideoConversion;
+class IDeckLinkDeviceNotificationCallback;
+class IDeckLinkDiscovery;
+
+/* Interface IDeckLinkVideoOutputCallback - Frame completion callback. */
+
+class BMD_PUBLIC IDeckLinkVideoOutputCallback : public IUnknown
+{
+public:
+    virtual HRESULT ScheduledFrameCompleted (/* in */ IDeckLinkVideoFrame* completedFrame, /* in */ BMDOutputFrameCompletionResult result) = 0;
+    virtual HRESULT ScheduledPlaybackHasStopped (void) = 0;
+
+protected:
+    virtual ~IDeckLinkVideoOutputCallback () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkInputCallback - Frame arrival callback. */
+
+class BMD_PUBLIC IDeckLinkInputCallback : public IUnknown
+{
+public:
+    virtual HRESULT VideoInputFormatChanged (/* in */ BMDVideoInputFormatChangedEvents notificationEvents, /* in */ IDeckLinkDisplayMode* newDisplayMode, /* in */ BMDDetectedVideoInputFormatFlags detectedSignalFlags) = 0;
+    virtual HRESULT VideoInputFrameArrived (/* in */ IDeckLinkVideoInputFrame* videoFrame, /* in */ IDeckLinkAudioInputPacket* audioPacket) = 0;
+
+protected:
+    virtual ~IDeckLinkInputCallback () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkEncoderInputCallback - Frame arrival callback. */
+
+class BMD_PUBLIC IDeckLinkEncoderInputCallback : public IUnknown
+{
+public:
+    virtual HRESULT VideoInputSignalChanged (/* in */ BMDVideoInputFormatChangedEvents notificationEvents, /* in */ IDeckLinkDisplayMode* newDisplayMode, /* in */ BMDDetectedVideoInputFormatFlags detectedSignalFlags) = 0;
+    virtual HRESULT VideoPacketArrived (/* in */ IDeckLinkEncoderVideoPacket* videoPacket) = 0;
+    virtual HRESULT AudioPacketArrived (/* in */ IDeckLinkEncoderAudioPacket* audioPacket) = 0;
+
+protected:
+    virtual ~IDeckLinkEncoderInputCallback () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkMemoryAllocator - Memory allocator for video frames. */
+
+class BMD_PUBLIC IDeckLinkMemoryAllocator : public IUnknown
+{
+public:
+    virtual HRESULT AllocateBuffer (/* in */ uint32_t bufferSize, /* out */ void** allocatedBuffer) = 0;
+    virtual HRESULT ReleaseBuffer (/* in */ void* buffer) = 0;
+    virtual HRESULT Commit (void) = 0;
+    virtual HRESULT Decommit (void) = 0;
+};
+
+/* Interface IDeckLinkAudioOutputCallback - Optional callback to allow audio samples to be pulled as required. */
+
+class BMD_PUBLIC IDeckLinkAudioOutputCallback : public IUnknown
+{
+public:
+    virtual HRESULT RenderAudioSamples (/* in */ bool preroll) = 0;
+};
+
+/* Interface IDeckLinkIterator - Enumerates installed DeckLink hardware */
+
+class BMD_PUBLIC IDeckLinkIterator : public IUnknown
+{
+public:
+    virtual HRESULT Next (/* out */ IDeckLink** deckLinkInstance) = 0;
+};
+
+/* Interface IDeckLinkAPIInformation - DeckLinkAPI attribute interface */
+
+class BMD_PUBLIC IDeckLinkAPIInformation : public IUnknown
+{
+public:
+    virtual HRESULT GetFlag (/* in */ BMDDeckLinkAPIInformationID cfgID, /* out */ bool* value) = 0;
+    virtual HRESULT GetInt (/* in */ BMDDeckLinkAPIInformationID cfgID, /* out */ int64_t* value) = 0;
+    virtual HRESULT GetFloat (/* in */ BMDDeckLinkAPIInformationID cfgID, /* out */ double* value) = 0;
+    virtual HRESULT GetString (/* in */ BMDDeckLinkAPIInformationID cfgID, /* out */ const char** value) = 0;
+
+protected:
+    virtual ~IDeckLinkAPIInformation () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkOutput - Created by QueryInterface from IDeckLink. */
+
+class BMD_PUBLIC IDeckLinkOutput : public IUnknown
+{
+public:
+    virtual HRESULT DoesSupportVideoMode (/* in */ BMDVideoConnection connection /* If a value of bmdVideoConnectionUnspecified is specified, the caller does not care about the connection */, /* in */ BMDDisplayMode requestedMode, /* in */ BMDPixelFormat requestedPixelFormat, /* in */ BMDVideoOutputConversionMode conversionMode, /* in */ BMDSupportedVideoModeFlags flags, /* out */ BMDDisplayMode* actualMode, /* out */ bool* supported) = 0;
+    virtual HRESULT GetDisplayMode (/* in */ BMDDisplayMode displayMode, /* out */ IDeckLinkDisplayMode** resultDisplayMode) = 0;
+    virtual HRESULT GetDisplayModeIterator (/* out */ IDeckLinkDisplayModeIterator** iterator) = 0;
+    virtual HRESULT SetScreenPreviewCallback (/* in */ IDeckLinkScreenPreviewCallback* previewCallback) = 0;
+
+    /* Video Output */
+
+    virtual HRESULT EnableVideoOutput (/* in */ BMDDisplayMode displayMode, /* in */ BMDVideoOutputFlags flags) = 0;
+    virtual HRESULT DisableVideoOutput (void) = 0;
+    virtual HRESULT SetVideoOutputFrameMemoryAllocator (/* in */ IDeckLinkMemoryAllocator* theAllocator) = 0;
+    virtual HRESULT CreateVideoFrame (/* in */ int32_t width, /* in */ int32_t height, /* in */ int32_t rowBytes, /* in */ BMDPixelFormat pixelFormat, /* in */ BMDFrameFlags flags, /* out */ IDeckLinkMutableVideoFrame** outFrame) = 0;
+    virtual HRESULT CreateAncillaryData (/* in */ BMDPixelFormat pixelFormat, /* out */ IDeckLinkVideoFrameAncillary** outBuffer) = 0;	// Use of IDeckLinkVideoFrameAncillaryPackets is preferred
+    virtual HRESULT DisplayVideoFrameSync (/* in */ IDeckLinkVideoFrame* theFrame) = 0;
+    virtual HRESULT ScheduleVideoFrame (/* in */ IDeckLinkVideoFrame* theFrame, /* in */ BMDTimeValue displayTime, /* in */ BMDTimeValue displayDuration, /* in */ BMDTimeScale timeScale) = 0;
+    virtual HRESULT SetScheduledFrameCompletionCallback (/* in */ IDeckLinkVideoOutputCallback* theCallback) = 0;
+    virtual HRESULT GetBufferedVideoFrameCount (/* out */ uint32_t* bufferedFrameCount) = 0;
+
+    /* Audio Output */
+
+    virtual HRESULT EnableAudioOutput (/* in */ BMDAudioSampleRate sampleRate, /* in */ BMDAudioSampleType sampleType, /* in */ uint32_t channelCount, /* in */ BMDAudioOutputStreamType streamType) = 0;
+    virtual HRESULT DisableAudioOutput (void) = 0;
+    virtual HRESULT WriteAudioSamplesSync (/* in */ void* buffer, /* in */ uint32_t sampleFrameCount, /* out */ uint32_t* sampleFramesWritten) = 0;
+    virtual HRESULT BeginAudioPreroll (void) = 0;
+    virtual HRESULT EndAudioPreroll (void) = 0;
+    virtual HRESULT ScheduleAudioSamples (/* in */ void* buffer, /* in */ uint32_t sampleFrameCount, /* in */ BMDTimeValue streamTime, /* in */ BMDTimeScale timeScale, /* out */ uint32_t* sampleFramesWritten) = 0;
+    virtual HRESULT GetBufferedAudioSampleFrameCount (/* out */ uint32_t* bufferedSampleFrameCount) = 0;
+    virtual HRESULT FlushBufferedAudioSamples (void) = 0;
+    virtual HRESULT SetAudioCallback (/* in */ IDeckLinkAudioOutputCallback* theCallback) = 0;
+
+    /* Output Control */
+
+    virtual HRESULT StartScheduledPlayback (/* in */ BMDTimeValue playbackStartTime, /* in */ BMDTimeScale timeScale, /* in */ double playbackSpeed) = 0;
+    virtual HRESULT StopScheduledPlayback (/* in */ BMDTimeValue stopPlaybackAtTime, /* out */ BMDTimeValue* actualStopTime, /* in */ BMDTimeScale timeScale) = 0;
+    virtual HRESULT IsScheduledPlaybackRunning (/* out */ bool* active) = 0;
+    virtual HRESULT GetScheduledStreamTime (/* in */ BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue* streamTime, /* out */ double* playbackSpeed) = 0;
+    virtual HRESULT GetReferenceStatus (/* out */ BMDReferenceStatus* referenceStatus) = 0;
+
+    /* Hardware Timing */
+
+    virtual HRESULT GetHardwareReferenceClock (/* in */ BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue* hardwareTime, /* out */ BMDTimeValue* timeInFrame, /* out */ BMDTimeValue* ticksPerFrame) = 0;
+    virtual HRESULT GetFrameCompletionReferenceTimestamp (/* in */ IDeckLinkVideoFrame* theFrame, /* in */ BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue* frameCompletionTimestamp) = 0;
+
+protected:
+    virtual ~IDeckLinkOutput () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkInput - Created by QueryInterface from IDeckLink. */
+
+class BMD_PUBLIC IDeckLinkInput : public IUnknown
+{
+public:
+    virtual HRESULT DoesSupportVideoMode (/* in */ BMDVideoConnection connection /* If a value of bmdVideoConnectionUnspecified is specified, the caller does not care about the connection */, /* in */ BMDDisplayMode requestedMode, /* in */ BMDPixelFormat requestedPixelFormat, /* in */ BMDVideoInputConversionMode conversionMode, /* in */ BMDSupportedVideoModeFlags flags, /* out */ BMDDisplayMode* actualMode, /* out */ bool* supported) = 0;
+    virtual HRESULT GetDisplayMode (/* in */ BMDDisplayMode displayMode, /* out */ IDeckLinkDisplayMode** resultDisplayMode) = 0;
+    virtual HRESULT GetDisplayModeIterator (/* out */ IDeckLinkDisplayModeIterator** iterator) = 0;
+    virtual HRESULT SetScreenPreviewCallback (/* in */ IDeckLinkScreenPreviewCallback* previewCallback) = 0;
+
+    /* Video Input */
+
+    virtual HRESULT EnableVideoInput (/* in */ BMDDisplayMode displayMode, /* in */ BMDPixelFormat pixelFormat, /* in */ BMDVideoInputFlags flags) = 0;
+    virtual HRESULT DisableVideoInput (void) = 0;
+    virtual HRESULT GetAvailableVideoFrameCount (/* out */ uint32_t* availableFrameCount) = 0;
+    virtual HRESULT SetVideoInputFrameMemoryAllocator (/* in */ IDeckLinkMemoryAllocator* theAllocator) = 0;
+
+    /* Audio Input */
+
+    virtual HRESULT EnableAudioInput (/* in */ BMDAudioSampleRate sampleRate, /* in */ BMDAudioSampleType sampleType, /* in */ uint32_t channelCount) = 0;
+    virtual HRESULT DisableAudioInput (void) = 0;
+    virtual HRESULT GetAvailableAudioSampleFrameCount (/* out */ uint32_t* availableSampleFrameCount) = 0;
+
+    /* Input Control */
+
+    virtual HRESULT StartStreams (void) = 0;
+    virtual HRESULT StopStreams (void) = 0;
+    virtual HRESULT PauseStreams (void) = 0;
+    virtual HRESULT FlushStreams (void) = 0;
+    virtual HRESULT SetCallback (/* in */ IDeckLinkInputCallback* theCallback) = 0;
+
+    /* Hardware Timing */
+
+    virtual HRESULT GetHardwareReferenceClock (/* in */ BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue* hardwareTime, /* out */ BMDTimeValue* timeInFrame, /* out */ BMDTimeValue* ticksPerFrame) = 0;
+
+protected:
+    virtual ~IDeckLinkInput () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkHDMIInputEDID - Created by QueryInterface from IDeckLink. Releasing all references will restore EDID to default */
+
+class BMD_PUBLIC IDeckLinkHDMIInputEDID : public IUnknown
+{
+public:
+    virtual HRESULT SetInt (/* in */ BMDDeckLinkHDMIInputEDIDID cfgID, /* in */ int64_t value) = 0;
+    virtual HRESULT GetInt (/* in */ BMDDeckLinkHDMIInputEDIDID cfgID, /* out */ int64_t* value) = 0;
+    virtual HRESULT WriteToEDID (void) = 0;
+
+protected:
+    virtual ~IDeckLinkHDMIInputEDID () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkEncoderInput - Created by QueryInterface from IDeckLink. */
+
+class BMD_PUBLIC IDeckLinkEncoderInput : public IUnknown
+{
+public:
+    virtual HRESULT DoesSupportVideoMode (/* in */ BMDVideoConnection connection /* If a value of bmdVideoConnectionUnspecified is specified, the caller does not care about the connection */, /* in */ BMDDisplayMode requestedMode, /* in */ BMDPixelFormat requestedCodec, /* in */ uint32_t requestedCodecProfile, /* in */ BMDSupportedVideoModeFlags flags, /* out */ bool* supported) = 0;
+    virtual HRESULT GetDisplayMode (/* in */ BMDDisplayMode displayMode, /* out */ IDeckLinkDisplayMode** resultDisplayMode) = 0;
+    virtual HRESULT GetDisplayModeIterator (/* out */ IDeckLinkDisplayModeIterator** iterator) = 0;
+
+    /* Video Input */
+
+    virtual HRESULT EnableVideoInput (/* in */ BMDDisplayMode displayMode, /* in */ BMDPixelFormat pixelFormat, /* in */ BMDVideoInputFlags flags) = 0;
+    virtual HRESULT DisableVideoInput (void) = 0;
+    virtual HRESULT GetAvailablePacketsCount (/* out */ uint32_t* availablePacketsCount) = 0;
+    virtual HRESULT SetMemoryAllocator (/* in */ IDeckLinkMemoryAllocator* theAllocator) = 0;
+
+    /* Audio Input */
+
+    virtual HRESULT EnableAudioInput (/* in */ BMDAudioFormat audioFormat, /* in */ BMDAudioSampleRate sampleRate, /* in */ BMDAudioSampleType sampleType, /* in */ uint32_t channelCount) = 0;
+    virtual HRESULT DisableAudioInput (void) = 0;
+    virtual HRESULT GetAvailableAudioSampleFrameCount (/* out */ uint32_t* availableSampleFrameCount) = 0;
+
+    /* Input Control */
+
+    virtual HRESULT StartStreams (void) = 0;
+    virtual HRESULT StopStreams (void) = 0;
+    virtual HRESULT PauseStreams (void) = 0;
+    virtual HRESULT FlushStreams (void) = 0;
+    virtual HRESULT SetCallback (/* in */ IDeckLinkEncoderInputCallback* theCallback) = 0;
+
+    /* Hardware Timing */
+
+    virtual HRESULT GetHardwareReferenceClock (/* in */ BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue* hardwareTime, /* out */ BMDTimeValue* timeInFrame, /* out */ BMDTimeValue* ticksPerFrame) = 0;
+
+protected:
+    virtual ~IDeckLinkEncoderInput () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkVideoFrame - Interface to encapsulate a video frame; can be caller-implemented. */
+
+class BMD_PUBLIC IDeckLinkVideoFrame : public IUnknown
+{
+public:
+    virtual long GetWidth (void) = 0;
+    virtual long GetHeight (void) = 0;
+    virtual long GetRowBytes (void) = 0;
+    virtual BMDPixelFormat GetPixelFormat (void) = 0;
+    virtual BMDFrameFlags GetFlags (void) = 0;
+    virtual HRESULT GetBytes (/* out */ void** buffer) = 0;
+    virtual HRESULT GetTimecode (/* in */ BMDTimecodeFormat format, /* out */ IDeckLinkTimecode** timecode) = 0;
+    virtual HRESULT GetAncillaryData (/* out */ IDeckLinkVideoFrameAncillary** ancillary) = 0;	// Use of IDeckLinkVideoFrameAncillaryPackets is preferred
+
+protected:
+    virtual ~IDeckLinkVideoFrame () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkMutableVideoFrame - Created by IDeckLinkOutput::CreateVideoFrame. */
+
+class BMD_PUBLIC IDeckLinkMutableVideoFrame : public IDeckLinkVideoFrame
+{
+public:
+    virtual HRESULT SetFlags (/* in */ BMDFrameFlags newFlags) = 0;
+    virtual HRESULT SetTimecode (/* in */ BMDTimecodeFormat format, /* in */ IDeckLinkTimecode* timecode) = 0;
+    virtual HRESULT SetTimecodeFromComponents (/* in */ BMDTimecodeFormat format, /* in */ uint8_t hours, /* in */ uint8_t minutes, /* in */ uint8_t seconds, /* in */ uint8_t frames, /* in */ BMDTimecodeFlags flags) = 0;
+    virtual HRESULT SetAncillaryData (/* in */ IDeckLinkVideoFrameAncillary* ancillary) = 0;
+    virtual HRESULT SetTimecodeUserBits (/* in */ BMDTimecodeFormat format, /* in */ BMDTimecodeUserBits userBits) = 0;
+
+protected:
+    virtual ~IDeckLinkMutableVideoFrame () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkVideoFrame3DExtensions - Optional interface implemented on IDeckLinkVideoFrame to support 3D frames */
+
+class BMD_PUBLIC IDeckLinkVideoFrame3DExtensions : public IUnknown
+{
+public:
+    virtual BMDVideo3DPackingFormat Get3DPackingFormat (void) = 0;
+    virtual HRESULT GetFrameForRightEye (/* out */ IDeckLinkVideoFrame** rightEyeFrame) = 0;
+
+protected:
+    virtual ~IDeckLinkVideoFrame3DExtensions () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkVideoFrameMetadataExtensions - Optional interface implemented on IDeckLinkVideoFrame to support frame metadata such as HDR information */
+
+class BMD_PUBLIC IDeckLinkVideoFrameMetadataExtensions : public IUnknown
+{
+public:
+    virtual HRESULT GetInt (/* in */ BMDDeckLinkFrameMetadataID metadataID, /* out */ int64_t* value) = 0;
+    virtual HRESULT GetFloat (/* in */ BMDDeckLinkFrameMetadataID metadataID, /* out */ double* value) = 0;
+    virtual HRESULT GetFlag (/* in */ BMDDeckLinkFrameMetadataID metadataID, /* out */ bool* value) = 0;
+    virtual HRESULT GetString (/* in */ BMDDeckLinkFrameMetadataID metadataID, /* out */ const char** value) = 0;
+    virtual HRESULT GetBytes (/* in */ BMDDeckLinkFrameMetadataID metadataID, /* out */ void* buffer /* optional */, /* in, out */ uint32_t* bufferSize) = 0;
+
+protected:
+    virtual ~IDeckLinkVideoFrameMetadataExtensions () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkVideoInputFrame - Provided by the IDeckLinkVideoInput frame arrival callback. */
+
+class BMD_PUBLIC IDeckLinkVideoInputFrame : public IDeckLinkVideoFrame
+{
+public:
+    virtual HRESULT GetStreamTime (/* out */ BMDTimeValue* frameTime, /* out */ BMDTimeValue* frameDuration, /* in */ BMDTimeScale timeScale) = 0;
+    virtual HRESULT GetHardwareReferenceTimestamp (/* in */ BMDTimeScale timeScale, /* out */ BMDTimeValue* frameTime, /* out */ BMDTimeValue* frameDuration) = 0;
+
+protected:
+    virtual ~IDeckLinkVideoInputFrame () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkAncillaryPacket - On output, user needs to implement this interface */
+
+class BMD_PUBLIC IDeckLinkAncillaryPacket : public IUnknown
+{
+public:
+    virtual HRESULT GetBytes (/* in */ BMDAncillaryPacketFormat format /* For output, only one format need be offered */, /* out */ const void** data /* Optional */, /* out */ uint32_t* size /* Optional */) = 0;
+    virtual uint8_t GetDID (void) = 0;
+    virtual uint8_t GetSDID (void) = 0;
+    virtual uint32_t GetLineNumber (void) = 0;	// On output, zero is auto
+    virtual uint8_t GetDataStreamIndex (void) = 0;	// Usually zero. Can only be 1 if non-SD and the first data stream is completely full
+
+protected:
+    virtual ~IDeckLinkAncillaryPacket () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkAncillaryPacketIterator - Enumerates ancillary packets */
+
+class BMD_PUBLIC IDeckLinkAncillaryPacketIterator : public IUnknown
+{
+public:
+    virtual HRESULT Next (/* out */ IDeckLinkAncillaryPacket** packet) = 0;
+
+protected:
+    virtual ~IDeckLinkAncillaryPacketIterator () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkVideoFrameAncillaryPackets - Obtained through QueryInterface on an IDeckLinkVideoFrame object. */
+
+class BMD_PUBLIC IDeckLinkVideoFrameAncillaryPackets : public IUnknown
+{
+public:
+    virtual HRESULT GetPacketIterator (/* out */ IDeckLinkAncillaryPacketIterator** iterator) = 0;
+    virtual HRESULT GetFirstPacketByID (/* in */ uint8_t DID, /* in */ uint8_t SDID, /* out */ IDeckLinkAncillaryPacket** packet) = 0;
+    virtual HRESULT AttachPacket (/* in */ IDeckLinkAncillaryPacket* packet) = 0;	// Implement IDeckLinkAncillaryPacket to output your own
+    virtual HRESULT DetachPacket (/* in */ IDeckLinkAncillaryPacket* packet) = 0;
+    virtual HRESULT DetachAllPackets (void) = 0;
+
+protected:
+    virtual ~IDeckLinkVideoFrameAncillaryPackets () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkVideoFrameAncillary - Use of IDeckLinkVideoFrameAncillaryPackets is preferred. Obtained through QueryInterface on an IDeckLinkVideoFrame object. */
+
+class BMD_PUBLIC IDeckLinkVideoFrameAncillary : public IUnknown
+{
+public:
+    virtual HRESULT GetBufferForVerticalBlankingLine (/* in */ uint32_t lineNumber, /* out */ void** buffer) = 0;	// Pixels/rowbytes is same as display mode, except for above HD where it's 1920 pixels for UHD modes and 2048 pixels for DCI modes
+    virtual BMDPixelFormat GetPixelFormat (void) = 0;
+    virtual BMDDisplayMode GetDisplayMode (void) = 0;
+
+protected:
+    virtual ~IDeckLinkVideoFrameAncillary () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkEncoderPacket - Interface to encapsulate an encoded packet. */
+
+class BMD_PUBLIC IDeckLinkEncoderPacket : public IUnknown
+{
+public:
+    virtual HRESULT GetBytes (/* out */ void** buffer) = 0;
+    virtual long GetSize (void) = 0;
+    virtual HRESULT GetStreamTime (/* out */ BMDTimeValue* frameTime, /* in */ BMDTimeScale timeScale) = 0;
+    virtual BMDPacketType GetPacketType (void) = 0;
+
+protected:
+    virtual ~IDeckLinkEncoderPacket () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkEncoderVideoPacket - Provided by the IDeckLinkEncoderInput video packet arrival callback. */
+
+class BMD_PUBLIC IDeckLinkEncoderVideoPacket : public IDeckLinkEncoderPacket
+{
+public:
+    virtual BMDPixelFormat GetPixelFormat (void) = 0;
+    virtual HRESULT GetHardwareReferenceTimestamp (/* in */ BMDTimeScale timeScale, /* out */ BMDTimeValue* frameTime, /* out */ BMDTimeValue* frameDuration) = 0;
+    virtual HRESULT GetTimecode (/* in */ BMDTimecodeFormat format, /* out */ IDeckLinkTimecode** timecode) = 0;
+
+protected:
+    virtual ~IDeckLinkEncoderVideoPacket () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkEncoderAudioPacket - Provided by the IDeckLinkEncoderInput audio packet arrival callback. */
+
+class BMD_PUBLIC IDeckLinkEncoderAudioPacket : public IDeckLinkEncoderPacket
+{
+public:
+    virtual BMDAudioFormat GetAudioFormat (void) = 0;
+
+protected:
+    virtual ~IDeckLinkEncoderAudioPacket () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkH265NALPacket - Obtained through QueryInterface on an IDeckLinkEncoderVideoPacket object */
+
+class BMD_PUBLIC IDeckLinkH265NALPacket : public IDeckLinkEncoderVideoPacket
+{
+public:
+    virtual HRESULT GetUnitType (/* out */ uint8_t* unitType) = 0;
+    virtual HRESULT GetBytesNoPrefix (/* out */ void** buffer) = 0;
+    virtual long GetSizeNoPrefix (void) = 0;
+
+protected:
+    virtual ~IDeckLinkH265NALPacket () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkAudioInputPacket - Provided by the IDeckLinkInput callback. */
+
+class BMD_PUBLIC IDeckLinkAudioInputPacket : public IUnknown
+{
+public:
+    virtual long GetSampleFrameCount (void) = 0;
+    virtual HRESULT GetBytes (/* out */ void** buffer) = 0;
+    virtual HRESULT GetPacketTime (/* out */ BMDTimeValue* packetTime, /* in */ BMDTimeScale timeScale) = 0;
+
+protected:
+    virtual ~IDeckLinkAudioInputPacket () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkScreenPreviewCallback - Screen preview callback */
+
+class BMD_PUBLIC IDeckLinkScreenPreviewCallback : public IUnknown
+{
+public:
+    virtual HRESULT DrawFrame (/* in */ IDeckLinkVideoFrame* theFrame) = 0;
+
+protected:
+    virtual ~IDeckLinkScreenPreviewCallback () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkGLScreenPreviewHelper - Created with CoCreateInstance on platforms with native COM support or from CreateOpenGLScreenPreviewHelper/CreateOpenGL3ScreenPreviewHelper on other platforms. */
+
+class BMD_PUBLIC IDeckLinkGLScreenPreviewHelper : public IUnknown
+{
+public:
+
+    /* Methods must be called with OpenGL context set */
+
+    virtual HRESULT InitializeGL (void) = 0;
+    virtual HRESULT PaintGL (void) = 0;
+    virtual HRESULT SetFrame (/* in */ IDeckLinkVideoFrame* theFrame) = 0;
+    virtual HRESULT Set3DPreviewFormat (/* in */ BMD3DPreviewFormat previewFormat) = 0;
+
+protected:
+    virtual ~IDeckLinkGLScreenPreviewHelper () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkNotificationCallback - DeckLink Notification Callback Interface */
+
+class BMD_PUBLIC IDeckLinkNotificationCallback : public IUnknown
+{
+public:
+    virtual HRESULT Notify (/* in */ BMDNotifications topic, /* in */ uint64_t param1, /* in */ uint64_t param2) = 0;
+};
+
+/* Interface IDeckLinkNotification - DeckLink Notification interface */
+
+class BMD_PUBLIC IDeckLinkNotification : public IUnknown
+{
+public:
+    virtual HRESULT Subscribe (/* in */ BMDNotifications topic, /* in */ IDeckLinkNotificationCallback* theCallback) = 0;
+    virtual HRESULT Unsubscribe (/* in */ BMDNotifications topic, /* in */ IDeckLinkNotificationCallback* theCallback) = 0;
+
+protected:
+    virtual ~IDeckLinkNotification () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkProfileAttributes - Created by QueryInterface from an IDeckLinkProfile, or from IDeckLink. When queried from IDeckLink, interrogates the active profile */
+
+class BMD_PUBLIC IDeckLinkProfileAttributes : public IUnknown
+{
+public:
+    virtual HRESULT GetFlag (/* in */ BMDDeckLinkAttributeID cfgID, /* out */ bool* value) = 0;
+    virtual HRESULT GetInt (/* in */ BMDDeckLinkAttributeID cfgID, /* out */ int64_t* value) = 0;
+    virtual HRESULT GetFloat (/* in */ BMDDeckLinkAttributeID cfgID, /* out */ double* value) = 0;
+    virtual HRESULT GetString (/* in */ BMDDeckLinkAttributeID cfgID, /* out */ const char** value) = 0;
+
+protected:
+    virtual ~IDeckLinkProfileAttributes () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkProfileIterator - Enumerates IDeckLinkProfile interfaces */
+
+class BMD_PUBLIC IDeckLinkProfileIterator : public IUnknown
+{
+public:
+    virtual HRESULT Next (/* out */ IDeckLinkProfile** profile) = 0;
+
+protected:
+    virtual ~IDeckLinkProfileIterator () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkProfile - Represents the active profile when queried from IDeckLink */
+
+class BMD_PUBLIC IDeckLinkProfile : public IUnknown
+{
+public:
+    virtual HRESULT GetDevice (/* out */ IDeckLink** device) = 0;	// Device affected when this profile becomes active
+    virtual HRESULT IsActive (/* out */ bool* isActive) = 0;
+    virtual HRESULT SetActive (void) = 0;	// Activating a profile will also change the profile on all devices enumerated by GetPeers. Activation is not complete until IDeckLinkProfileCallback::ProfileActivated is called
+    virtual HRESULT GetPeers (/* out */ IDeckLinkProfileIterator** profileIterator) = 0;	// Profiles of other devices activated with this profile
+
+protected:
+    virtual ~IDeckLinkProfile () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkProfileCallback - Receive notifications about profiles related to this device */
+
+class BMD_PUBLIC IDeckLinkProfileCallback : public IUnknown
+{
+public:
+    virtual HRESULT ProfileChanging (/* in */ IDeckLinkProfile* profileToBeActivated, /* in */ bool streamsWillBeForcedToStop) = 0;	// Called before this device changes profile. User has an opportunity for teardown if streamsWillBeForcedToStop
+    virtual HRESULT ProfileActivated (/* in */ IDeckLinkProfile* activatedProfile) = 0;	// Called after this device has been activated with a new profile
+
+protected:
+    virtual ~IDeckLinkProfileCallback () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkProfileManager - Created by QueryInterface from IDeckLink when a device has multiple optional profiles */
+
+class BMD_PUBLIC IDeckLinkProfileManager : public IUnknown
+{
+public:
+    virtual HRESULT GetProfiles (/* out */ IDeckLinkProfileIterator** profileIterator) = 0;	// All available profiles for this device
+    virtual HRESULT GetProfile (/* in */ BMDProfileID profileID, /* out */ IDeckLinkProfile** profile) = 0;
+    virtual HRESULT SetCallback (/* in */ IDeckLinkProfileCallback* callback) = 0;
+
+protected:
+    virtual ~IDeckLinkProfileManager () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkStatus - DeckLink Status interface */
+
+class BMD_PUBLIC IDeckLinkStatus : public IUnknown
+{
+public:
+    virtual HRESULT GetFlag (/* in */ BMDDeckLinkStatusID statusID, /* out */ bool* value) = 0;
+    virtual HRESULT GetInt (/* in */ BMDDeckLinkStatusID statusID, /* out */ int64_t* value) = 0;
+    virtual HRESULT GetFloat (/* in */ BMDDeckLinkStatusID statusID, /* out */ double* value) = 0;
+    virtual HRESULT GetString (/* in */ BMDDeckLinkStatusID statusID, /* out */ const char** value) = 0;
+    virtual HRESULT GetBytes (/* in */ BMDDeckLinkStatusID statusID, /* out */ void* buffer, /* in, out */ uint32_t* bufferSize) = 0;
+
+protected:
+    virtual ~IDeckLinkStatus () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkKeyer - DeckLink Keyer interface */
+
+class BMD_PUBLIC IDeckLinkKeyer : public IUnknown
+{
+public:
+    virtual HRESULT Enable (/* in */ bool isExternal) = 0;
+    virtual HRESULT SetLevel (/* in */ uint8_t level) = 0;
+    virtual HRESULT RampUp (/* in */ uint32_t numberOfFrames) = 0;
+    virtual HRESULT RampDown (/* in */ uint32_t numberOfFrames) = 0;
+    virtual HRESULT Disable (void) = 0;
+
+protected:
+    virtual ~IDeckLinkKeyer () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkVideoConversion - Created with CoCreateInstance. */
+
+class BMD_PUBLIC IDeckLinkVideoConversion : public IUnknown
+{
+public:
+    virtual HRESULT ConvertFrame (/* in */ IDeckLinkVideoFrame* srcFrame, /* in */ IDeckLinkVideoFrame* dstFrame) = 0;
+
+protected:
+    virtual ~IDeckLinkVideoConversion () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkDeviceNotificationCallback - DeckLink device arrival/removal notification callbacks */
+
+class BMD_PUBLIC IDeckLinkDeviceNotificationCallback : public IUnknown
+{
+public:
+    virtual HRESULT DeckLinkDeviceArrived (/* in */ IDeckLink* deckLinkDevice) = 0;
+    virtual HRESULT DeckLinkDeviceRemoved (/* in */ IDeckLink* deckLinkDevice) = 0;
+
+protected:
+    virtual ~IDeckLinkDeviceNotificationCallback () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkDiscovery - DeckLink device discovery */
+
+class BMD_PUBLIC IDeckLinkDiscovery : public IUnknown
+{
+public:
+    virtual HRESULT InstallDeviceNotifications (/* in */ IDeckLinkDeviceNotificationCallback* deviceNotificationCallback) = 0;
+    virtual HRESULT UninstallDeviceNotifications (void) = 0;
+
+protected:
+    virtual ~IDeckLinkDiscovery () {} // call Release method to drop reference count
+};
+
+/* Functions */
+
+extern "C" {
+
+    BMD_PUBLIC IDeckLinkIterator* CreateDeckLinkIteratorInstance(void);
+    BMD_PUBLIC IDeckLinkDiscovery* CreateDeckLinkDiscoveryInstance(void);
+    BMD_PUBLIC IDeckLinkAPIInformation* CreateDeckLinkAPIInformationInstance(void);
+    BMD_PUBLIC IDeckLinkGLScreenPreviewHelper* CreateOpenGLScreenPreviewHelper(void);
+    BMD_PUBLIC IDeckLinkGLScreenPreviewHelper* CreateOpenGL3ScreenPreviewHelper(void);	// Requires OpenGL 3.2 support and provides improved performance and color handling
+    BMD_PUBLIC IDeckLinkVideoConversion* CreateVideoConversionInstance(void);
+    BMD_PUBLIC IDeckLinkVideoFrameAncillaryPackets* CreateVideoFrameAncillaryPacketsInstance(void);	// For use when creating a custom IDeckLinkVideoFrame without wrapping IDeckLinkOutput::CreateVideoFrame
+
+}
+
+
+
+#endif /* defined(__cplusplus) */
+#endif /* defined(BMD_DECKLINKAPI_H) */
diff --git a/DeckLinkSDK/Linux/include/DeckLinkAPIConfiguration.h b/DeckLinkSDK/Linux/include/DeckLinkAPIConfiguration.h
new file mode 100644
index 0000000000..42e2441357
--- /dev/null
+++ b/DeckLinkSDK/Linux/include/DeckLinkAPIConfiguration.h
@@ -0,0 +1,269 @@
+/* -LICENSE-START-
+** Copyright (c) 2022 Blackmagic Design
+**
+** Permission is hereby granted, free of charge, to any person or organization
+** obtaining a copy of the software and accompanying documentation covered by
+** this license (the "Software") to use, reproduce, display, distribute,
+** execute, and transmit the Software, and to prepare derivative works of the
+** Software, and to permit third-parties to whom the Software is furnished to
+** do so, all subject to the following:
+**
+** The copyright notices in the Software and this entire statement, including
+** the above license grant, this restriction and the following disclaimer,
+** must be included in all copies of the Software, in whole or in part, and
+** all derivative works of the Software, unless such copies or derivative
+** works are solely in the form of machine-executable object code generated by
+** a source language processor.
+**
+** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+** DEALINGS IN THE SOFTWARE.
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPICONFIGURATION_H
+#define BMD_DECKLINKAPICONFIGURATION_H
+
+
+#ifndef BMD_CONST
+    #if defined(_MSC_VER)
+        #define BMD_CONST __declspec(selectany) static const
+    #else
+        #define BMD_CONST static const
+    #endif
+#endif
+
+#ifndef BMD_PUBLIC
+	#define BMD_PUBLIC
+#endif
+
+// Type Declarations
+
+
+// Interface ID Declarations
+
+BMD_CONST REFIID IID_IDeckLinkConfiguration                       = /* 912F634B-2D4E-40A4-8AAB-8D80B73F1289 */ { 0x91,0x2F,0x63,0x4B,0x2D,0x4E,0x40,0xA4,0x8A,0xAB,0x8D,0x80,0xB7,0x3F,0x12,0x89 };
+BMD_CONST REFIID IID_IDeckLinkEncoderConfiguration                = /* 138050E5-C60A-4552-BF3F-0F358049327E */ { 0x13,0x80,0x50,0xE5,0xC6,0x0A,0x45,0x52,0xBF,0x3F,0x0F,0x35,0x80,0x49,0x32,0x7E };
+
+/* Enum BMDDeckLinkConfigurationID - DeckLink Configuration ID */
+
+typedef uint32_t BMDDeckLinkConfigurationID;
+enum _BMDDeckLinkConfigurationID {
+
+    /* Serial port Flags */
+
+    bmdDeckLinkConfigSwapSerialRxTx                              = /* 'ssrt' */ 0x73737274,
+
+    /* Video Input/Output Integers */
+
+    bmdDeckLinkConfigHDMI3DPackingFormat                         = /* '3dpf' */ 0x33647066,
+    bmdDeckLinkConfigBypass                                      = /* 'byps' */ 0x62797073,
+    bmdDeckLinkConfigClockTimingAdjustment                       = /* 'ctad' */ 0x63746164,
+
+    /* Audio Input/Output Flags */
+
+    bmdDeckLinkConfigAnalogAudioConsumerLevels                   = /* 'aacl' */ 0x6161636C,
+    bmdDeckLinkConfigSwapHDMICh3AndCh4OnInput                    = /* 'hi34' */ 0x68693334,
+    bmdDeckLinkConfigSwapHDMICh3AndCh4OnOutput                   = /* 'ho34' */ 0x686F3334,
+
+    /* Video Output Flags */
+
+    bmdDeckLinkConfigFieldFlickerRemoval                         = /* 'fdfr' */ 0x66646672,
+    bmdDeckLinkConfigHD1080p24ToHD1080i5994Conversion            = /* 'to59' */ 0x746F3539,
+    bmdDeckLinkConfig444SDIVideoOutput                           = /* '444o' */ 0x3434346F,
+    bmdDeckLinkConfigBlackVideoOutputDuringCapture               = /* 'bvoc' */ 0x62766F63,
+    bmdDeckLinkConfigLowLatencyVideoOutput                       = /* 'llvo' */ 0x6C6C766F,
+    bmdDeckLinkConfigDownConversionOnAllAnalogOutput             = /* 'caao' */ 0x6361616F,
+    bmdDeckLinkConfigSMPTELevelAOutput                           = /* 'smta' */ 0x736D7461,
+    bmdDeckLinkConfigRec2020Output                               = /* 'rec2' */ 0x72656332,	// Ensure output is Rec.2020 colorspace
+    bmdDeckLinkConfigQuadLinkSDIVideoOutputSquareDivisionSplit   = /* 'SDQS' */ 0x53445153,
+    bmdDeckLinkConfigOutput1080pAsPsF                            = /* 'pfpr' */ 0x70667072,
+
+    /* Video Output Integers */
+
+    bmdDeckLinkConfigVideoOutputConnection                       = /* 'vocn' */ 0x766F636E,
+    bmdDeckLinkConfigVideoOutputConversionMode                   = /* 'vocm' */ 0x766F636D,
+    bmdDeckLinkConfigAnalogVideoOutputFlags                      = /* 'avof' */ 0x61766F66,
+    bmdDeckLinkConfigReferenceInputTimingOffset                  = /* 'glot' */ 0x676C6F74,
+    bmdDeckLinkConfigVideoOutputIdleOperation                    = /* 'voio' */ 0x766F696F,
+    bmdDeckLinkConfigDefaultVideoOutputMode                      = /* 'dvom' */ 0x64766F6D,
+    bmdDeckLinkConfigDefaultVideoOutputModeFlags                 = /* 'dvof' */ 0x64766F66,
+    bmdDeckLinkConfigSDIOutputLinkConfiguration                  = /* 'solc' */ 0x736F6C63,
+    bmdDeckLinkConfigHDMITimecodePacking                         = /* 'htpk' */ 0x6874706B,
+    bmdDeckLinkConfigPlaybackGroup                               = /* 'plgr' */ 0x706C6772,
+
+    /* Video Output Floats */
+
+    bmdDeckLinkConfigVideoOutputComponentLumaGain                = /* 'oclg' */ 0x6F636C67,
+    bmdDeckLinkConfigVideoOutputComponentChromaBlueGain          = /* 'occb' */ 0x6F636362,
+    bmdDeckLinkConfigVideoOutputComponentChromaRedGain           = /* 'occr' */ 0x6F636372,
+    bmdDeckLinkConfigVideoOutputCompositeLumaGain                = /* 'oilg' */ 0x6F696C67,
+    bmdDeckLinkConfigVideoOutputCompositeChromaGain              = /* 'oicg' */ 0x6F696367,
+    bmdDeckLinkConfigVideoOutputSVideoLumaGain                   = /* 'oslg' */ 0x6F736C67,
+    bmdDeckLinkConfigVideoOutputSVideoChromaGain                 = /* 'oscg' */ 0x6F736367,
+
+    /* Video Input Flags */
+
+    bmdDeckLinkConfigVideoInputScanning                          = /* 'visc' */ 0x76697363,	// Applicable to H264 Pro Recorder only
+    bmdDeckLinkConfigUseDedicatedLTCInput                        = /* 'dltc' */ 0x646C7463,	// Use timecode from LTC input instead of SDI stream
+    bmdDeckLinkConfigSDIInput3DPayloadOverride                   = /* '3dds' */ 0x33646473,
+    bmdDeckLinkConfigCapture1080pAsPsF                           = /* 'cfpr' */ 0x63667072,
+
+    /* Video Input Integers */
+
+    bmdDeckLinkConfigVideoInputConnection                        = /* 'vicn' */ 0x7669636E,
+    bmdDeckLinkConfigAnalogVideoInputFlags                       = /* 'avif' */ 0x61766966,
+    bmdDeckLinkConfigVideoInputConversionMode                    = /* 'vicm' */ 0x7669636D,
+    bmdDeckLinkConfig32PulldownSequenceInitialTimecodeFrame      = /* 'pdif' */ 0x70646966,
+    bmdDeckLinkConfigVANCSourceLine1Mapping                      = /* 'vsl1' */ 0x76736C31,
+    bmdDeckLinkConfigVANCSourceLine2Mapping                      = /* 'vsl2' */ 0x76736C32,
+    bmdDeckLinkConfigVANCSourceLine3Mapping                      = /* 'vsl3' */ 0x76736C33,
+    bmdDeckLinkConfigCapturePassThroughMode                      = /* 'cptm' */ 0x6370746D,
+    bmdDeckLinkConfigCaptureGroup                                = /* 'cpgr' */ 0x63706772,
+
+    /* Video Input Floats */
+
+    bmdDeckLinkConfigVideoInputComponentLumaGain                 = /* 'iclg' */ 0x69636C67,
+    bmdDeckLinkConfigVideoInputComponentChromaBlueGain           = /* 'iccb' */ 0x69636362,
+    bmdDeckLinkConfigVideoInputComponentChromaRedGain            = /* 'iccr' */ 0x69636372,
+    bmdDeckLinkConfigVideoInputCompositeLumaGain                 = /* 'iilg' */ 0x69696C67,
+    bmdDeckLinkConfigVideoInputCompositeChromaGain               = /* 'iicg' */ 0x69696367,
+    bmdDeckLinkConfigVideoInputSVideoLumaGain                    = /* 'islg' */ 0x69736C67,
+    bmdDeckLinkConfigVideoInputSVideoChromaGain                  = /* 'iscg' */ 0x69736367,
+
+    /* Keying Integers */
+
+    bmdDeckLinkConfigInternalKeyingAncillaryDataSource           = /* 'ikas' */ 0x696B6173,
+
+    /* Audio Input Flags */
+
+    bmdDeckLinkConfigMicrophonePhantomPower                      = /* 'mphp' */ 0x6D706870,
+
+    /* Audio Input Integers */
+
+    bmdDeckLinkConfigAudioInputConnection                        = /* 'aicn' */ 0x6169636E,
+
+    /* Audio Input Floats */
+
+    bmdDeckLinkConfigAnalogAudioInputScaleChannel1               = /* 'ais1' */ 0x61697331,
+    bmdDeckLinkConfigAnalogAudioInputScaleChannel2               = /* 'ais2' */ 0x61697332,
+    bmdDeckLinkConfigAnalogAudioInputScaleChannel3               = /* 'ais3' */ 0x61697333,
+    bmdDeckLinkConfigAnalogAudioInputScaleChannel4               = /* 'ais4' */ 0x61697334,
+    bmdDeckLinkConfigDigitalAudioInputScale                      = /* 'dais' */ 0x64616973,
+    bmdDeckLinkConfigMicrophoneInputGain                         = /* 'micg' */ 0x6D696367,
+
+    /* Audio Output Integers */
+
+    bmdDeckLinkConfigAudioOutputAESAnalogSwitch                  = /* 'aoaa' */ 0x616F6161,
+
+    /* Audio Output Floats */
+
+    bmdDeckLinkConfigAnalogAudioOutputScaleChannel1              = /* 'aos1' */ 0x616F7331,
+    bmdDeckLinkConfigAnalogAudioOutputScaleChannel2              = /* 'aos2' */ 0x616F7332,
+    bmdDeckLinkConfigAnalogAudioOutputScaleChannel3              = /* 'aos3' */ 0x616F7333,
+    bmdDeckLinkConfigAnalogAudioOutputScaleChannel4              = /* 'aos4' */ 0x616F7334,
+    bmdDeckLinkConfigDigitalAudioOutputScale                     = /* 'daos' */ 0x64616F73,
+    bmdDeckLinkConfigHeadphoneVolume                             = /* 'hvol' */ 0x68766F6C,
+
+    /* Device Information Strings */
+
+    bmdDeckLinkConfigDeviceInformationLabel                      = /* 'dila' */ 0x64696C61,
+    bmdDeckLinkConfigDeviceInformationSerialNumber               = /* 'disn' */ 0x6469736E,
+    bmdDeckLinkConfigDeviceInformationCompany                    = /* 'dico' */ 0x6469636F,
+    bmdDeckLinkConfigDeviceInformationPhone                      = /* 'diph' */ 0x64697068,
+    bmdDeckLinkConfigDeviceInformationEmail                      = /* 'diem' */ 0x6469656D,
+    bmdDeckLinkConfigDeviceInformationDate                       = /* 'dida' */ 0x64696461,
+
+    /* Deck Control Integers */
+
+    bmdDeckLinkConfigDeckControlConnection                       = /* 'dcco' */ 0x6463636F
+};
+
+/* Enum BMDDeckLinkEncoderConfigurationID - DeckLink Encoder Configuration ID */
+
+typedef uint32_t BMDDeckLinkEncoderConfigurationID;
+enum _BMDDeckLinkEncoderConfigurationID {
+
+    /* Video Encoder Integers */
+
+    bmdDeckLinkEncoderConfigPreferredBitDepth                    = /* 'epbr' */ 0x65706272,
+    bmdDeckLinkEncoderConfigFrameCodingMode                      = /* 'efcm' */ 0x6566636D,
+
+    /* HEVC/H.265 Encoder Integers */
+
+    bmdDeckLinkEncoderConfigH265TargetBitrate                    = /* 'htbr' */ 0x68746272,
+
+    /* DNxHR/DNxHD Compression ID */
+
+    bmdDeckLinkEncoderConfigDNxHRCompressionID                   = /* 'dcid' */ 0x64636964,
+
+    /* DNxHR/DNxHD Level */
+
+    bmdDeckLinkEncoderConfigDNxHRLevel                           = /* 'dlev' */ 0x646C6576,
+
+    /* Encoded Sample Decriptions */
+
+    bmdDeckLinkEncoderConfigMPEG4SampleDescription               = /* 'stsE' */ 0x73747345,	// Full MPEG4 sample description (aka SampleEntry of an 'stsd' atom-box). Useful for MediaFoundation, QuickTime, MKV and more
+    bmdDeckLinkEncoderConfigMPEG4CodecSpecificDesc               = /* 'esds' */ 0x65736473	// Sample description extensions only (atom stream, each with size and fourCC header). Useful for AVFoundation, VideoToolbox, MKV and more
+};
+
+#if defined(__cplusplus)
+
+// Forward Declarations
+
+class IDeckLinkConfiguration;
+class IDeckLinkEncoderConfiguration;
+
+/* Interface IDeckLinkConfiguration - DeckLink Configuration interface */
+
+class BMD_PUBLIC IDeckLinkConfiguration : public IUnknown
+{
+public:
+    virtual HRESULT SetFlag (/* in */ BMDDeckLinkConfigurationID cfgID, /* in */ bool value) = 0;
+    virtual HRESULT GetFlag (/* in */ BMDDeckLinkConfigurationID cfgID, /* out */ bool* value) = 0;
+    virtual HRESULT SetInt (/* in */ BMDDeckLinkConfigurationID cfgID, /* in */ int64_t value) = 0;
+    virtual HRESULT GetInt (/* in */ BMDDeckLinkConfigurationID cfgID, /* out */ int64_t* value) = 0;
+    virtual HRESULT SetFloat (/* in */ BMDDeckLinkConfigurationID cfgID, /* in */ double value) = 0;
+    virtual HRESULT GetFloat (/* in */ BMDDeckLinkConfigurationID cfgID, /* out */ double* value) = 0;
+    virtual HRESULT SetString (/* in */ BMDDeckLinkConfigurationID cfgID, /* in */ const char* value) = 0;
+    virtual HRESULT GetString (/* in */ BMDDeckLinkConfigurationID cfgID, /* out */ const char** value) = 0;
+    virtual HRESULT WriteConfigurationToPreferences (void) = 0;
+
+protected:
+    virtual ~IDeckLinkConfiguration () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkEncoderConfiguration - DeckLink Encoder Configuration interface. Obtained from IDeckLinkEncoderInput */
+
+class BMD_PUBLIC IDeckLinkEncoderConfiguration : public IUnknown
+{
+public:
+    virtual HRESULT SetFlag (/* in */ BMDDeckLinkEncoderConfigurationID cfgID, /* in */ bool value) = 0;
+    virtual HRESULT GetFlag (/* in */ BMDDeckLinkEncoderConfigurationID cfgID, /* out */ bool* value) = 0;
+    virtual HRESULT SetInt (/* in */ BMDDeckLinkEncoderConfigurationID cfgID, /* in */ int64_t value) = 0;
+    virtual HRESULT GetInt (/* in */ BMDDeckLinkEncoderConfigurationID cfgID, /* out */ int64_t* value) = 0;
+    virtual HRESULT SetFloat (/* in */ BMDDeckLinkEncoderConfigurationID cfgID, /* in */ double value) = 0;
+    virtual HRESULT GetFloat (/* in */ BMDDeckLinkEncoderConfigurationID cfgID, /* out */ double* value) = 0;
+    virtual HRESULT SetString (/* in */ BMDDeckLinkEncoderConfigurationID cfgID, /* in */ const char* value) = 0;
+    virtual HRESULT GetString (/* in */ BMDDeckLinkEncoderConfigurationID cfgID, /* out */ const char** value) = 0;
+    virtual HRESULT GetBytes (/* in */ BMDDeckLinkEncoderConfigurationID cfgID, /* out */ void* buffer /* optional */, /* in, out */ uint32_t* bufferSize) = 0;
+
+protected:
+    virtual ~IDeckLinkEncoderConfiguration () {} // call Release method to drop reference count
+};
+
+/* Functions */
+
+extern "C" {
+
+
+}
+
+
+
+#endif /* defined(__cplusplus) */
+#endif /* defined(BMD_DECKLINKAPICONFIGURATION_H) */
diff --git a/DeckLinkSDK/Linux/include/DeckLinkAPIConfiguration_v10_11.h b/DeckLinkSDK/Linux/include/DeckLinkAPIConfiguration_v10_11.h
new file mode 100644
index 0000000000..9fe70ffca4
--- /dev/null
+++ b/DeckLinkSDK/Linux/include/DeckLinkAPIConfiguration_v10_11.h
@@ -0,0 +1,84 @@
+/* -LICENSE-START-
+** Copyright (c) 2017 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPICONFIGURATION_v10_11_H
+#define BMD_DECKLINKAPICONFIGURATION_v10_11_H
+
+#include "DeckLinkAPIConfiguration.h"
+
+// Interface ID Declarations
+
+BMD_CONST REFIID IID_IDeckLinkConfiguration_v10_11                       = /* EF90380B-4AE5-4346-9077-E288E149F129 */ {0xEF,0x90,0x38,0x0B,0x4A,0xE5,0x43,0x46,0x90,0x77,0xE2,0x88,0xE1,0x49,0xF1,0x29};
+
+/* Enum BMDDeckLinkConfigurationID_v10_11 - DeckLink Configuration ID */
+
+typedef uint32_t BMDDeckLinkConfigurationID_v10_11;
+enum _BMDDeckLinkConfigurationID_v10_11 {
+
+    /* Video Input/Output Integers */
+
+    bmdDeckLinkConfigDuplexMode_v10_11                              = /* 'dupx' */ 0x64757078,
+};
+
+// Forward Declarations
+
+class IDeckLinkConfiguration_v10_11;
+
+/* Interface IDeckLinkConfiguration_v10_11 - DeckLink Configuration interface */
+
+class BMD_PUBLIC IDeckLinkConfiguration_v10_11 : public IUnknown
+{
+public:
+    virtual HRESULT SetFlag (/* in */ BMDDeckLinkConfigurationID cfgID, /* in */ bool value) = 0;
+    virtual HRESULT GetFlag (/* in */ BMDDeckLinkConfigurationID cfgID, /* out */ bool *value) = 0;
+    virtual HRESULT SetInt (/* in */ BMDDeckLinkConfigurationID cfgID, /* in */ int64_t value) = 0;
+    virtual HRESULT GetInt (/* in */ BMDDeckLinkConfigurationID cfgID, /* out */ int64_t *value) = 0;
+    virtual HRESULT SetFloat (/* in */ BMDDeckLinkConfigurationID cfgID, /* in */ double value) = 0;
+    virtual HRESULT GetFloat (/* in */ BMDDeckLinkConfigurationID cfgID, /* out */ double *value) = 0;
+    virtual HRESULT SetString (/* in */ BMDDeckLinkConfigurationID cfgID, /* in */ const char *value) = 0;
+    virtual HRESULT GetString (/* in */ BMDDeckLinkConfigurationID cfgID, /* out */ const char **value) = 0;
+    virtual HRESULT WriteConfigurationToPreferences (void) = 0;
+
+protected:
+    virtual ~IDeckLinkConfiguration_v10_11 () {} // call Release method to drop reference count
+};
+
+
+#endif /* defined(BMD_DECKLINKAPICONFIGURATION_v10_11_H) */
diff --git a/DeckLinkSDK/Linux/include/DeckLinkAPIConfiguration_v10_2.h b/DeckLinkSDK/Linux/include/DeckLinkAPIConfiguration_v10_2.h
new file mode 100644
index 0000000000..a75821923b
--- /dev/null
+++ b/DeckLinkSDK/Linux/include/DeckLinkAPIConfiguration_v10_2.h
@@ -0,0 +1,73 @@
+/* -LICENSE-START-
+** Copyright (c) 2014 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPICONFIGURATION_v10_2_H
+#define BMD_DECKLINKAPICONFIGURATION_v10_2_H
+
+#include "DeckLinkAPIConfiguration.h"
+
+// Interface ID Declarations
+
+BMD_CONST REFIID IID_IDeckLinkConfiguration_v10_2                = /* C679A35B-610C-4D09-B748-1D0478100FC0 */ {0xC6,0x79,0xA3,0x5B,0x61,0x0C,0x4D,0x09,0xB7,0x48,0x1D,0x04,0x78,0x10,0x0F,0xC0};
+
+// Forward Declarations
+
+class IDeckLinkConfiguration_v10_2;
+
+/* Interface IDeckLinkConfiguration_v10_2 - DeckLink Configuration interface */
+
+class BMD_PUBLIC IDeckLinkConfiguration_v10_2 : public IUnknown
+{
+public:
+    virtual HRESULT SetFlag (/* in */ BMDDeckLinkConfigurationID cfgID, /* in */ bool value) = 0;
+    virtual HRESULT GetFlag (/* in */ BMDDeckLinkConfigurationID cfgID, /* out */ bool *value) = 0;
+    virtual HRESULT SetInt (/* in */ BMDDeckLinkConfigurationID cfgID, /* in */ int64_t value) = 0;
+    virtual HRESULT GetInt (/* in */ BMDDeckLinkConfigurationID cfgID, /* out */ int64_t *value) = 0;
+    virtual HRESULT SetFloat (/* in */ BMDDeckLinkConfigurationID cfgID, /* in */ double value) = 0;
+    virtual HRESULT GetFloat (/* in */ BMDDeckLinkConfigurationID cfgID, /* out */ double *value) = 0;
+    virtual HRESULT SetString (/* in */ BMDDeckLinkConfigurationID cfgID, /* in */ const char *value) = 0;
+    virtual HRESULT GetString (/* in */ BMDDeckLinkConfigurationID cfgID, /* out */ const char **value) = 0;
+    virtual HRESULT WriteConfigurationToPreferences (void) = 0;
+
+protected:
+    virtual ~IDeckLinkConfiguration_v10_2 () {} // call Release method to drop reference count
+};
+
+#endif /* defined(BMD_DECKLINKAPICONFIGURATION_v10_2_H) */
diff --git a/DeckLinkSDK/Linux/include/DeckLinkAPIConfiguration_v10_4.h b/DeckLinkSDK/Linux/include/DeckLinkAPIConfiguration_v10_4.h
new file mode 100644
index 0000000000..eabb917cc0
--- /dev/null
+++ b/DeckLinkSDK/Linux/include/DeckLinkAPIConfiguration_v10_4.h
@@ -0,0 +1,76 @@
+/* -LICENSE-START-
+** Copyright (c) 2015 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPICONFIGURATION_v10_4_H
+#define BMD_DECKLINKAPICONFIGURATION_v10_4_H
+
+#include "DeckLinkAPIConfiguration.h"
+
+// Interface ID Declarations
+
+BMD_CONST REFIID IID_IDeckLinkConfiguration_v10_4                       = /* 1E69FCF6-4203-4936-8076-2A9F4CFD50CB */ {0x1E,0x69,0xFC,0xF6,0x42,0x03,0x49,0x36,0x80,0x76,0x2A,0x9F,0x4C,0xFD,0x50,0xCB};
+
+
+//
+// Forward Declarations
+
+class IDeckLinkConfiguration_v10_4;
+
+/* Interface IDeckLinkConfiguration_v10_4 - DeckLink Configuration interface */
+
+class BMD_PUBLIC IDeckLinkConfiguration_v10_4 : public IUnknown
+{
+public:
+    virtual HRESULT SetFlag (/* in */ BMDDeckLinkConfigurationID cfgID, /* in */ bool value) = 0;
+    virtual HRESULT GetFlag (/* in */ BMDDeckLinkConfigurationID cfgID, /* out */ bool *value) = 0;
+    virtual HRESULT SetInt (/* in */ BMDDeckLinkConfigurationID cfgID, /* in */ int64_t value) = 0;
+    virtual HRESULT GetInt (/* in */ BMDDeckLinkConfigurationID cfgID, /* out */ int64_t *value) = 0;
+    virtual HRESULT SetFloat (/* in */ BMDDeckLinkConfigurationID cfgID, /* in */ double value) = 0;
+    virtual HRESULT GetFloat (/* in */ BMDDeckLinkConfigurationID cfgID, /* out */ double *value) = 0;
+    virtual HRESULT SetString (/* in */ BMDDeckLinkConfigurationID cfgID, /* in */ const char *value) = 0;
+    virtual HRESULT GetString (/* in */ BMDDeckLinkConfigurationID cfgID, /* out */ const char **value) = 0;
+    virtual HRESULT WriteConfigurationToPreferences (void) = 0;
+
+protected:
+    virtual ~IDeckLinkConfiguration_v10_4 () {} // call Release method to drop reference count
+};
+
+
+#endif /* defined(BMD_DECKLINKAPICONFIGURATION_v10_4_H) */
diff --git a/DeckLinkSDK/Linux/include/DeckLinkAPIConfiguration_v10_5.h b/DeckLinkSDK/Linux/include/DeckLinkAPIConfiguration_v10_5.h
new file mode 100644
index 0000000000..fd8ef772e1
--- /dev/null
+++ b/DeckLinkSDK/Linux/include/DeckLinkAPIConfiguration_v10_5.h
@@ -0,0 +1,73 @@
+/* -LICENSE-START-
+** Copyright (c) 2015 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPICONFIGURATION_v10_5_H
+#define BMD_DECKLINKAPICONFIGURATION_v10_5_H
+
+#include "DeckLinkAPIConfiguration.h"
+
+// Interface ID Declarations
+
+BMD_CONST REFIID IID_IDeckLinkEncoderConfiguration_v10_5          = /* 67455668-0848-45DF-8D8E-350A77C9A028 */ {0x67,0x45,0x56,0x68,0x08,0x48,0x45,0xDF,0x8D,0x8E,0x35,0x0A,0x77,0xC9,0xA0,0x28};
+
+// Forward Declarations
+
+class IDeckLinkEncoderConfiguration_v10_5;
+
+/* Interface IDeckLinkEncoderConfiguration_v10_5 - DeckLink Encoder Configuration interface. Obtained from IDeckLinkEncoderInput */
+
+class BMD_PUBLIC IDeckLinkEncoderConfiguration_v10_5 : public IUnknown
+{
+public:
+    virtual HRESULT SetFlag (/* in */ BMDDeckLinkEncoderConfigurationID cfgID, /* in */ bool value) = 0;
+    virtual HRESULT GetFlag (/* in */ BMDDeckLinkEncoderConfigurationID cfgID, /* out */ bool *value) = 0;
+    virtual HRESULT SetInt (/* in */ BMDDeckLinkEncoderConfigurationID cfgID, /* in */ int64_t value) = 0;
+    virtual HRESULT GetInt (/* in */ BMDDeckLinkEncoderConfigurationID cfgID, /* out */ int64_t *value) = 0;
+    virtual HRESULT SetFloat (/* in */ BMDDeckLinkEncoderConfigurationID cfgID, /* in */ double value) = 0;
+    virtual HRESULT GetFloat (/* in */ BMDDeckLinkEncoderConfigurationID cfgID, /* out */ double *value) = 0;
+    virtual HRESULT SetString (/* in */ BMDDeckLinkEncoderConfigurationID cfgID, /* in */ const char *value) = 0;
+    virtual HRESULT GetString (/* in */ BMDDeckLinkEncoderConfigurationID cfgID, /* out */ const char **value) = 0;
+    virtual HRESULT GetDecoderConfigurationInfo (/* out */ void *buffer, /* in */ long bufferSize, /* out */ long *returnedSize) = 0;
+
+protected:
+    virtual ~IDeckLinkEncoderConfiguration_v10_5 () {} // call Release method to drop reference count
+};
+
+#endif /* defined(BMD_DECKLINKAPICONFIGURATION_v10_5_H) */
diff --git a/DeckLinkSDK/Linux/include/DeckLinkAPIConfiguration_v10_9.h b/DeckLinkSDK/Linux/include/DeckLinkAPIConfiguration_v10_9.h
new file mode 100644
index 0000000000..84ad1d681b
--- /dev/null
+++ b/DeckLinkSDK/Linux/include/DeckLinkAPIConfiguration_v10_9.h
@@ -0,0 +1,75 @@
+/* -LICENSE-START-
+** Copyright (c) 2017 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPICONFIGURATION_v10_9_H
+#define BMD_DECKLINKAPICONFIGURATION_v10_9_H
+
+#include "DeckLinkAPIConfiguration.h"
+
+// Interface ID Declarations
+
+BMD_CONST REFIID IID_IDeckLinkConfiguration_v10_9                       = /* CB71734A-FE37-4E8D-8E13-802133A1C3F2 */ {0xCB,0x71,0x73,0x4A,0xFE,0x37,0x4E,0x8D,0x8E,0x13,0x80,0x21,0x33,0xA1,0xC3,0xF2};
+
+//
+// Forward Declarations
+
+class IDeckLinkConfiguration_v10_9;
+
+/* Interface IDeckLinkConfiguration_v10_9 - DeckLink Configuration interface */
+
+class BMD_PUBLIC IDeckLinkConfiguration_v10_9 : public IUnknown
+{
+public:
+    virtual HRESULT SetFlag (/* in */ BMDDeckLinkConfigurationID cfgID, /* in */ bool value) = 0;
+    virtual HRESULT GetFlag (/* in */ BMDDeckLinkConfigurationID cfgID, /* out */ bool *value) = 0;
+    virtual HRESULT SetInt (/* in */ BMDDeckLinkConfigurationID cfgID, /* in */ int64_t value) = 0;
+    virtual HRESULT GetInt (/* in */ BMDDeckLinkConfigurationID cfgID, /* out */ int64_t *value) = 0;
+    virtual HRESULT SetFloat (/* in */ BMDDeckLinkConfigurationID cfgID, /* in */ double value) = 0;
+    virtual HRESULT GetFloat (/* in */ BMDDeckLinkConfigurationID cfgID, /* out */ double *value) = 0;
+    virtual HRESULT SetString (/* in */ BMDDeckLinkConfigurationID cfgID, /* in */ const char *value) = 0;
+    virtual HRESULT GetString (/* in */ BMDDeckLinkConfigurationID cfgID, /* out */ const char **value) = 0;
+    virtual HRESULT WriteConfigurationToPreferences (void) = 0;
+
+protected:
+    virtual ~IDeckLinkConfiguration_v10_9 () {} // call Release method to drop reference count
+};
+
+
+#endif /* defined(BMD_DECKLINKAPICONFIGURATION_v10_9_H) */
diff --git a/DeckLinkSDK/Linux/include/DeckLinkAPIDeckControl.h b/DeckLinkSDK/Linux/include/DeckLinkAPIDeckControl.h
new file mode 100644
index 0000000000..7ae9bd9798
--- /dev/null
+++ b/DeckLinkSDK/Linux/include/DeckLinkAPIDeckControl.h
@@ -0,0 +1,223 @@
+/* -LICENSE-START-
+** Copyright (c) 2022 Blackmagic Design
+**
+** Permission is hereby granted, free of charge, to any person or organization
+** obtaining a copy of the software and accompanying documentation covered by
+** this license (the "Software") to use, reproduce, display, distribute,
+** execute, and transmit the Software, and to prepare derivative works of the
+** Software, and to permit third-parties to whom the Software is furnished to
+** do so, all subject to the following:
+**
+** The copyright notices in the Software and this entire statement, including
+** the above license grant, this restriction and the following disclaimer,
+** must be included in all copies of the Software, in whole or in part, and
+** all derivative works of the Software, unless such copies or derivative
+** works are solely in the form of machine-executable object code generated by
+** a source language processor.
+**
+** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+** DEALINGS IN THE SOFTWARE.
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPIDECKCONTROL_H
+#define BMD_DECKLINKAPIDECKCONTROL_H
+
+
+#ifndef BMD_CONST
+    #if defined(_MSC_VER)
+        #define BMD_CONST __declspec(selectany) static const
+    #else
+        #define BMD_CONST static const
+    #endif
+#endif
+
+#ifndef BMD_PUBLIC
+	#define BMD_PUBLIC
+#endif
+
+// Type Declarations
+
+
+// Interface ID Declarations
+
+BMD_CONST REFIID IID_IDeckLinkDeckControlStatusCallback           = /* 53436FFB-B434-4906-BADC-AE3060FFE8EF */ { 0x53,0x43,0x6F,0xFB,0xB4,0x34,0x49,0x06,0xBA,0xDC,0xAE,0x30,0x60,0xFF,0xE8,0xEF };
+BMD_CONST REFIID IID_IDeckLinkDeckControl                         = /* 8E1C3ACE-19C7-4E00-8B92-D80431D958BE */ { 0x8E,0x1C,0x3A,0xCE,0x19,0xC7,0x4E,0x00,0x8B,0x92,0xD8,0x04,0x31,0xD9,0x58,0xBE };
+
+/* Enum BMDDeckControlMode - DeckControl mode */
+
+typedef uint32_t BMDDeckControlMode;
+enum _BMDDeckControlMode {
+    bmdDeckControlNotOpened                                      = /* 'ntop' */ 0x6E746F70,
+    bmdDeckControlVTRControlMode                                 = /* 'vtrc' */ 0x76747263,
+    bmdDeckControlExportMode                                     = /* 'expm' */ 0x6578706D,
+    bmdDeckControlCaptureMode                                    = /* 'capm' */ 0x6361706D
+};
+
+/* Enum BMDDeckControlEvent - DeckControl event */
+
+typedef uint32_t BMDDeckControlEvent;
+enum _BMDDeckControlEvent {
+    bmdDeckControlAbortedEvent                                   = /* 'abte' */ 0x61627465,	// This event is triggered when a capture or edit-to-tape operation is aborted.
+
+    /* Export-To-Tape events */
+
+    bmdDeckControlPrepareForExportEvent                          = /* 'pfee' */ 0x70666565,	// This event is triggered a few frames before reaching the in-point. IDeckLinkInput::StartScheduledPlayback should be called at this point.
+    bmdDeckControlExportCompleteEvent                            = /* 'exce' */ 0x65786365,	// This event is triggered a few frames after reaching the out-point. At this point, it is safe to stop playback. Upon reception of this event the deck's control mode is set back to bmdDeckControlVTRControlMode.
+
+    /* Capture events */
+
+    bmdDeckControlPrepareForCaptureEvent                         = /* 'pfce' */ 0x70666365,	// This event is triggered a few frames before reaching the in-point. The serial timecode attached to IDeckLinkVideoInputFrames is now valid.
+    bmdDeckControlCaptureCompleteEvent                           = /* 'ccev' */ 0x63636576	// This event is triggered a few frames after reaching the out-point. Upon reception of this event the deck's control mode is set back to bmdDeckControlVTRControlMode.
+};
+
+/* Enum BMDDeckControlVTRControlState - VTR Control state */
+
+typedef uint32_t BMDDeckControlVTRControlState;
+enum _BMDDeckControlVTRControlState {
+    bmdDeckControlNotInVTRControlMode                            = /* 'nvcm' */ 0x6E76636D,
+    bmdDeckControlVTRControlPlaying                              = /* 'vtrp' */ 0x76747270,
+    bmdDeckControlVTRControlRecording                            = /* 'vtrr' */ 0x76747272,
+    bmdDeckControlVTRControlStill                                = /* 'vtra' */ 0x76747261,
+    bmdDeckControlVTRControlShuttleForward                       = /* 'vtsf' */ 0x76747366,
+    bmdDeckControlVTRControlShuttleReverse                       = /* 'vtsr' */ 0x76747372,
+    bmdDeckControlVTRControlJogForward                           = /* 'vtjf' */ 0x76746A66,
+    bmdDeckControlVTRControlJogReverse                           = /* 'vtjr' */ 0x76746A72,
+    bmdDeckControlVTRControlStopped                              = /* 'vtro' */ 0x7674726F
+};
+
+/* Enum BMDDeckControlStatusFlags - Deck Control status flags */
+
+typedef uint32_t BMDDeckControlStatusFlags;
+enum _BMDDeckControlStatusFlags {
+    bmdDeckControlStatusDeckConnected                            = 1 << 0,
+    bmdDeckControlStatusRemoteMode                               = 1 << 1,
+    bmdDeckControlStatusRecordInhibited                          = 1 << 2,
+    bmdDeckControlStatusCassetteOut                              = 1 << 3
+};
+
+/* Enum BMDDeckControlExportModeOpsFlags - Export mode flags */
+
+typedef uint32_t BMDDeckControlExportModeOpsFlags;
+enum _BMDDeckControlExportModeOpsFlags {
+    bmdDeckControlExportModeInsertVideo                          = 1 << 0,
+    bmdDeckControlExportModeInsertAudio1                         = 1 << 1,
+    bmdDeckControlExportModeInsertAudio2                         = 1 << 2,
+    bmdDeckControlExportModeInsertAudio3                         = 1 << 3,
+    bmdDeckControlExportModeInsertAudio4                         = 1 << 4,
+    bmdDeckControlExportModeInsertAudio5                         = 1 << 5,
+    bmdDeckControlExportModeInsertAudio6                         = 1 << 6,
+    bmdDeckControlExportModeInsertAudio7                         = 1 << 7,
+    bmdDeckControlExportModeInsertAudio8                         = 1 << 8,
+    bmdDeckControlExportModeInsertAudio9                         = 1 << 9,
+    bmdDeckControlExportModeInsertAudio10                        = 1 << 10,
+    bmdDeckControlExportModeInsertAudio11                        = 1 << 11,
+    bmdDeckControlExportModeInsertAudio12                        = 1 << 12,
+    bmdDeckControlExportModeInsertTimeCode                       = 1 << 13,
+    bmdDeckControlExportModeInsertAssemble                       = 1 << 14,
+    bmdDeckControlExportModeInsertPreview                        = 1 << 15,
+    bmdDeckControlUseManualExport                                = 1 << 16
+};
+
+/* Enum BMDDeckControlError - Deck Control error */
+
+typedef uint32_t BMDDeckControlError;
+enum _BMDDeckControlError {
+    bmdDeckControlNoError                                        = /* 'noer' */ 0x6E6F6572,
+    bmdDeckControlModeError                                      = /* 'moer' */ 0x6D6F6572,
+    bmdDeckControlMissedInPointError                             = /* 'mier' */ 0x6D696572,
+    bmdDeckControlDeckTimeoutError                               = /* 'dter' */ 0x64746572,
+    bmdDeckControlCommandFailedError                             = /* 'cfer' */ 0x63666572,
+    bmdDeckControlDeviceAlreadyOpenedError                       = /* 'dalo' */ 0x64616C6F,
+    bmdDeckControlFailedToOpenDeviceError                        = /* 'fder' */ 0x66646572,
+    bmdDeckControlInLocalModeError                               = /* 'lmer' */ 0x6C6D6572,
+    bmdDeckControlEndOfTapeError                                 = /* 'eter' */ 0x65746572,
+    bmdDeckControlUserAbortError                                 = /* 'uaer' */ 0x75616572,
+    bmdDeckControlNoTapeInDeckError                              = /* 'nter' */ 0x6E746572,
+    bmdDeckControlNoVideoFromCardError                           = /* 'nvfc' */ 0x6E766663,
+    bmdDeckControlNoCommunicationError                           = /* 'ncom' */ 0x6E636F6D,
+    bmdDeckControlBufferTooSmallError                            = /* 'btsm' */ 0x6274736D,
+    bmdDeckControlBadChecksumError                               = /* 'chks' */ 0x63686B73,
+    bmdDeckControlUnknownError                                   = /* 'uner' */ 0x756E6572
+};
+
+#if defined(__cplusplus)
+
+// Forward Declarations
+
+class IDeckLinkDeckControlStatusCallback;
+class IDeckLinkDeckControl;
+
+/* Interface IDeckLinkDeckControlStatusCallback - Deck control state change callback. */
+
+class BMD_PUBLIC IDeckLinkDeckControlStatusCallback : public IUnknown
+{
+public:
+    virtual HRESULT TimecodeUpdate (/* in */ BMDTimecodeBCD currentTimecode) = 0;
+    virtual HRESULT VTRControlStateChanged (/* in */ BMDDeckControlVTRControlState newState, /* in */ BMDDeckControlError error) = 0;
+    virtual HRESULT DeckControlEventReceived (/* in */ BMDDeckControlEvent event, /* in */ BMDDeckControlError error) = 0;
+    virtual HRESULT DeckControlStatusChanged (/* in */ BMDDeckControlStatusFlags flags, /* in */ uint32_t mask) = 0;
+
+protected:
+    virtual ~IDeckLinkDeckControlStatusCallback () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkDeckControl - Deck Control main interface */
+
+class BMD_PUBLIC IDeckLinkDeckControl : public IUnknown
+{
+public:
+    virtual HRESULT Open (/* in */ BMDTimeScale timeScale, /* in */ BMDTimeValue timeValue, /* in */ bool timecodeIsDropFrame, /* out */ BMDDeckControlError* error) = 0;
+    virtual HRESULT Close (/* in */ bool standbyOn) = 0;
+    virtual HRESULT GetCurrentState (/* out */ BMDDeckControlMode* mode, /* out */ BMDDeckControlVTRControlState* vtrControlState, /* out */ BMDDeckControlStatusFlags* flags) = 0;
+    virtual HRESULT SetStandby (/* in */ bool standbyOn) = 0;
+    virtual HRESULT SendCommand (/* in */ uint8_t* inBuffer, /* in */ uint32_t inBufferSize, /* out */ uint8_t* outBuffer, /* out */ uint32_t* outDataSize, /* in */ uint32_t outBufferSize, /* out */ BMDDeckControlError* error) = 0;
+    virtual HRESULT Play (/* out */ BMDDeckControlError* error) = 0;
+    virtual HRESULT Stop (/* out */ BMDDeckControlError* error) = 0;
+    virtual HRESULT TogglePlayStop (/* out */ BMDDeckControlError* error) = 0;
+    virtual HRESULT Eject (/* out */ BMDDeckControlError* error) = 0;
+    virtual HRESULT GoToTimecode (/* in */ BMDTimecodeBCD timecode, /* out */ BMDDeckControlError* error) = 0;
+    virtual HRESULT FastForward (/* in */ bool viewTape, /* out */ BMDDeckControlError* error) = 0;
+    virtual HRESULT Rewind (/* in */ bool viewTape, /* out */ BMDDeckControlError* error) = 0;
+    virtual HRESULT StepForward (/* out */ BMDDeckControlError* error) = 0;
+    virtual HRESULT StepBack (/* out */ BMDDeckControlError* error) = 0;
+    virtual HRESULT Jog (/* in */ double rate, /* out */ BMDDeckControlError* error) = 0;
+    virtual HRESULT Shuttle (/* in */ double rate, /* out */ BMDDeckControlError* error) = 0;
+    virtual HRESULT GetTimecodeString (/* out */ const char** currentTimeCode, /* out */ BMDDeckControlError* error) = 0;
+    virtual HRESULT GetTimecode (/* out */ IDeckLinkTimecode** currentTimecode, /* out */ BMDDeckControlError* error) = 0;
+    virtual HRESULT GetTimecodeBCD (/* out */ BMDTimecodeBCD* currentTimecode, /* out */ BMDDeckControlError* error) = 0;
+    virtual HRESULT SetPreroll (/* in */ uint32_t prerollSeconds) = 0;
+    virtual HRESULT GetPreroll (/* out */ uint32_t* prerollSeconds) = 0;
+    virtual HRESULT SetExportOffset (/* in */ int32_t exportOffsetFields) = 0;
+    virtual HRESULT GetExportOffset (/* out */ int32_t* exportOffsetFields) = 0;
+    virtual HRESULT GetManualExportOffset (/* out */ int32_t* deckManualExportOffsetFields) = 0;
+    virtual HRESULT SetCaptureOffset (/* in */ int32_t captureOffsetFields) = 0;
+    virtual HRESULT GetCaptureOffset (/* out */ int32_t* captureOffsetFields) = 0;
+    virtual HRESULT StartExport (/* in */ BMDTimecodeBCD inTimecode, /* in */ BMDTimecodeBCD outTimecode, /* in */ BMDDeckControlExportModeOpsFlags exportModeOps, /* out */ BMDDeckControlError* error) = 0;
+    virtual HRESULT StartCapture (/* in */ bool useVITC, /* in */ BMDTimecodeBCD inTimecode, /* in */ BMDTimecodeBCD outTimecode, /* out */ BMDDeckControlError* error) = 0;
+    virtual HRESULT GetDeviceID (/* out */ uint16_t* deviceId, /* out */ BMDDeckControlError* error) = 0;
+    virtual HRESULT Abort (void) = 0;
+    virtual HRESULT CrashRecordStart (/* out */ BMDDeckControlError* error) = 0;
+    virtual HRESULT CrashRecordStop (/* out */ BMDDeckControlError* error) = 0;
+    virtual HRESULT SetCallback (/* in */ IDeckLinkDeckControlStatusCallback* callback) = 0;
+
+protected:
+    virtual ~IDeckLinkDeckControl () {} // call Release method to drop reference count
+};
+
+/* Functions */
+
+extern "C" {
+
+
+}
+
+
+
+#endif /* defined(__cplusplus) */
+#endif /* defined(BMD_DECKLINKAPIDECKCONTROL_H) */
diff --git a/DeckLinkSDK/Linux/include/DeckLinkAPIDiscovery.h b/DeckLinkSDK/Linux/include/DeckLinkAPIDiscovery.h
new file mode 100644
index 0000000000..02bbca4ea4
--- /dev/null
+++ b/DeckLinkSDK/Linux/include/DeckLinkAPIDiscovery.h
@@ -0,0 +1,79 @@
+/* -LICENSE-START-
+** Copyright (c) 2022 Blackmagic Design
+**
+** Permission is hereby granted, free of charge, to any person or organization
+** obtaining a copy of the software and accompanying documentation covered by
+** this license (the "Software") to use, reproduce, display, distribute,
+** execute, and transmit the Software, and to prepare derivative works of the
+** Software, and to permit third-parties to whom the Software is furnished to
+** do so, all subject to the following:
+**
+** The copyright notices in the Software and this entire statement, including
+** the above license grant, this restriction and the following disclaimer,
+** must be included in all copies of the Software, in whole or in part, and
+** all derivative works of the Software, unless such copies or derivative
+** works are solely in the form of machine-executable object code generated by
+** a source language processor.
+**
+** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+** DEALINGS IN THE SOFTWARE.
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPIDISCOVERY_H
+#define BMD_DECKLINKAPIDISCOVERY_H
+
+
+#ifndef BMD_CONST
+    #if defined(_MSC_VER)
+        #define BMD_CONST __declspec(selectany) static const
+    #else
+        #define BMD_CONST static const
+    #endif
+#endif
+
+#ifndef BMD_PUBLIC
+	#define BMD_PUBLIC
+#endif
+
+// Type Declarations
+
+
+// Interface ID Declarations
+
+BMD_CONST REFIID IID_IDeckLink                                    = /* C418FBDD-0587-48ED-8FE5-640F0A14AF91 */ { 0xC4,0x18,0xFB,0xDD,0x05,0x87,0x48,0xED,0x8F,0xE5,0x64,0x0F,0x0A,0x14,0xAF,0x91 };
+
+#if defined(__cplusplus)
+
+// Forward Declarations
+
+class IDeckLink;
+
+/* Interface IDeckLink - Represents a DeckLink device */
+
+class BMD_PUBLIC IDeckLink : public IUnknown
+{
+public:
+    virtual HRESULT GetModelName (/* out */ const char** modelName) = 0;
+    virtual HRESULT GetDisplayName (/* out */ const char** displayName) = 0;
+
+protected:
+    virtual ~IDeckLink () {} // call Release method to drop reference count
+};
+
+/* Functions */
+
+extern "C" {
+
+
+}
+
+
+
+#endif /* defined(__cplusplus) */
+#endif /* defined(BMD_DECKLINKAPIDISCOVERY_H) */
diff --git a/DeckLinkSDK/Linux/include/DeckLinkAPIDispatch.cpp b/DeckLinkSDK/Linux/include/DeckLinkAPIDispatch.cpp
new file mode 100644
index 0000000000..fd57c2eeb2
--- /dev/null
+++ b/DeckLinkSDK/Linux/include/DeckLinkAPIDispatch.cpp
@@ -0,0 +1,188 @@
+/* -LICENSE-START-
+** Copyright (c) 2009 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+**/
+
+#include <stdio.h>
+#include <pthread.h>
+#include <dlfcn.h>
+
+#include "DeckLinkAPI.h"
+
+#define kDeckLinkAPI_Name "libDeckLinkAPI.so"
+#define KDeckLinkPreviewAPI_Name "libDeckLinkPreviewAPI.so"
+
+typedef IDeckLinkIterator* (*CreateIteratorFunc)(void);
+typedef IDeckLinkAPIInformation* (*CreateAPIInformationFunc)(void);
+typedef IDeckLinkGLScreenPreviewHelper* (*CreateOpenGLScreenPreviewHelperFunc)(void);
+typedef IDeckLinkGLScreenPreviewHelper* (*CreateOpenGL3ScreenPreviewHelperFunc)(void);
+typedef IDeckLinkVideoConversion* (*CreateVideoConversionInstanceFunc)(void);
+typedef IDeckLinkDiscovery* (*CreateDeckLinkDiscoveryInstanceFunc)(void);
+typedef IDeckLinkVideoFrameAncillaryPackets* (*CreateVideoFrameAncillaryPacketsInstanceFunc)(void);
+
+static pthread_once_t					gDeckLinkOnceControl = PTHREAD_ONCE_INIT;
+static pthread_once_t					gPreviewOnceControl = PTHREAD_ONCE_INIT;
+
+static bool								gLoadedDeckLinkAPI = false;
+
+static CreateIteratorFunc					gCreateIteratorFunc = NULL;
+static CreateAPIInformationFunc				gCreateAPIInformationFunc = NULL;
+static CreateOpenGLScreenPreviewHelperFunc	gCreateOpenGLPreviewFunc = NULL;
+static CreateOpenGL3ScreenPreviewHelperFunc	gCreateOpenGL3PreviewFunc = NULL;
+static CreateVideoConversionInstanceFunc	gCreateVideoConversionFunc	= NULL;
+static CreateDeckLinkDiscoveryInstanceFunc	gCreateDeckLinkDiscoveryFunc = NULL;
+static CreateVideoFrameAncillaryPacketsInstanceFunc	gCreateVideoFrameAncillaryPacketsFunc = NULL;
+
+static void	InitDeckLinkAPI (void)
+{
+	void *libraryHandle;
+	
+	libraryHandle = dlopen(kDeckLinkAPI_Name, RTLD_NOW|RTLD_GLOBAL);
+	if (!libraryHandle)
+	{
+		fprintf(stderr, "%s\n", dlerror());
+		return;
+	}
+	
+	gLoadedDeckLinkAPI = true;
+	
+	gCreateIteratorFunc = (CreateIteratorFunc)dlsym(libraryHandle, "CreateDeckLinkIteratorInstance_0004");
+	if (!gCreateIteratorFunc)
+		fprintf(stderr, "%s\n", dlerror());
+	gCreateAPIInformationFunc = (CreateAPIInformationFunc)dlsym(libraryHandle, "CreateDeckLinkAPIInformationInstance_0001");
+	if (!gCreateAPIInformationFunc)
+		fprintf(stderr, "%s\n", dlerror());
+	gCreateVideoConversionFunc = (CreateVideoConversionInstanceFunc)dlsym(libraryHandle, "CreateVideoConversionInstance_0001");
+	if (!gCreateVideoConversionFunc)
+		fprintf(stderr, "%s\n", dlerror());
+	gCreateDeckLinkDiscoveryFunc = (CreateDeckLinkDiscoveryInstanceFunc)dlsym(libraryHandle, "CreateDeckLinkDiscoveryInstance_0003");
+	if (!gCreateDeckLinkDiscoveryFunc)
+		fprintf(stderr, "%s\n", dlerror());
+	gCreateVideoFrameAncillaryPacketsFunc = (CreateVideoFrameAncillaryPacketsInstanceFunc)dlsym(libraryHandle, "CreateVideoFrameAncillaryPacketsInstance_0001");
+	if (!gCreateVideoFrameAncillaryPacketsFunc)
+		fprintf(stderr, "%s\n", dlerror());
+}
+
+static void	InitDeckLinkPreviewAPI (void)
+{
+	void *libraryHandle;
+	
+	libraryHandle = dlopen(KDeckLinkPreviewAPI_Name, RTLD_NOW|RTLD_GLOBAL);
+	if (!libraryHandle)
+	{
+		fprintf(stderr, "%s\n", dlerror());
+		return;
+	}
+	gCreateOpenGLPreviewFunc = (CreateOpenGLScreenPreviewHelperFunc)dlsym(libraryHandle, "CreateOpenGLScreenPreviewHelper_0001");
+	if (!gCreateOpenGLPreviewFunc)
+		fprintf(stderr, "%s\n", dlerror());
+	gCreateOpenGL3PreviewFunc = (CreateOpenGL3ScreenPreviewHelperFunc)dlsym(libraryHandle, "CreateOpenGL3ScreenPreviewHelper_0001");
+	if (!gCreateOpenGL3PreviewFunc)
+		fprintf(stderr, "%s\n", dlerror());
+}
+
+bool		IsDeckLinkAPIPresent (void)
+{
+	// If the DeckLink API dynamic library was successfully loaded, return this knowledge to the caller
+	return gLoadedDeckLinkAPI;
+}
+
+IDeckLinkIterator*		CreateDeckLinkIteratorInstance (void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+	
+	if (gCreateIteratorFunc == NULL)
+		return NULL;
+	return gCreateIteratorFunc();
+}
+
+IDeckLinkAPIInformation*	CreateDeckLinkAPIInformationInstance (void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+	
+	if (gCreateAPIInformationFunc == NULL)
+		return NULL;
+	return gCreateAPIInformationFunc();
+}
+
+IDeckLinkGLScreenPreviewHelper*		CreateOpenGLScreenPreviewHelper (void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+	pthread_once(&gPreviewOnceControl, InitDeckLinkPreviewAPI);
+	
+	if (gCreateOpenGLPreviewFunc == NULL)
+		return NULL;
+	return gCreateOpenGLPreviewFunc();
+}
+
+IDeckLinkGLScreenPreviewHelper*		CreateOpenGL3ScreenPreviewHelper (void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+	pthread_once(&gPreviewOnceControl, InitDeckLinkPreviewAPI);
+
+	if (gCreateOpenGL3PreviewFunc == NULL)
+		return NULL;
+	return gCreateOpenGL3PreviewFunc();
+}
+
+IDeckLinkVideoConversion* CreateVideoConversionInstance (void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+	
+	if (gCreateVideoConversionFunc == NULL)
+		return NULL;
+	return gCreateVideoConversionFunc();
+}
+
+IDeckLinkDiscovery* CreateDeckLinkDiscoveryInstance (void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+	
+	if (gCreateDeckLinkDiscoveryFunc == NULL)
+		return NULL;
+	return gCreateDeckLinkDiscoveryFunc();
+}
+
+IDeckLinkVideoFrameAncillaryPackets* CreateVideoFrameAncillaryPacketsInstance (void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+	
+	if (gCreateVideoFrameAncillaryPacketsFunc == NULL)
+		return NULL;
+	return gCreateVideoFrameAncillaryPacketsFunc();
+}
diff --git a/DeckLinkSDK/Linux/include/DeckLinkAPIDispatch_v10_11.cpp b/DeckLinkSDK/Linux/include/DeckLinkAPIDispatch_v10_11.cpp
new file mode 100644
index 0000000000..4ea27bb4a5
--- /dev/null
+++ b/DeckLinkSDK/Linux/include/DeckLinkAPIDispatch_v10_11.cpp
@@ -0,0 +1,173 @@
+/* -LICENSE-START-
+** Copyright (c) 2019 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+**/
+
+#include <stdio.h>
+#include <pthread.h>
+#include <dlfcn.h>
+
+#include "DeckLinkAPI_v10_11.h"
+
+#define kDeckLinkAPI_Name "libDeckLinkAPI.so"
+#define KDeckLinkPreviewAPI_Name "libDeckLinkPreviewAPI.so"
+
+typedef IDeckLinkIterator* (*CreateIteratorFunc)(void);
+typedef IDeckLinkAPIInformation* (*CreateAPIInformationFunc)(void);
+typedef IDeckLinkGLScreenPreviewHelper* (*CreateOpenGLScreenPreviewHelperFunc)(void);
+typedef IDeckLinkVideoConversion* (*CreateVideoConversionInstanceFunc)(void);
+typedef IDeckLinkDiscovery* (*CreateDeckLinkDiscoveryInstanceFunc)(void);
+typedef IDeckLinkVideoFrameAncillaryPackets* (*CreateVideoFrameAncillaryPacketsInstanceFunc)(void);
+
+static pthread_once_t					gDeckLinkOnceControl = PTHREAD_ONCE_INIT;
+static pthread_once_t					gPreviewOnceControl = PTHREAD_ONCE_INIT;
+
+static bool								gLoadedDeckLinkAPI = false;
+
+static CreateIteratorFunc					gCreateIteratorFunc = NULL;
+static CreateAPIInformationFunc				gCreateAPIInformationFunc = NULL;
+static CreateOpenGLScreenPreviewHelperFunc	gCreateOpenGLPreviewFunc = NULL;
+static CreateVideoConversionInstanceFunc	gCreateVideoConversionFunc	= NULL;
+static CreateDeckLinkDiscoveryInstanceFunc	gCreateDeckLinkDiscoveryFunc = NULL;
+static CreateVideoFrameAncillaryPacketsInstanceFunc	gCreateVideoFrameAncillaryPacketsFunc = NULL;
+
+static void	InitDeckLinkAPI (void)
+{
+	void *libraryHandle;
+	
+	libraryHandle = dlopen(kDeckLinkAPI_Name, RTLD_NOW|RTLD_GLOBAL);
+	if (!libraryHandle)
+	{
+		fprintf(stderr, "%s\n", dlerror());
+		return;
+	}
+	
+	gLoadedDeckLinkAPI = true;
+	
+	gCreateIteratorFunc = (CreateIteratorFunc)dlsym(libraryHandle, "CreateDeckLinkIteratorInstance_0003");
+	if (!gCreateIteratorFunc)
+		fprintf(stderr, "%s\n", dlerror());
+	gCreateAPIInformationFunc = (CreateAPIInformationFunc)dlsym(libraryHandle, "CreateDeckLinkAPIInformationInstance_0001");
+	if (!gCreateAPIInformationFunc)
+		fprintf(stderr, "%s\n", dlerror());
+	gCreateVideoConversionFunc = (CreateVideoConversionInstanceFunc)dlsym(libraryHandle, "CreateVideoConversionInstance_0001");
+	if (!gCreateVideoConversionFunc)
+		fprintf(stderr, "%s\n", dlerror());
+	gCreateDeckLinkDiscoveryFunc = (CreateDeckLinkDiscoveryInstanceFunc)dlsym(libraryHandle, "CreateDeckLinkDiscoveryInstance_0002");
+	if (!gCreateDeckLinkDiscoveryFunc)
+		fprintf(stderr, "%s\n", dlerror());
+	gCreateVideoFrameAncillaryPacketsFunc = (CreateVideoFrameAncillaryPacketsInstanceFunc)dlsym(libraryHandle, "CreateVideoFrameAncillaryPacketsInstance_0001");
+	if (!gCreateVideoFrameAncillaryPacketsFunc)
+		fprintf(stderr, "%s\n", dlerror());
+}
+
+static void	InitDeckLinkPreviewAPI (void)
+{
+	void *libraryHandle;
+	
+	libraryHandle = dlopen(KDeckLinkPreviewAPI_Name, RTLD_NOW|RTLD_GLOBAL);
+	if (!libraryHandle)
+	{
+		fprintf(stderr, "%s\n", dlerror());
+		return;
+	}
+	gCreateOpenGLPreviewFunc = (CreateOpenGLScreenPreviewHelperFunc)dlsym(libraryHandle, "CreateOpenGLScreenPreviewHelper_0001");
+	if (!gCreateOpenGLPreviewFunc)
+		fprintf(stderr, "%s\n", dlerror());
+}
+
+bool		IsDeckLinkAPIPresent_v10_11 (void)
+{
+	// If the DeckLink API dynamic library was successfully loaded, return this knowledge to the caller
+	return gLoadedDeckLinkAPI;
+}
+
+IDeckLinkIterator*		CreateDeckLinkIteratorInstance_v10_11 (void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+	
+	if (gCreateIteratorFunc == NULL)
+		return NULL;
+	return gCreateIteratorFunc();
+}
+
+IDeckLinkAPIInformation*	CreateDeckLinkAPIInformationInstance_v10_11 (void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+	
+	if (gCreateAPIInformationFunc == NULL)
+		return NULL;
+	return gCreateAPIInformationFunc();
+}
+
+IDeckLinkGLScreenPreviewHelper*		CreateOpenGLScreenPreviewHelper_v10_11 (void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+	pthread_once(&gPreviewOnceControl, InitDeckLinkPreviewAPI);
+	
+	if (gCreateOpenGLPreviewFunc == NULL)
+		return NULL;
+	return gCreateOpenGLPreviewFunc();
+}
+
+IDeckLinkVideoConversion* CreateVideoConversionInstance_v10_11 (void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+	
+	if (gCreateVideoConversionFunc == NULL)
+		return NULL;
+	return gCreateVideoConversionFunc();
+}
+
+IDeckLinkDiscovery* CreateDeckLinkDiscoveryInstance_v10_11 (void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+	
+	if (gCreateDeckLinkDiscoveryFunc == NULL)
+		return NULL;
+	return gCreateDeckLinkDiscoveryFunc();
+}
+
+IDeckLinkVideoFrameAncillaryPackets* CreateVideoFrameAncillaryPacketsInstance_v10_11 (void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+	
+	if (gCreateVideoFrameAncillaryPacketsFunc == NULL)
+		return NULL;
+	return gCreateVideoFrameAncillaryPacketsFunc();
+}
diff --git a/DeckLinkSDK/Linux/include/DeckLinkAPIDispatch_v10_8.cpp b/DeckLinkSDK/Linux/include/DeckLinkAPIDispatch_v10_8.cpp
new file mode 100644
index 0000000000..a1236fe560
--- /dev/null
+++ b/DeckLinkSDK/Linux/include/DeckLinkAPIDispatch_v10_8.cpp
@@ -0,0 +1,159 @@
+/* -LICENSE-START-
+** Copyright (c) 2009 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+**/
+
+#include <stdio.h>
+#include <pthread.h>
+#include <dlfcn.h>
+
+#include "DeckLinkAPI.h"
+
+#define kDeckLinkAPI_Name "libDeckLinkAPI.so"
+#define KDeckLinkPreviewAPI_Name "libDeckLinkPreviewAPI.so"
+
+typedef IDeckLinkIterator* (*CreateIteratorFunc)(void);
+typedef IDeckLinkAPIInformation* (*CreateAPIInformationFunc)(void);
+typedef IDeckLinkGLScreenPreviewHelper* (*CreateOpenGLScreenPreviewHelperFunc)(void);
+typedef IDeckLinkVideoConversion* (*CreateVideoConversionInstanceFunc)(void);
+typedef IDeckLinkDiscovery* (*CreateDeckLinkDiscoveryInstanceFunc)(void);
+
+static pthread_once_t					gDeckLinkOnceControl = PTHREAD_ONCE_INIT;
+static pthread_once_t					gPreviewOnceControl = PTHREAD_ONCE_INIT;
+
+static bool								gLoadedDeckLinkAPI = false;
+
+static CreateIteratorFunc					gCreateIteratorFunc = NULL;
+static CreateAPIInformationFunc				gCreateAPIInformationFunc = NULL;
+static CreateOpenGLScreenPreviewHelperFunc	gCreateOpenGLPreviewFunc = NULL;
+static CreateVideoConversionInstanceFunc	gCreateVideoConversionFunc = NULL;
+static CreateDeckLinkDiscoveryInstanceFunc	gCreateDeckLinkDiscoveryFunc = NULL;
+
+static void	InitDeckLinkAPI(void)
+{
+	void *libraryHandle;
+
+	libraryHandle = dlopen(kDeckLinkAPI_Name, RTLD_NOW | RTLD_GLOBAL);
+	if (!libraryHandle)
+	{
+		fprintf(stderr, "%s\n", dlerror());
+		return;
+	}
+
+	gLoadedDeckLinkAPI = true;
+
+	gCreateIteratorFunc = (CreateIteratorFunc)dlsym(libraryHandle, "CreateDeckLinkIteratorInstance_0002");
+	if (!gCreateIteratorFunc)
+		fprintf(stderr, "%s\n", dlerror());
+	gCreateAPIInformationFunc = (CreateAPIInformationFunc)dlsym(libraryHandle, "CreateDeckLinkAPIInformationInstance_0001");
+	if (!gCreateAPIInformationFunc)
+		fprintf(stderr, "%s\n", dlerror());
+	gCreateVideoConversionFunc = (CreateVideoConversionInstanceFunc)dlsym(libraryHandle, "CreateVideoConversionInstance_0001");
+	if (!gCreateVideoConversionFunc)
+		fprintf(stderr, "%s\n", dlerror());
+	gCreateDeckLinkDiscoveryFunc = (CreateDeckLinkDiscoveryInstanceFunc)dlsym(libraryHandle, "CreateDeckLinkDiscoveryInstance_0001");
+	if (!gCreateDeckLinkDiscoveryFunc)
+		fprintf(stderr, "%s\n", dlerror());
+}
+
+static void	InitDeckLinkPreviewAPI(void)
+{
+	void *libraryHandle;
+
+	libraryHandle = dlopen(KDeckLinkPreviewAPI_Name, RTLD_NOW | RTLD_GLOBAL);
+	if (!libraryHandle)
+	{
+		fprintf(stderr, "%s\n", dlerror());
+		return;
+	}
+	gCreateOpenGLPreviewFunc = (CreateOpenGLScreenPreviewHelperFunc)dlsym(libraryHandle, "CreateOpenGLScreenPreviewHelper_0001");
+	if (!gCreateOpenGLPreviewFunc)
+		fprintf(stderr, "%s\n", dlerror());
+}
+
+bool		IsDeckLinkAPIPresent(void)
+{
+	// If the DeckLink API dynamic library was successfully loaded, return this knowledge to the caller
+	return gLoadedDeckLinkAPI;
+}
+
+IDeckLinkIterator*		CreateDeckLinkIteratorInstance(void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+
+	if (gCreateIteratorFunc == NULL)
+		return NULL;
+	return gCreateIteratorFunc();
+}
+
+IDeckLinkAPIInformation*	CreateDeckLinkAPIInformationInstance(void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+
+	if (gCreateAPIInformationFunc == NULL)
+		return NULL;
+	return gCreateAPIInformationFunc();
+}
+
+IDeckLinkGLScreenPreviewHelper*		CreateOpenGLScreenPreviewHelper(void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+	pthread_once(&gPreviewOnceControl, InitDeckLinkPreviewAPI);
+
+	if (gCreateOpenGLPreviewFunc == NULL)
+		return NULL;
+	return gCreateOpenGLPreviewFunc();
+}
+
+IDeckLinkVideoConversion* CreateVideoConversionInstance(void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+
+	if (gCreateVideoConversionFunc == NULL)
+		return NULL;
+	return gCreateVideoConversionFunc();
+}
+
+IDeckLinkDiscovery* CreateDeckLinkDiscoveryInstance(void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+
+	if (gCreateDeckLinkDiscoveryFunc == NULL)
+		return NULL;
+	return gCreateDeckLinkDiscoveryFunc();
+}
diff --git a/DeckLinkSDK/Linux/include/DeckLinkAPIDispatch_v7_6.cpp b/DeckLinkSDK/Linux/include/DeckLinkAPIDispatch_v7_6.cpp
new file mode 100644
index 0000000000..a454fda8da
--- /dev/null
+++ b/DeckLinkSDK/Linux/include/DeckLinkAPIDispatch_v7_6.cpp
@@ -0,0 +1,122 @@
+/* -LICENSE-START-
+** Copyright (c) 2009 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+**/
+
+#include <stdio.h>
+#include <pthread.h>
+#include <dlfcn.h>
+
+#include "DeckLinkAPI_v7_6.h"
+
+#define kDeckLinkAPI_Name "libDeckLinkAPI.so"
+#define KDeckLinkPreviewAPI_Name "libDeckLinkPreviewAPI.so"
+
+typedef IDeckLinkIterator* (*CreateIteratorFunc_v7_6)(void);
+typedef IDeckLinkGLScreenPreviewHelper_v7_6* (*CreateOpenGLScreenPreviewHelperFunc_v7_6)(void);
+typedef IDeckLinkVideoConversion_v7_6* (*CreateVideoConversionInstanceFunc_v7_6)(void);
+
+static pthread_once_t					gDeckLinkOnceControl = PTHREAD_ONCE_INIT;
+static pthread_once_t					gPreviewOnceControl = PTHREAD_ONCE_INIT;
+
+static CreateIteratorFunc_v7_6						gCreateIteratorFunc			= NULL;
+static CreateOpenGLScreenPreviewHelperFunc_v7_6		gCreateOpenGLPreviewFunc	= NULL;
+static CreateVideoConversionInstanceFunc_v7_6		gCreateVideoConversionFunc	= NULL;
+
+static void	InitDeckLinkAPI_v7_6 (void)
+{
+	void *libraryHandle;
+	
+	libraryHandle = dlopen(kDeckLinkAPI_Name, RTLD_NOW|RTLD_GLOBAL);
+	if (!libraryHandle)
+	{
+		fprintf(stderr, "%s\n", dlerror());
+		return;
+	}
+	
+	gCreateIteratorFunc = (CreateIteratorFunc_v7_6)dlsym(libraryHandle, "CreateDeckLinkIteratorInstance");
+	if (!gCreateIteratorFunc)
+		fprintf(stderr, "%s\n", dlerror());
+	gCreateVideoConversionFunc = (CreateVideoConversionInstanceFunc_v7_6)dlsym(libraryHandle, "CreateVideoConversionInstance");
+	if (!gCreateVideoConversionFunc)
+		fprintf(stderr, "%s\n", dlerror());
+}
+
+static void	InitDeckLinkPreviewAPI_v7_6 (void)
+{
+	void *libraryHandle;
+	
+	libraryHandle = dlopen(KDeckLinkPreviewAPI_Name, RTLD_NOW|RTLD_GLOBAL);
+	if (!libraryHandle)
+	{
+		fprintf(stderr, "%s\n", dlerror());
+		return;
+	}
+	gCreateOpenGLPreviewFunc = (CreateOpenGLScreenPreviewHelperFunc_v7_6)dlsym(libraryHandle, "CreateOpenGLScreenPreviewHelper");
+	if (!gCreateOpenGLPreviewFunc)
+		fprintf(stderr, "%s\n", dlerror());
+}
+
+IDeckLinkIterator*		CreateDeckLinkIteratorInstance_v7_6 (void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI_v7_6);
+	
+	if (gCreateIteratorFunc == NULL)
+		return NULL;
+	return gCreateIteratorFunc();
+}
+
+IDeckLinkGLScreenPreviewHelper_v7_6*		CreateOpenGLScreenPreviewHelper_v7_6 (void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI_v7_6);
+	pthread_once(&gPreviewOnceControl, InitDeckLinkPreviewAPI_v7_6);
+	
+	if (gCreateOpenGLPreviewFunc == NULL)
+		return NULL;
+	return gCreateOpenGLPreviewFunc();
+}
+
+IDeckLinkVideoConversion_v7_6* CreateVideoConversionInstance_v7_6 (void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI_v7_6);
+	
+	if (gCreateVideoConversionFunc == NULL)
+		return NULL;
+	return gCreateVideoConversionFunc();
+}
+
diff --git a/DeckLinkSDK/Linux/include/DeckLinkAPIDispatch_v8_0.cpp b/DeckLinkSDK/Linux/include/DeckLinkAPIDispatch_v8_0.cpp
new file mode 100644
index 0000000000..22f2a71a0c
--- /dev/null
+++ b/DeckLinkSDK/Linux/include/DeckLinkAPIDispatch_v8_0.cpp
@@ -0,0 +1,146 @@
+/* -LICENSE-START-
+** Copyright (c) 2011 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+**/
+
+#include <stdio.h>
+#include <pthread.h>
+#include <dlfcn.h>
+
+#include "DeckLinkAPI_v8_0.h"
+
+#define kDeckLinkAPI_Name "libDeckLinkAPI.so"
+#define KDeckLinkPreviewAPI_Name "libDeckLinkPreviewAPI.so"
+
+typedef IDeckLinkIterator_v8_0* (*CreateIteratorFunc)(void);
+typedef IDeckLinkAPIInformation* (*CreateAPIInformationFunc)(void);
+typedef IDeckLinkGLScreenPreviewHelper* (*CreateOpenGLScreenPreviewHelperFunc)(void);
+typedef IDeckLinkVideoConversion* (*CreateVideoConversionInstanceFunc)(void);
+
+static pthread_once_t					gDeckLinkOnceControl = PTHREAD_ONCE_INIT;
+static pthread_once_t					gPreviewOnceControl = PTHREAD_ONCE_INIT;
+
+static bool								gLoadedDeckLinkAPI = false;
+
+static CreateIteratorFunc					gCreateIteratorFunc = NULL;
+static CreateAPIInformationFunc				gCreateAPIInformationFunc = NULL;
+static CreateOpenGLScreenPreviewHelperFunc	gCreateOpenGLPreviewFunc = NULL;
+static CreateVideoConversionInstanceFunc	gCreateVideoConversionFunc	= NULL;
+
+static void	InitDeckLinkAPI (void)
+{
+	void *libraryHandle;
+	
+	libraryHandle = dlopen(kDeckLinkAPI_Name, RTLD_NOW|RTLD_GLOBAL);
+	if (!libraryHandle)
+	{
+		fprintf(stderr, "%s\n", dlerror());
+		return;
+	}
+	
+	gLoadedDeckLinkAPI = true;
+	
+	gCreateIteratorFunc = (CreateIteratorFunc)dlsym(libraryHandle, "CreateDeckLinkIteratorInstance_0001");
+	if (!gCreateIteratorFunc)
+		fprintf(stderr, "%s\n", dlerror());
+	gCreateAPIInformationFunc = (CreateAPIInformationFunc)dlsym(libraryHandle, "CreateDeckLinkAPIInformationInstance_0001");
+	if (!gCreateAPIInformationFunc)
+		fprintf(stderr, "%s\n", dlerror());
+	gCreateVideoConversionFunc = (CreateVideoConversionInstanceFunc)dlsym(libraryHandle, "CreateVideoConversionInstance_0001");
+	if (!gCreateVideoConversionFunc)
+		fprintf(stderr, "%s\n", dlerror());
+}
+
+static void	InitDeckLinkPreviewAPI (void)
+{
+	void *libraryHandle;
+	
+	libraryHandle = dlopen(KDeckLinkPreviewAPI_Name, RTLD_NOW|RTLD_GLOBAL);
+	if (!libraryHandle)
+	{
+		fprintf(stderr, "%s\n", dlerror());
+		return;
+	}
+	gCreateOpenGLPreviewFunc = (CreateOpenGLScreenPreviewHelperFunc)dlsym(libraryHandle, "CreateOpenGLScreenPreviewHelper_0001");
+	if (!gCreateOpenGLPreviewFunc)
+		fprintf(stderr, "%s\n", dlerror());
+}
+
+bool		IsDeckLinkAPIPresent (void)
+{
+	// If the DeckLink API dynamic library was successfully loaded, return this knowledge to the caller
+	return gLoadedDeckLinkAPI;
+}
+
+IDeckLinkIterator_v8_0*		CreateDeckLinkIteratorInstance (void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+	
+	if (gCreateIteratorFunc == NULL)
+		return NULL;
+	return gCreateIteratorFunc();
+}
+
+IDeckLinkAPIInformation*	CreateDeckLinkAPIInformationInstance (void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+	
+	if (gCreateAPIInformationFunc == NULL)
+		return NULL;
+	return gCreateAPIInformationFunc();
+}
+
+IDeckLinkGLScreenPreviewHelper*		CreateOpenGLScreenPreviewHelper (void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+	pthread_once(&gPreviewOnceControl, InitDeckLinkPreviewAPI);
+	
+	if (gCreateOpenGLPreviewFunc == NULL)
+		return NULL;
+	return gCreateOpenGLPreviewFunc();
+}
+
+IDeckLinkVideoConversion* CreateVideoConversionInstance (void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+	
+	if (gCreateVideoConversionFunc == NULL)
+		return NULL;
+	return gCreateVideoConversionFunc();
+}
+
diff --git a/DeckLinkSDK/Linux/include/DeckLinkAPIModes.h b/DeckLinkSDK/Linux/include/DeckLinkAPIModes.h
new file mode 100644
index 0000000000..0a54dca4cc
--- /dev/null
+++ b/DeckLinkSDK/Linux/include/DeckLinkAPIModes.h
@@ -0,0 +1,289 @@
+/* -LICENSE-START-
+** Copyright (c) 2022 Blackmagic Design
+**
+** Permission is hereby granted, free of charge, to any person or organization
+** obtaining a copy of the software and accompanying documentation covered by
+** this license (the "Software") to use, reproduce, display, distribute,
+** execute, and transmit the Software, and to prepare derivative works of the
+** Software, and to permit third-parties to whom the Software is furnished to
+** do so, all subject to the following:
+**
+** The copyright notices in the Software and this entire statement, including
+** the above license grant, this restriction and the following disclaimer,
+** must be included in all copies of the Software, in whole or in part, and
+** all derivative works of the Software, unless such copies or derivative
+** works are solely in the form of machine-executable object code generated by
+** a source language processor.
+**
+** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+** DEALINGS IN THE SOFTWARE.
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPIMODES_H
+#define BMD_DECKLINKAPIMODES_H
+
+
+#ifndef BMD_CONST
+    #if defined(_MSC_VER)
+        #define BMD_CONST __declspec(selectany) static const
+    #else
+        #define BMD_CONST static const
+    #endif
+#endif
+
+#ifndef BMD_PUBLIC
+	#define BMD_PUBLIC
+#endif
+
+// Type Declarations
+
+
+// Interface ID Declarations
+
+BMD_CONST REFIID IID_IDeckLinkDisplayModeIterator                 = /* 9C88499F-F601-4021-B80B-032E4EB41C35 */ { 0x9C,0x88,0x49,0x9F,0xF6,0x01,0x40,0x21,0xB8,0x0B,0x03,0x2E,0x4E,0xB4,0x1C,0x35 };
+BMD_CONST REFIID IID_IDeckLinkDisplayMode                         = /* 3EB2C1AB-0A3D-4523-A3AD-F40D7FB14E78 */ { 0x3E,0xB2,0xC1,0xAB,0x0A,0x3D,0x45,0x23,0xA3,0xAD,0xF4,0x0D,0x7F,0xB1,0x4E,0x78 };
+
+/* Enum BMDDisplayMode - BMDDisplayMode enumerates the video modes supported. */
+
+typedef uint32_t BMDDisplayMode;
+enum _BMDDisplayMode {
+
+    /* SD Modes */
+
+    bmdModeNTSC                                                  = /* 'ntsc' */ 0x6E747363,
+    bmdModeNTSC2398                                              = /* 'nt23' */ 0x6E743233,	// 3:2 pulldown
+    bmdModePAL                                                   = /* 'pal ' */ 0x70616C20,
+    bmdModeNTSCp                                                 = /* 'ntsp' */ 0x6E747370,
+    bmdModePALp                                                  = /* 'palp' */ 0x70616C70,
+
+    /* HD 1080 Modes */
+
+    bmdModeHD1080p2398                                           = /* '23ps' */ 0x32337073,
+    bmdModeHD1080p24                                             = /* '24ps' */ 0x32347073,
+    bmdModeHD1080p25                                             = /* 'Hp25' */ 0x48703235,
+    bmdModeHD1080p2997                                           = /* 'Hp29' */ 0x48703239,
+    bmdModeHD1080p30                                             = /* 'Hp30' */ 0x48703330,
+    bmdModeHD1080p4795                                           = /* 'Hp47' */ 0x48703437,
+    bmdModeHD1080p48                                             = /* 'Hp48' */ 0x48703438,
+    bmdModeHD1080p50                                             = /* 'Hp50' */ 0x48703530,
+    bmdModeHD1080p5994                                           = /* 'Hp59' */ 0x48703539,
+    bmdModeHD1080p6000                                           = /* 'Hp60' */ 0x48703630,	// N.B. This _really_ is 60.00 Hz.
+    bmdModeHD1080p9590                                           = /* 'Hp95' */ 0x48703935,
+    bmdModeHD1080p96                                             = /* 'Hp96' */ 0x48703936,
+    bmdModeHD1080p100                                            = /* 'Hp10' */ 0x48703130,
+    bmdModeHD1080p11988                                          = /* 'Hp11' */ 0x48703131,
+    bmdModeHD1080p120                                            = /* 'Hp12' */ 0x48703132,
+    bmdModeHD1080i50                                             = /* 'Hi50' */ 0x48693530,
+    bmdModeHD1080i5994                                           = /* 'Hi59' */ 0x48693539,
+    bmdModeHD1080i6000                                           = /* 'Hi60' */ 0x48693630,	// N.B. This _really_ is 60.00 Hz.
+
+    /* HD 720 Modes */
+
+    bmdModeHD720p50                                              = /* 'hp50' */ 0x68703530,
+    bmdModeHD720p5994                                            = /* 'hp59' */ 0x68703539,
+    bmdModeHD720p60                                              = /* 'hp60' */ 0x68703630,
+
+    /* 2K Modes */
+
+    bmdMode2k2398                                                = /* '2k23' */ 0x326B3233,
+    bmdMode2k24                                                  = /* '2k24' */ 0x326B3234,
+    bmdMode2k25                                                  = /* '2k25' */ 0x326B3235,
+
+    /* 2K DCI Modes */
+
+    bmdMode2kDCI2398                                             = /* '2d23' */ 0x32643233,
+    bmdMode2kDCI24                                               = /* '2d24' */ 0x32643234,
+    bmdMode2kDCI25                                               = /* '2d25' */ 0x32643235,
+    bmdMode2kDCI2997                                             = /* '2d29' */ 0x32643239,
+    bmdMode2kDCI30                                               = /* '2d30' */ 0x32643330,
+    bmdMode2kDCI4795                                             = /* '2d47' */ 0x32643437,
+    bmdMode2kDCI48                                               = /* '2d48' */ 0x32643438,
+    bmdMode2kDCI50                                               = /* '2d50' */ 0x32643530,
+    bmdMode2kDCI5994                                             = /* '2d59' */ 0x32643539,
+    bmdMode2kDCI60                                               = /* '2d60' */ 0x32643630,
+    bmdMode2kDCI9590                                             = /* '2d95' */ 0x32643935,
+    bmdMode2kDCI96                                               = /* '2d96' */ 0x32643936,
+    bmdMode2kDCI100                                              = /* '2d10' */ 0x32643130,
+    bmdMode2kDCI11988                                            = /* '2d11' */ 0x32643131,
+    bmdMode2kDCI120                                              = /* '2d12' */ 0x32643132,
+
+    /* 4K UHD Modes */
+
+    bmdMode4K2160p2398                                           = /* '4k23' */ 0x346B3233,
+    bmdMode4K2160p24                                             = /* '4k24' */ 0x346B3234,
+    bmdMode4K2160p25                                             = /* '4k25' */ 0x346B3235,
+    bmdMode4K2160p2997                                           = /* '4k29' */ 0x346B3239,
+    bmdMode4K2160p30                                             = /* '4k30' */ 0x346B3330,
+    bmdMode4K2160p4795                                           = /* '4k47' */ 0x346B3437,
+    bmdMode4K2160p48                                             = /* '4k48' */ 0x346B3438,
+    bmdMode4K2160p50                                             = /* '4k50' */ 0x346B3530,
+    bmdMode4K2160p5994                                           = /* '4k59' */ 0x346B3539,
+    bmdMode4K2160p60                                             = /* '4k60' */ 0x346B3630,
+    bmdMode4K2160p9590                                           = /* '4k95' */ 0x346B3935,
+    bmdMode4K2160p96                                             = /* '4k96' */ 0x346B3936,
+    bmdMode4K2160p100                                            = /* '4k10' */ 0x346B3130,
+    bmdMode4K2160p11988                                          = /* '4k11' */ 0x346B3131,
+    bmdMode4K2160p120                                            = /* '4k12' */ 0x346B3132,
+
+    /* 4K DCI Modes */
+
+    bmdMode4kDCI2398                                             = /* '4d23' */ 0x34643233,
+    bmdMode4kDCI24                                               = /* '4d24' */ 0x34643234,
+    bmdMode4kDCI25                                               = /* '4d25' */ 0x34643235,
+    bmdMode4kDCI2997                                             = /* '4d29' */ 0x34643239,
+    bmdMode4kDCI30                                               = /* '4d30' */ 0x34643330,
+    bmdMode4kDCI4795                                             = /* '4d47' */ 0x34643437,
+    bmdMode4kDCI48                                               = /* '4d48' */ 0x34643438,
+    bmdMode4kDCI50                                               = /* '4d50' */ 0x34643530,
+    bmdMode4kDCI5994                                             = /* '4d59' */ 0x34643539,
+    bmdMode4kDCI60                                               = /* '4d60' */ 0x34643630,
+    bmdMode4kDCI9590                                             = /* '4d95' */ 0x34643935,
+    bmdMode4kDCI96                                               = /* '4d96' */ 0x34643936,
+    bmdMode4kDCI100                                              = /* '4d10' */ 0x34643130,
+    bmdMode4kDCI11988                                            = /* '4d11' */ 0x34643131,
+    bmdMode4kDCI120                                              = /* '4d12' */ 0x34643132,
+
+    /* 8K UHD Modes */
+
+    bmdMode8K4320p2398                                           = /* '8k23' */ 0x386B3233,
+    bmdMode8K4320p24                                             = /* '8k24' */ 0x386B3234,
+    bmdMode8K4320p25                                             = /* '8k25' */ 0x386B3235,
+    bmdMode8K4320p2997                                           = /* '8k29' */ 0x386B3239,
+    bmdMode8K4320p30                                             = /* '8k30' */ 0x386B3330,
+    bmdMode8K4320p4795                                           = /* '8k47' */ 0x386B3437,
+    bmdMode8K4320p48                                             = /* '8k48' */ 0x386B3438,
+    bmdMode8K4320p50                                             = /* '8k50' */ 0x386B3530,
+    bmdMode8K4320p5994                                           = /* '8k59' */ 0x386B3539,
+    bmdMode8K4320p60                                             = /* '8k60' */ 0x386B3630,
+
+    /* 8K DCI Modes */
+
+    bmdMode8kDCI2398                                             = /* '8d23' */ 0x38643233,
+    bmdMode8kDCI24                                               = /* '8d24' */ 0x38643234,
+    bmdMode8kDCI25                                               = /* '8d25' */ 0x38643235,
+    bmdMode8kDCI2997                                             = /* '8d29' */ 0x38643239,
+    bmdMode8kDCI30                                               = /* '8d30' */ 0x38643330,
+    bmdMode8kDCI4795                                             = /* '8d47' */ 0x38643437,
+    bmdMode8kDCI48                                               = /* '8d48' */ 0x38643438,
+    bmdMode8kDCI50                                               = /* '8d50' */ 0x38643530,
+    bmdMode8kDCI5994                                             = /* '8d59' */ 0x38643539,
+    bmdMode8kDCI60                                               = /* '8d60' */ 0x38643630,
+
+    /* PC Modes */
+
+    bmdMode640x480p60                                            = /* 'vga6' */ 0x76676136,
+    bmdMode800x600p60                                            = /* 'svg6' */ 0x73766736,
+    bmdMode1440x900p50                                           = /* 'wxg5' */ 0x77786735,
+    bmdMode1440x900p60                                           = /* 'wxg6' */ 0x77786736,
+    bmdMode1440x1080p50                                          = /* 'sxg5' */ 0x73786735,
+    bmdMode1440x1080p60                                          = /* 'sxg6' */ 0x73786736,
+    bmdMode1600x1200p50                                          = /* 'uxg5' */ 0x75786735,
+    bmdMode1600x1200p60                                          = /* 'uxg6' */ 0x75786736,
+    bmdMode1920x1200p50                                          = /* 'wux5' */ 0x77757835,
+    bmdMode1920x1200p60                                          = /* 'wux6' */ 0x77757836,
+    bmdMode1920x1440p50                                          = /* '1945' */ 0x31393435,
+    bmdMode1920x1440p60                                          = /* '1946' */ 0x31393436,
+    bmdMode2560x1440p50                                          = /* 'wqh5' */ 0x77716835,
+    bmdMode2560x1440p60                                          = /* 'wqh6' */ 0x77716836,
+    bmdMode2560x1600p50                                          = /* 'wqx5' */ 0x77717835,
+    bmdMode2560x1600p60                                          = /* 'wqx6' */ 0x77717836,
+
+    /* Special Modes */
+
+    bmdModeUnknown                                               = /* 'iunk' */ 0x69756E6B
+};
+
+/* Enum BMDFieldDominance - BMDFieldDominance enumerates settings applicable to video fields. */
+
+typedef uint32_t BMDFieldDominance;
+enum _BMDFieldDominance {
+    bmdUnknownFieldDominance                                     = 0,
+    bmdLowerFieldFirst                                           = /* 'lowr' */ 0x6C6F7772,
+    bmdUpperFieldFirst                                           = /* 'uppr' */ 0x75707072,
+    bmdProgressiveFrame                                          = /* 'prog' */ 0x70726F67,
+    bmdProgressiveSegmentedFrame                                 = /* 'psf ' */ 0x70736620
+};
+
+/* Enum BMDPixelFormat - Video pixel formats supported for output/input */
+
+typedef uint32_t BMDPixelFormat;
+enum _BMDPixelFormat {
+    bmdFormatUnspecified                                         = 0,
+    bmdFormat8BitYUV                                             = /* '2vuy' */ 0x32767579,
+    bmdFormat10BitYUV                                            = /* 'v210' */ 0x76323130,
+    bmdFormat8BitARGB                                            = 32,
+    bmdFormat8BitBGRA                                            = /* 'BGRA' */ 0x42475241,
+    bmdFormat10BitRGB                                            = /* 'r210' */ 0x72323130,	// Big-endian RGB 10-bit per component with SMPTE video levels (64-960). Packed as 2:10:10:10
+    bmdFormat12BitRGB                                            = /* 'R12B' */ 0x52313242,	// Big-endian RGB 12-bit per component with full range (0-4095). Packed as 12-bit per component
+    bmdFormat12BitRGBLE                                          = /* 'R12L' */ 0x5231324C,	// Little-endian RGB 12-bit per component with full range (0-4095). Packed as 12-bit per component
+    bmdFormat10BitRGBXLE                                         = /* 'R10l' */ 0x5231306C,	// Little-endian 10-bit RGB with SMPTE video levels (64-940)
+    bmdFormat10BitRGBX                                           = /* 'R10b' */ 0x52313062,	// Big-endian 10-bit RGB with SMPTE video levels (64-940)
+    bmdFormatH265                                                = /* 'hev1' */ 0x68657631,	// High Efficiency Video Coding (HEVC/h.265)
+
+    /* AVID DNxHR */
+
+    bmdFormatDNxHR                                               = /* 'AVdh' */ 0x41566468
+};
+
+/* Enum BMDDisplayModeFlags - Flags to describe the characteristics of an IDeckLinkDisplayMode. */
+
+typedef uint32_t BMDDisplayModeFlags;
+enum _BMDDisplayModeFlags {
+    bmdDisplayModeSupports3D                                     = 1 << 0,
+    bmdDisplayModeColorspaceRec601                               = 1 << 1,
+    bmdDisplayModeColorspaceRec709                               = 1 << 2,
+    bmdDisplayModeColorspaceRec2020                              = 1 << 3
+};
+
+#if defined(__cplusplus)
+
+// Forward Declarations
+
+class IDeckLinkDisplayModeIterator;
+class IDeckLinkDisplayMode;
+
+/* Interface IDeckLinkDisplayModeIterator - Enumerates over supported input/output display modes. */
+
+class BMD_PUBLIC IDeckLinkDisplayModeIterator : public IUnknown
+{
+public:
+    virtual HRESULT Next (/* out */ IDeckLinkDisplayMode** deckLinkDisplayMode) = 0;
+
+protected:
+    virtual ~IDeckLinkDisplayModeIterator () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkDisplayMode - Represents a display mode */
+
+class BMD_PUBLIC IDeckLinkDisplayMode : public IUnknown
+{
+public:
+    virtual HRESULT GetName (/* out */ const char** name) = 0;
+    virtual BMDDisplayMode GetDisplayMode (void) = 0;
+    virtual long GetWidth (void) = 0;
+    virtual long GetHeight (void) = 0;
+    virtual HRESULT GetFrameRate (/* out */ BMDTimeValue* frameDuration, /* out */ BMDTimeScale* timeScale) = 0;
+    virtual BMDFieldDominance GetFieldDominance (void) = 0;
+    virtual BMDDisplayModeFlags GetFlags (void) = 0;
+
+protected:
+    virtual ~IDeckLinkDisplayMode () {} // call Release method to drop reference count
+};
+
+/* Functions */
+
+extern "C" {
+
+
+}
+
+
+
+#endif /* defined(__cplusplus) */
+#endif /* defined(BMD_DECKLINKAPIMODES_H) */
diff --git a/DeckLinkSDK/Linux/include/DeckLinkAPITypes.h b/DeckLinkSDK/Linux/include/DeckLinkAPITypes.h
new file mode 100644
index 0000000000..893c3c92e4
--- /dev/null
+++ b/DeckLinkSDK/Linux/include/DeckLinkAPITypes.h
@@ -0,0 +1,132 @@
+/* -LICENSE-START-
+** Copyright (c) 2022 Blackmagic Design
+**
+** Permission is hereby granted, free of charge, to any person or organization
+** obtaining a copy of the software and accompanying documentation covered by
+** this license (the "Software") to use, reproduce, display, distribute,
+** execute, and transmit the Software, and to prepare derivative works of the
+** Software, and to permit third-parties to whom the Software is furnished to
+** do so, all subject to the following:
+**
+** The copyright notices in the Software and this entire statement, including
+** the above license grant, this restriction and the following disclaimer,
+** must be included in all copies of the Software, in whole or in part, and
+** all derivative works of the Software, unless such copies or derivative
+** works are solely in the form of machine-executable object code generated by
+** a source language processor.
+**
+** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+** DEALINGS IN THE SOFTWARE.
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPITYPES_H
+#define BMD_DECKLINKAPITYPES_H
+
+
+#ifndef BMD_CONST
+    #if defined(_MSC_VER)
+        #define BMD_CONST __declspec(selectany) static const
+    #else
+        #define BMD_CONST static const
+    #endif
+#endif
+
+#ifndef BMD_PUBLIC
+	#define BMD_PUBLIC
+#endif
+
+// Type Declarations
+
+typedef int64_t BMDTimeValue;
+typedef int64_t BMDTimeScale;
+typedef uint32_t BMDTimecodeBCD;
+typedef uint32_t BMDTimecodeUserBits;
+
+// Interface ID Declarations
+
+BMD_CONST REFIID IID_IDeckLinkTimecode                            = /* BC6CFBD3-8317-4325-AC1C-1216391E9340 */ { 0xBC,0x6C,0xFB,0xD3,0x83,0x17,0x43,0x25,0xAC,0x1C,0x12,0x16,0x39,0x1E,0x93,0x40 };
+
+/* Enum BMDTimecodeFlags - Timecode flags */
+
+typedef uint32_t BMDTimecodeFlags;
+enum _BMDTimecodeFlags {
+    bmdTimecodeFlagDefault                                       = 0,
+    bmdTimecodeIsDropFrame                                       = 1 << 0,
+    bmdTimecodeFieldMark                                         = 1 << 1,
+    bmdTimecodeColorFrame                                        = 1 << 2,
+    bmdTimecodeEmbedRecordingTrigger                             = 1 << 3,	// On SDI recording trigger utilises a user-bit.
+    bmdTimecodeRecordingTriggered                                = 1 << 4
+};
+
+/* Enum BMDVideoConnection - Video connection types */
+
+typedef uint32_t BMDVideoConnection;
+enum _BMDVideoConnection {
+    bmdVideoConnectionUnspecified                                = 0,
+    bmdVideoConnectionSDI                                        = 1 << 0,
+    bmdVideoConnectionHDMI                                       = 1 << 1,
+    bmdVideoConnectionOpticalSDI                                 = 1 << 2,
+    bmdVideoConnectionComponent                                  = 1 << 3,
+    bmdVideoConnectionComposite                                  = 1 << 4,
+    bmdVideoConnectionSVideo                                     = 1 << 5
+};
+
+/* Enum BMDAudioConnection - Audio connection types */
+
+typedef uint32_t BMDAudioConnection;
+enum _BMDAudioConnection {
+    bmdAudioConnectionEmbedded                                   = 1 << 0,
+    bmdAudioConnectionAESEBU                                     = 1 << 1,
+    bmdAudioConnectionAnalog                                     = 1 << 2,
+    bmdAudioConnectionAnalogXLR                                  = 1 << 3,
+    bmdAudioConnectionAnalogRCA                                  = 1 << 4,
+    bmdAudioConnectionMicrophone                                 = 1 << 5,
+    bmdAudioConnectionHeadphones                                 = 1 << 6
+};
+
+/* Enum BMDDeckControlConnection - Deck control connections */
+
+typedef uint32_t BMDDeckControlConnection;
+enum _BMDDeckControlConnection {
+    bmdDeckControlConnectionRS422Remote1                         = 1 << 0,
+    bmdDeckControlConnectionRS422Remote2                         = 1 << 1
+};
+
+#if defined(__cplusplus)
+
+// Forward Declarations
+
+class IDeckLinkTimecode;
+
+/* Interface IDeckLinkTimecode - Used for video frame timecode representation. */
+
+class BMD_PUBLIC IDeckLinkTimecode : public IUnknown
+{
+public:
+    virtual BMDTimecodeBCD GetBCD (void) = 0;
+    virtual HRESULT GetComponents (/* out */ uint8_t* hours, /* out */ uint8_t* minutes, /* out */ uint8_t* seconds, /* out */ uint8_t* frames) = 0;
+    virtual HRESULT GetString (/* out */ const char** timecode) = 0;
+    virtual BMDTimecodeFlags GetFlags (void) = 0;
+    virtual HRESULT GetTimecodeUserBits (/* out */ BMDTimecodeUserBits* userBits) = 0;
+
+protected:
+    virtual ~IDeckLinkTimecode () {} // call Release method to drop reference count
+};
+
+/* Functions */
+
+extern "C" {
+
+
+}
+
+
+
+#endif /* defined(__cplusplus) */
+#endif /* defined(BMD_DECKLINKAPITYPES_H) */
diff --git a/DeckLinkSDK/Linux/include/DeckLinkAPIVersion.h b/DeckLinkSDK/Linux/include/DeckLinkAPIVersion.h
new file mode 100644
index 0000000000..679ef92584
--- /dev/null
+++ b/DeckLinkSDK/Linux/include/DeckLinkAPIVersion.h
@@ -0,0 +1,50 @@
+/* -LICENSE-START-
+ * ** Copyright (c) 2014 Blackmagic Design
+ * **  
+ * ** Permission is hereby granted, free of charge, to any person or organization 
+ * ** obtaining a copy of the software and accompanying documentation (the 
+ * ** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+ * ** and transmit the Software, and to prepare derivative works of the Software, 
+ * ** and to permit third-parties to whom the Software is furnished to do so, in 
+ * ** accordance with:
+ * ** 
+ * ** (1) if the Software is obtained from Blackmagic Design, the End User License 
+ * ** Agreement for the Software Development Kit (“EULA”) available at 
+ * ** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+ * ** 
+ * ** (2) if the Software is obtained from any third party, such licensing terms 
+ * ** as notified by that third party,
+ * ** 
+ * ** and all subject to the following:
+ * ** 
+ * ** (3) the copyright notices in the Software and this entire statement, 
+ * ** including the above license grant, this restriction and the following 
+ * ** disclaimer, must be included in all copies of the Software, in whole or in 
+ * ** part, and all derivative works of the Software, unless such copies or 
+ * ** derivative works are solely in the form of machine-executable object code 
+ * ** generated by a source language processor.
+ * ** 
+ * ** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+ * ** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+ * ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+ * ** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+ * ** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+ * ** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+ * ** DEALINGS IN THE SOFTWARE.
+ * ** 
+ * ** A copy of the Software is available free of charge at 
+ * ** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+ * ** 
+ * ** -LICENSE-END-
+ * */
+
+/* DeckLinkAPIVersion.h */
+
+#ifndef __DeckLink_API_Version_h__
+#define __DeckLink_API_Version_h__
+
+#define BLACKMAGIC_DECKLINK_API_VERSION					0x0c040200
+#define BLACKMAGIC_DECKLINK_API_VERSION_STRING			"12.4.2"
+
+#endif	// __DeckLink_API_Version_h__
+
diff --git a/DeckLinkSDK/Linux/include/DeckLinkAPIVideoEncoderInput_v10_11.h b/DeckLinkSDK/Linux/include/DeckLinkAPIVideoEncoderInput_v10_11.h
new file mode 100644
index 0000000000..590a485588
--- /dev/null
+++ b/DeckLinkSDK/Linux/include/DeckLinkAPIVideoEncoderInput_v10_11.h
@@ -0,0 +1,87 @@
+/* -LICENSE-START-
+** Copyright (c) 2017 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPIVIDEOENCODERINPUT_v10_11_H
+#define BMD_DECKLINKAPIVIDEOENCODERINPUT_v10_11_H
+
+#include "DeckLinkAPI.h"
+#include "DeckLinkAPI_v10_11.h"
+
+// Type Declarations
+BMD_CONST REFIID IID_IDeckLinkEncoderInput_v10_11                        = /* 270587DA-6B7D-42E7-A1F0-6D853F581185 */ {0x27,0x05,0x87,0xDA,0x6B,0x7D,0x42,0xE7,0xA1,0xF0,0x6D,0x85,0x3F,0x58,0x11,0x85};
+
+/* Interface IDeckLinkEncoderInput_v10_11 - Created by QueryInterface from IDeckLink. */
+
+class IDeckLinkEncoderInput_v10_11 : public IUnknown
+{
+public:
+    virtual HRESULT DoesSupportVideoMode (/* in */ BMDDisplayMode displayMode, /* in */ BMDPixelFormat pixelFormat, /* in */ BMDVideoInputFlags flags, /* out */ BMDDisplayModeSupport_v10_11 *result, /* out */ IDeckLinkDisplayMode **resultDisplayMode) = 0;
+    virtual HRESULT GetDisplayModeIterator (/* out */ IDeckLinkDisplayModeIterator **iterator) = 0;
+
+    /* Video Input */
+
+    virtual HRESULT EnableVideoInput (/* in */ BMDDisplayMode displayMode, /* in */ BMDPixelFormat pixelFormat, /* in */ BMDVideoInputFlags flags) = 0;
+    virtual HRESULT DisableVideoInput (void) = 0;
+    virtual HRESULT GetAvailablePacketsCount (/* out */ uint32_t *availablePacketsCount) = 0;
+    virtual HRESULT SetMemoryAllocator (/* in */ IDeckLinkMemoryAllocator *theAllocator) = 0;
+
+    /* Audio Input */
+
+    virtual HRESULT EnableAudioInput (/* in */ BMDAudioFormat audioFormat, /* in */ BMDAudioSampleRate sampleRate, /* in */ BMDAudioSampleType sampleType, /* in */ uint32_t channelCount) = 0;
+    virtual HRESULT DisableAudioInput (void) = 0;
+    virtual HRESULT GetAvailableAudioSampleFrameCount (/* out */ uint32_t *availableSampleFrameCount) = 0;
+
+    /* Input Control */
+
+    virtual HRESULT StartStreams (void) = 0;
+    virtual HRESULT StopStreams (void) = 0;
+    virtual HRESULT PauseStreams (void) = 0;
+    virtual HRESULT FlushStreams (void) = 0;
+    virtual HRESULT SetCallback (/* in */ IDeckLinkEncoderInputCallback *theCallback) = 0;
+
+    /* Hardware Timing */
+
+    virtual HRESULT GetHardwareReferenceClock (/* in */ BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue *hardwareTime, /* out */ BMDTimeValue *timeInFrame, /* out */ BMDTimeValue *ticksPerFrame) = 0;
+
+protected:
+    virtual ~IDeckLinkEncoderInput_v10_11 () {} // call Release method to drop reference count
+};
+
+#endif /* defined(BMD_DECKLINKAPIVIDEOENCODERINPUT_v10_11_H) */
diff --git a/DeckLinkSDK/Linux/include/DeckLinkAPIVideoInput_v10_11.h b/DeckLinkSDK/Linux/include/DeckLinkAPIVideoInput_v10_11.h
new file mode 100644
index 0000000000..c4c3d70ef8
--- /dev/null
+++ b/DeckLinkSDK/Linux/include/DeckLinkAPIVideoInput_v10_11.h
@@ -0,0 +1,90 @@
+/* -LICENSE-START-
+** Copyright (c) 2017 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPIVIDEOINPUT_v10_11_H
+#define BMD_DECKLINKAPIVIDEOINPUT_v10_11_H
+
+#include "DeckLinkAPI.h"
+#include "DeckLinkAPI_v10_11.h"
+#include "DeckLinkAPIVideoInput_v11_5_1.h"
+
+// Type Declarations
+BMD_CONST REFIID IID_IDeckLinkInput_v10_11                               = /* AF22762B-DFAC-4846-AA79-FA8883560995 */ {0xAF,0x22,0x76,0x2B,0xDF,0xAC,0x48,0x46,0xAA,0x79,0xFA,0x88,0x83,0x56,0x09,0x95};
+
+/* Interface IDeckLinkInput_v10_11 - DeckLink input interface. */
+
+class IDeckLinkInput_v10_11 : public IUnknown
+{
+public:
+    virtual HRESULT DoesSupportVideoMode (/* in */ BMDDisplayMode displayMode, /* in */ BMDPixelFormat pixelFormat, /* in */ BMDVideoInputFlags flags, /* out */ BMDDisplayModeSupport_v10_11 *result, /* out */ IDeckLinkDisplayMode **resultDisplayMode) = 0;
+    virtual HRESULT GetDisplayModeIterator (/* out */ IDeckLinkDisplayModeIterator **iterator) = 0;
+
+    virtual HRESULT SetScreenPreviewCallback (/* in */ IDeckLinkScreenPreviewCallback *previewCallback) = 0;
+
+    /* Video Input */
+
+    virtual HRESULT EnableVideoInput (/* in */ BMDDisplayMode displayMode, /* in */ BMDPixelFormat pixelFormat, /* in */ BMDVideoInputFlags flags) = 0;
+    virtual HRESULT DisableVideoInput (void) = 0;
+    virtual HRESULT GetAvailableVideoFrameCount (/* out */ uint32_t *availableFrameCount) = 0;
+    virtual HRESULT SetVideoInputFrameMemoryAllocator (/* in */ IDeckLinkMemoryAllocator *theAllocator) = 0;
+
+    /* Audio Input */
+
+    virtual HRESULT EnableAudioInput (/* in */ BMDAudioSampleRate sampleRate, /* in */ BMDAudioSampleType sampleType, /* in */ uint32_t channelCount) = 0;
+    virtual HRESULT DisableAudioInput (void) = 0;
+    virtual HRESULT GetAvailableAudioSampleFrameCount (/* out */ uint32_t *availableSampleFrameCount) = 0;
+
+    /* Input Control */
+
+    virtual HRESULT StartStreams (void) = 0;
+    virtual HRESULT StopStreams (void) = 0;
+    virtual HRESULT PauseStreams (void) = 0;
+    virtual HRESULT FlushStreams (void) = 0;
+    virtual HRESULT SetCallback (/* in */ IDeckLinkInputCallback_v11_5_1 *theCallback) = 0;
+
+    /* Hardware Timing */
+
+    virtual HRESULT GetHardwareReferenceClock (/* in */ BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue *hardwareTime, /* out */ BMDTimeValue *timeInFrame, /* out */ BMDTimeValue *ticksPerFrame) = 0;
+
+protected:
+    virtual ~IDeckLinkInput_v10_11 () {} // call Release method to drop reference count
+};
+
+#endif /* defined(BMD_DECKLINKAPIVIDEOINPUT_v10_11_H) */
diff --git a/DeckLinkSDK/Linux/include/DeckLinkAPIVideoInput_v11_4.h b/DeckLinkSDK/Linux/include/DeckLinkAPIVideoInput_v11_4.h
new file mode 100644
index 0000000000..ade2250676
--- /dev/null
+++ b/DeckLinkSDK/Linux/include/DeckLinkAPIVideoInput_v11_4.h
@@ -0,0 +1,89 @@
+/* -LICENSE-START-
+** Copyright (c) 2019 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPIVIDEOINPUT_v11_4_H
+#define BMD_DECKLINKAPIVIDEOINPUT_v11_4_H
+
+#include "DeckLinkAPI.h"
+#include "DeckLinkAPIVideoInput_v11_5_1.h"
+
+// Type Declarations
+BMD_CONST REFIID IID_IDeckLinkInput_v11_4                               = /* 2A88CF76-F494-4216-A7EF-DC74EEB83882 */ { 0x2A,0x88,0xCF,0x76,0xF4,0x94,0x42,0x16,0xA7,0xEF,0xDC,0x74,0xEE,0xB8,0x38,0x82 };
+
+/* Interface IDeckLinkInput - Created by QueryInterface from IDeckLink. */
+
+class BMD_PUBLIC IDeckLinkInput_v11_4 : public IUnknown
+{
+public:
+    virtual HRESULT DoesSupportVideoMode (/* in */ BMDVideoConnection connection /* If a value of 0 is specified, the caller does not care about the connection */, /* in */ BMDDisplayMode requestedMode, /* in */ BMDPixelFormat requestedPixelFormat, /* in */ BMDSupportedVideoModeFlags flags, /* out */ bool* supported) = 0;
+    virtual HRESULT GetDisplayMode (/* in */ BMDDisplayMode displayMode, /* out */ IDeckLinkDisplayMode** resultDisplayMode) = 0;
+    virtual HRESULT GetDisplayModeIterator (/* out */ IDeckLinkDisplayModeIterator** iterator) = 0;
+    virtual HRESULT SetScreenPreviewCallback (/* in */ IDeckLinkScreenPreviewCallback* previewCallback) = 0;
+
+    /* Video Input */
+
+    virtual HRESULT EnableVideoInput (/* in */ BMDDisplayMode displayMode, /* in */ BMDPixelFormat pixelFormat, /* in */ BMDVideoInputFlags flags) = 0;
+    virtual HRESULT DisableVideoInput (void) = 0;
+    virtual HRESULT GetAvailableVideoFrameCount (/* out */ uint32_t* availableFrameCount) = 0;
+    virtual HRESULT SetVideoInputFrameMemoryAllocator (/* in */ IDeckLinkMemoryAllocator* theAllocator) = 0;
+
+    /* Audio Input */
+
+    virtual HRESULT EnableAudioInput (/* in */ BMDAudioSampleRate sampleRate, /* in */ BMDAudioSampleType sampleType, /* in */ uint32_t channelCount) = 0;
+    virtual HRESULT DisableAudioInput (void) = 0;
+    virtual HRESULT GetAvailableAudioSampleFrameCount (/* out */ uint32_t* availableSampleFrameCount) = 0;
+
+    /* Input Control */
+
+    virtual HRESULT StartStreams (void) = 0;
+    virtual HRESULT StopStreams (void) = 0;
+    virtual HRESULT PauseStreams (void) = 0;
+    virtual HRESULT FlushStreams (void) = 0;
+    virtual HRESULT SetCallback (/* in */ IDeckLinkInputCallback_v11_5_1* theCallback) = 0;
+
+    /* Hardware Timing */
+
+    virtual HRESULT GetHardwareReferenceClock (/* in */ BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue* hardwareTime, /* out */ BMDTimeValue* timeInFrame, /* out */ BMDTimeValue* ticksPerFrame) = 0;
+
+protected:
+    virtual ~IDeckLinkInput_v11_4 () {} // call Release method to drop reference count
+};
+
+#endif /* defined(BMD_DECKLINKAPIVIDEOINPUT_v11_4_H) */
diff --git a/DeckLinkSDK/Linux/include/DeckLinkAPIVideoInput_v11_5_1.h b/DeckLinkSDK/Linux/include/DeckLinkAPIVideoInput_v11_5_1.h
new file mode 100644
index 0000000000..51fb5172ac
--- /dev/null
+++ b/DeckLinkSDK/Linux/include/DeckLinkAPIVideoInput_v11_5_1.h
@@ -0,0 +1,102 @@
+/* -LICENSE-START-
+** Copyright (c) 2020 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPIVIDEOINPUT_v11_5_1_H
+#define BMD_DECKLINKAPIVIDEOINPUT_v11_5_1_H
+
+#include "DeckLinkAPI.h"
+
+// Type Declarations
+
+BMD_CONST REFIID IID_IDeckLinkInputCallback_v11_5_1                       = /* DD04E5EC-7415-42AB-AE4A-E80C4DFC044A */ { 0xDD, 0x04, 0xE5, 0xEC, 0x74, 0x15, 0x42, 0xAB, 0xAE, 0x4A, 0xE8, 0x0C, 0x4D, 0xFC, 0x04, 0x4A };
+BMD_CONST REFIID IID_IDeckLinkInput_v11_5_1                               = /* 9434C6E4-B15D-4B1C-979E-661E3DDCB4B9 */ { 0x94, 0x34, 0xC6, 0xE4, 0xB1, 0x5D, 0x4B, 0x1C, 0x97, 0x9E, 0x66, 0x1E, 0x3D, 0xDC, 0xB4, 0xB9 };
+
+/* Interface IDeckLinkInputCallback_v11_5_1 - Frame arrival callback. */
+
+class BMD_PUBLIC IDeckLinkInputCallback_v11_5_1 : public IUnknown
+{
+public:
+    virtual HRESULT VideoInputFormatChanged (/* in */ BMDVideoInputFormatChangedEvents notificationEvents, /* in */ IDeckLinkDisplayMode* newDisplayMode, /* in */ BMDDetectedVideoInputFormatFlags detectedSignalFlags) = 0;
+    virtual HRESULT VideoInputFrameArrived (/* in */ IDeckLinkVideoInputFrame* videoFrame, /* in */ IDeckLinkAudioInputPacket* audioPacket) = 0;
+
+protected:
+    virtual ~IDeckLinkInputCallback_v11_5_1 () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkInput_v11_5_1 - Created by QueryInterface from IDeckLink. */
+
+class BMD_PUBLIC IDeckLinkInput_v11_5_1 : public IUnknown
+{
+public:
+    virtual HRESULT DoesSupportVideoMode (/* in */ BMDVideoConnection connection /* If a value of bmdVideoConnectionUnspecified is specified, the caller does not care about the connection */, /* in */ BMDDisplayMode requestedMode, /* in */ BMDPixelFormat requestedPixelFormat, /* in */ BMDVideoInputConversionMode conversionMode, /* in */ BMDSupportedVideoModeFlags flags, /* out */ BMDDisplayMode* actualMode, /* out */ bool* supported) = 0;
+    virtual HRESULT GetDisplayMode (/* in */ BMDDisplayMode displayMode, /* out */ IDeckLinkDisplayMode** resultDisplayMode) = 0;
+    virtual HRESULT GetDisplayModeIterator (/* out */ IDeckLinkDisplayModeIterator** iterator) = 0;
+    virtual HRESULT SetScreenPreviewCallback (/* in */ IDeckLinkScreenPreviewCallback* previewCallback) = 0;
+
+    /* Video Input */
+
+    virtual HRESULT EnableVideoInput (/* in */ BMDDisplayMode displayMode, /* in */ BMDPixelFormat pixelFormat, /* in */ BMDVideoInputFlags flags) = 0;
+    virtual HRESULT DisableVideoInput (void) = 0;
+    virtual HRESULT GetAvailableVideoFrameCount (/* out */ uint32_t* availableFrameCount) = 0;
+    virtual HRESULT SetVideoInputFrameMemoryAllocator (/* in */ IDeckLinkMemoryAllocator* theAllocator) = 0;
+
+    /* Audio Input */
+
+    virtual HRESULT EnableAudioInput (/* in */ BMDAudioSampleRate sampleRate, /* in */ BMDAudioSampleType sampleType, /* in */ uint32_t channelCount) = 0;
+    virtual HRESULT DisableAudioInput (void) = 0;
+    virtual HRESULT GetAvailableAudioSampleFrameCount (/* out */ uint32_t* availableSampleFrameCount) = 0;
+
+    /* Input Control */
+
+    virtual HRESULT StartStreams (void) = 0;
+    virtual HRESULT StopStreams (void) = 0;
+    virtual HRESULT PauseStreams (void) = 0;
+    virtual HRESULT FlushStreams (void) = 0;
+    virtual HRESULT SetCallback (/* in */ IDeckLinkInputCallback_v11_5_1* theCallback) = 0;
+
+    /* Hardware Timing */
+
+    virtual HRESULT GetHardwareReferenceClock (/* in */ BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue* hardwareTime, /* out */ BMDTimeValue* timeInFrame, /* out */ BMDTimeValue* ticksPerFrame) = 0;
+
+protected:
+    virtual ~IDeckLinkInput_v11_5_1 () {} // call Release method to drop reference count
+};
+
+#endif /* defined(BMD_DECKLINKAPIVIDEOINPUT_v11_5_1_H) */
diff --git a/DeckLinkSDK/Linux/include/DeckLinkAPIVideoOutput_v10_11.h b/DeckLinkSDK/Linux/include/DeckLinkAPIVideoOutput_v10_11.h
new file mode 100644
index 0000000000..21d3d150d3
--- /dev/null
+++ b/DeckLinkSDK/Linux/include/DeckLinkAPIVideoOutput_v10_11.h
@@ -0,0 +1,107 @@
+/* -LICENSE-START-
+** Copyright (c) 2017 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPIVIDEOOUTPUT_v10_11_H
+#define BMD_DECKLINKAPIVIDEOOUTPUT_v10_11_H
+
+#include "DeckLinkAPI.h"
+#include "DeckLinkAPI_v10_11.h"
+
+// Type Declarations
+BMD_CONST REFIID IID_IDeckLinkOutput_v10_11                              = /* CC5C8A6E-3F2F-4B3A-87EA-FD78AF300564 */ {0xCC,0x5C,0x8A,0x6E,0x3F,0x2F,0x4B,0x3A,0x87,0xEA,0xFD,0x78,0xAF,0x30,0x05,0x64};
+
+/* Interface IDeckLinkOutput_v10_11 - DeckLink output interface. */
+
+class IDeckLinkOutput_v10_11 : public IUnknown
+{
+public:
+    virtual HRESULT DoesSupportVideoMode (/* in */ BMDDisplayMode displayMode, /* in */ BMDPixelFormat pixelFormat, /* in */ BMDVideoOutputFlags flags, /* out */ BMDDisplayModeSupport_v10_11 *result, /* out */ IDeckLinkDisplayMode **resultDisplayMode) = 0;
+    virtual HRESULT GetDisplayModeIterator (/* out */ IDeckLinkDisplayModeIterator **iterator) = 0;
+
+    virtual HRESULT SetScreenPreviewCallback (/* in */ IDeckLinkScreenPreviewCallback *previewCallback) = 0;
+
+    /* Video Output */
+
+    virtual HRESULT EnableVideoOutput (/* in */ BMDDisplayMode displayMode, /* in */ BMDVideoOutputFlags flags) = 0;
+    virtual HRESULT DisableVideoOutput (void) = 0;
+
+    virtual HRESULT SetVideoOutputFrameMemoryAllocator (/* in */ IDeckLinkMemoryAllocator *theAllocator) = 0;
+    virtual HRESULT CreateVideoFrame (/* in */ int32_t width, /* in */ int32_t height, /* in */ int32_t rowBytes, /* in */ BMDPixelFormat pixelFormat, /* in */ BMDFrameFlags flags, /* out */ IDeckLinkMutableVideoFrame **outFrame) = 0;
+    virtual HRESULT CreateAncillaryData (/* in */ BMDPixelFormat pixelFormat, /* out */ IDeckLinkVideoFrameAncillary **outBuffer) = 0;
+
+    virtual HRESULT DisplayVideoFrameSync (/* in */ IDeckLinkVideoFrame *theFrame) = 0;
+    virtual HRESULT ScheduleVideoFrame (/* in */ IDeckLinkVideoFrame *theFrame, /* in */ BMDTimeValue displayTime, /* in */ BMDTimeValue displayDuration, /* in */ BMDTimeScale timeScale) = 0;
+    virtual HRESULT SetScheduledFrameCompletionCallback (/* in */ IDeckLinkVideoOutputCallback *theCallback) = 0;
+    virtual HRESULT GetBufferedVideoFrameCount (/* out */ uint32_t *bufferedFrameCount) = 0;
+
+    /* Audio Output */
+
+    virtual HRESULT EnableAudioOutput (/* in */ BMDAudioSampleRate sampleRate, /* in */ BMDAudioSampleType sampleType, /* in */ uint32_t channelCount, /* in */ BMDAudioOutputStreamType streamType) = 0;
+    virtual HRESULT DisableAudioOutput (void) = 0;
+
+    virtual HRESULT WriteAudioSamplesSync (/* in */ void *buffer, /* in */ uint32_t sampleFrameCount, /* out */ uint32_t *sampleFramesWritten) = 0;
+
+    virtual HRESULT BeginAudioPreroll (void) = 0;
+    virtual HRESULT EndAudioPreroll (void) = 0;
+    virtual HRESULT ScheduleAudioSamples (/* in */ void *buffer, /* in */ uint32_t sampleFrameCount, /* in */ BMDTimeValue streamTime, /* in */ BMDTimeScale timeScale, /* out */ uint32_t *sampleFramesWritten) = 0;
+
+    virtual HRESULT GetBufferedAudioSampleFrameCount (/* out */ uint32_t *bufferedSampleFrameCount) = 0;
+    virtual HRESULT FlushBufferedAudioSamples (void) = 0;
+
+    virtual HRESULT SetAudioCallback (/* in */ IDeckLinkAudioOutputCallback *theCallback) = 0;
+
+    /* Output Control */
+
+    virtual HRESULT StartScheduledPlayback (/* in */ BMDTimeValue playbackStartTime, /* in */ BMDTimeScale timeScale, /* in */ double playbackSpeed) = 0;
+    virtual HRESULT StopScheduledPlayback (/* in */ BMDTimeValue stopPlaybackAtTime, /* out */ BMDTimeValue *actualStopTime, /* in */ BMDTimeScale timeScale) = 0;
+    virtual HRESULT IsScheduledPlaybackRunning (/* out */ bool *active) = 0;
+    virtual HRESULT GetScheduledStreamTime (/* in */ BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue *streamTime, /* out */ double *playbackSpeed) = 0;
+    virtual HRESULT GetReferenceStatus (/* out */ BMDReferenceStatus *referenceStatus) = 0;
+
+    /* Hardware Timing */
+
+    virtual HRESULT GetHardwareReferenceClock (/* in */ BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue *hardwareTime, /* out */ BMDTimeValue *timeInFrame, /* out */ BMDTimeValue *ticksPerFrame) = 0;
+    virtual HRESULT GetFrameCompletionReferenceTimestamp (/* in */ IDeckLinkVideoFrame *theFrame, /* in */ BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue *frameCompletionTimestamp) = 0;
+
+protected:
+    virtual ~IDeckLinkOutput_v10_11 () {} // call Release method to drop reference count
+};
+
+#endif /* defined(BMD_DECKLINKAPIVIDEOOUTPUT_v10_11_H) */
diff --git a/DeckLinkSDK/Linux/include/DeckLinkAPIVideoOutput_v11_4.h b/DeckLinkSDK/Linux/include/DeckLinkAPIVideoOutput_v11_4.h
new file mode 100644
index 0000000000..ba4b01f9ac
--- /dev/null
+++ b/DeckLinkSDK/Linux/include/DeckLinkAPIVideoOutput_v11_4.h
@@ -0,0 +1,100 @@
+/* -LICENSE-START-
+** Copyright (c) 2019 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPIVIDEOOUTPUT_v11_4_H
+#define BMD_DECKLINKAPIVIDEOOUTPUT_v11_4_H
+
+#include "DeckLinkAPI.h"
+
+// Type Declarations
+BMD_CONST REFIID IID_IDeckLinkOutput_v11_4                              = /* 065A0F6C-C508-4D0D-B919-F5EB0EBFC96B */ { 0x06,0x5A,0x0F,0x6C,0xC5,0x08,0x4D,0x0D,0xB9,0x19,0xF5,0xEB,0x0E,0xBF,0xC9,0x6B };
+
+/* Interface IDeckLinkOutput_v11_4 - Created by QueryInterface from IDeckLink. */
+
+class BMD_PUBLIC IDeckLinkOutput_v11_4 : public IUnknown
+{
+public:
+    virtual HRESULT DoesSupportVideoMode (/* in */ BMDVideoConnection connection /* If a value of 0 is specified, the caller does not care about the connection */, /* in */ BMDDisplayMode requestedMode, /* in */ BMDPixelFormat requestedPixelFormat, /* in */ BMDSupportedVideoModeFlags flags, /* out */ BMDDisplayMode* actualMode, /* out */ bool* supported) = 0;
+    virtual HRESULT GetDisplayMode (/* in */ BMDDisplayMode displayMode, /* out */ IDeckLinkDisplayMode** resultDisplayMode) = 0;
+    virtual HRESULT GetDisplayModeIterator (/* out */ IDeckLinkDisplayModeIterator** iterator) = 0;
+    virtual HRESULT SetScreenPreviewCallback (/* in */ IDeckLinkScreenPreviewCallback* previewCallback) = 0;
+
+    /* Video Output */
+
+    virtual HRESULT EnableVideoOutput (/* in */ BMDDisplayMode displayMode, /* in */ BMDVideoOutputFlags flags) = 0;
+    virtual HRESULT DisableVideoOutput (void) = 0;
+    virtual HRESULT SetVideoOutputFrameMemoryAllocator (/* in */ IDeckLinkMemoryAllocator* theAllocator) = 0;
+    virtual HRESULT CreateVideoFrame (/* in */ int32_t width, /* in */ int32_t height, /* in */ int32_t rowBytes, /* in */ BMDPixelFormat pixelFormat, /* in */ BMDFrameFlags flags, /* out */ IDeckLinkMutableVideoFrame** outFrame) = 0;
+    virtual HRESULT CreateAncillaryData (/* in */ BMDPixelFormat pixelFormat, /* out */ IDeckLinkVideoFrameAncillary** outBuffer) = 0;	// Use of IDeckLinkVideoFrameAncillaryPackets is preferred
+    virtual HRESULT DisplayVideoFrameSync (/* in */ IDeckLinkVideoFrame* theFrame) = 0;
+    virtual HRESULT ScheduleVideoFrame (/* in */ IDeckLinkVideoFrame* theFrame, /* in */ BMDTimeValue displayTime, /* in */ BMDTimeValue displayDuration, /* in */ BMDTimeScale timeScale) = 0;
+    virtual HRESULT SetScheduledFrameCompletionCallback (/* in */ IDeckLinkVideoOutputCallback* theCallback) = 0;
+    virtual HRESULT GetBufferedVideoFrameCount (/* out */ uint32_t* bufferedFrameCount) = 0;
+
+    /* Audio Output */
+
+    virtual HRESULT EnableAudioOutput (/* in */ BMDAudioSampleRate sampleRate, /* in */ BMDAudioSampleType sampleType, /* in */ uint32_t channelCount, /* in */ BMDAudioOutputStreamType streamType) = 0;
+    virtual HRESULT DisableAudioOutput (void) = 0;
+    virtual HRESULT WriteAudioSamplesSync (/* in */ void* buffer, /* in */ uint32_t sampleFrameCount, /* out */ uint32_t* sampleFramesWritten) = 0;
+    virtual HRESULT BeginAudioPreroll (void) = 0;
+    virtual HRESULT EndAudioPreroll (void) = 0;
+    virtual HRESULT ScheduleAudioSamples (/* in */ void* buffer, /* in */ uint32_t sampleFrameCount, /* in */ BMDTimeValue streamTime, /* in */ BMDTimeScale timeScale, /* out */ uint32_t* sampleFramesWritten) = 0;
+    virtual HRESULT GetBufferedAudioSampleFrameCount (/* out */ uint32_t* bufferedSampleFrameCount) = 0;
+    virtual HRESULT FlushBufferedAudioSamples (void) = 0;
+    virtual HRESULT SetAudioCallback (/* in */ IDeckLinkAudioOutputCallback* theCallback) = 0;
+
+    /* Output Control */
+
+    virtual HRESULT StartScheduledPlayback (/* in */ BMDTimeValue playbackStartTime, /* in */ BMDTimeScale timeScale, /* in */ double playbackSpeed) = 0;
+    virtual HRESULT StopScheduledPlayback (/* in */ BMDTimeValue stopPlaybackAtTime, /* out */ BMDTimeValue* actualStopTime, /* in */ BMDTimeScale timeScale) = 0;
+    virtual HRESULT IsScheduledPlaybackRunning (/* out */ bool* active) = 0;
+    virtual HRESULT GetScheduledStreamTime (/* in */ BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue* streamTime, /* out */ double* playbackSpeed) = 0;
+    virtual HRESULT GetReferenceStatus (/* out */ BMDReferenceStatus* referenceStatus) = 0;
+
+    /* Hardware Timing */
+
+    virtual HRESULT GetHardwareReferenceClock (/* in */ BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue* hardwareTime, /* out */ BMDTimeValue* timeInFrame, /* out */ BMDTimeValue* ticksPerFrame) = 0;
+    virtual HRESULT GetFrameCompletionReferenceTimestamp (/* in */ IDeckLinkVideoFrame* theFrame, /* in */ BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue* frameCompletionTimestamp) = 0;
+
+protected:
+    virtual ~IDeckLinkOutput_v11_4 () {} // call Release method to drop reference count
+};
+
+#endif /* defined(BMD_DECKLINKAPIVIDEOOUTPUT_v11_4_H) */
diff --git a/DeckLinkSDK/Linux/include/DeckLinkAPI_v10_11.h b/DeckLinkSDK/Linux/include/DeckLinkAPI_v10_11.h
new file mode 100644
index 0000000000..26d5117187
--- /dev/null
+++ b/DeckLinkSDK/Linux/include/DeckLinkAPI_v10_11.h
@@ -0,0 +1,134 @@
+/* -LICENSE-START-
+** Copyright (c) 2018 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPI_v10_11_H
+#define BMD_DECKLINKAPI_v10_11_H
+
+#include "DeckLinkAPI.h"
+
+// Interface ID Declarations
+
+BMD_CONST REFIID IID_IDeckLinkAttributes_v10_11                     = /* ABC11843-D966-44CB-96E2-A1CB5D3135C4 */ {0xAB,0xC1,0x18,0x43,0xD9,0x66,0x44,0xCB,0x96,0xE2,0xA1,0xCB,0x5D,0x31,0x35,0xC4};
+BMD_CONST REFIID IID_IDeckLinkNotification_v10_11                   = /* 0A1FB207-E215-441B-9B19-6FA1575946C5 */ {0x0A,0x1F,0xB2,0x07,0xE2,0x15,0x44,0x1B,0x9B,0x19,0x6F,0xA1,0x57,0x59,0x46,0xC5};
+
+/* Enum BMDDisplayModeSupport_v10_11 - Output mode supported flags */
+
+typedef uint32_t BMDDisplayModeSupport_v10_11;
+enum _BMDDisplayModeSupport_v10_11 {
+	bmdDisplayModeNotSupported_v10_11                               = 0,
+	bmdDisplayModeSupported_v10_11,
+	bmdDisplayModeSupportedWithConversion_v10_11
+};
+
+/* Enum BMDDuplexMode_v10_11 - Duplex for configurable ports */
+
+typedef uint32_t BMDDuplexMode_v10_11;
+enum _BMDDuplexMode_v10_11 {
+    bmdDuplexModeFull_v10_11                                        = /* 'fdup' */ 0x66647570,
+    bmdDuplexModeHalf_v10_11                                        = /* 'hdup' */ 0x68647570
+};
+
+/* Enum BMDDeckLinkAttributeID_v10_11 - DeckLink Attribute ID */
+
+enum _BMDDeckLinkAttributeID_v10_11 {
+
+    /* Flags */
+
+    BMDDeckLinkSupportsDuplexModeConfiguration_v10_11               = 'dupx',
+    BMDDeckLinkSupportsHDKeying_v10_11                              = 'keyh',
+
+    /* Integers */
+
+    BMDDeckLinkPairedDevicePersistentID_v10_11                      = 'ppid',
+    BMDDeckLinkSupportsFullDuplex_v10_11                            = 'fdup',
+};
+
+enum  _BMDDeckLinkStatusID_v10_11 {
+    bmdDeckLinkStatusDuplexMode_v10_11                             = 'dupx',
+};
+
+typedef uint32_t BMDDuplexStatus_v10_11;
+enum _BMDDuplexStatus_v10_11 {
+    bmdDuplexFullDuplex_v10_11                                      = 'fdup',
+    bmdDuplexHalfDuplex_v10_11                                      = 'hdup',
+    bmdDuplexSimplex_v10_11                                         = 'splx',
+    bmdDuplexInactive_v10_11                                        = 'inac',
+};
+
+#if defined(__cplusplus)
+
+/* Interface IDeckLinkAttributes_v10_11 - DeckLink Attribute interface */
+
+class BMD_PUBLIC IDeckLinkAttributes_v10_11 : public IUnknown
+{
+public:
+    virtual HRESULT GetFlag (/* in */ BMDDeckLinkAttributeID cfgID, /* out */ bool *value) = 0;
+    virtual HRESULT GetInt (/* in */ BMDDeckLinkAttributeID cfgID, /* out */ int64_t *value) = 0;
+    virtual HRESULT GetFloat (/* in */ BMDDeckLinkAttributeID cfgID, /* out */ double *value) = 0;
+    virtual HRESULT GetString (/* in */ BMDDeckLinkAttributeID cfgID, /* out */ const char **value) = 0;
+
+protected:
+    virtual ~IDeckLinkAttributes_v10_11 () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkNotification_v10_11 - DeckLink Notification interface */
+
+class BMD_PUBLIC IDeckLinkNotification_v10_11 : public IUnknown
+{
+public:
+    virtual HRESULT Subscribe (/* in */ BMDNotifications topic, /* in */ IDeckLinkNotificationCallback *theCallback) = 0;
+    virtual HRESULT Unsubscribe (/* in */ BMDNotifications topic, /* in */ IDeckLinkNotificationCallback *theCallback) = 0;
+};
+
+/* Functions */
+
+extern "C" {
+
+    BMD_PUBLIC IDeckLinkIterator* CreateDeckLinkIteratorInstance_v10_11 (void);
+    BMD_PUBLIC IDeckLinkDiscovery* CreateDeckLinkDiscoveryInstance_v10_11 (void);
+    BMD_PUBLIC IDeckLinkAPIInformation* CreateDeckLinkAPIInformationInstance_v10_11 (void);
+    BMD_PUBLIC IDeckLinkGLScreenPreviewHelper* CreateOpenGLScreenPreviewHelper_v10_11 (void);
+    BMD_PUBLIC IDeckLinkVideoConversion* CreateVideoConversionInstance_v10_11 (void);
+    BMD_PUBLIC IDeckLinkVideoFrameAncillaryPackets* CreateVideoFrameAncillaryPacketsInstance_v10_11 (void); // For use when creating a custom IDeckLinkVideoFrame without wrapping IDeckLinkOutput::CreateVideoFrame
+
+}
+
+#endif      // defined(__cplusplus)
+#endif /* defined(BMD_DECKLINKAPI_v10_11_H) */
diff --git a/DeckLinkSDK/Linux/include/DeckLinkAPI_v10_2.h b/DeckLinkSDK/Linux/include/DeckLinkAPI_v10_2.h
new file mode 100644
index 0000000000..d1633a01e8
--- /dev/null
+++ b/DeckLinkSDK/Linux/include/DeckLinkAPI_v10_2.h
@@ -0,0 +1,68 @@
+/* -LICENSE-START-
+** Copyright (c) 2014 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPI_v10_2_H
+#define BMD_DECKLINKAPI_v10_2_H
+
+#include "DeckLinkAPI.h"
+
+// Type Declarations
+
+/* Enum BMDDeckLinkConfigurationID - DeckLink Configuration ID */
+
+typedef uint32_t BMDDeckLinkConfigurationID_v10_2;
+enum  _BMDDeckLinkConfigurationID_v10_2 {
+    /* Video output flags */
+	
+    bmdDeckLinkConfig3GBpsVideoOutput_v10_2                      = '3gbs',
+};
+
+/* Enum BMDAudioConnection_v10_2 - Audio connection types */
+
+typedef uint32_t BMDAudioConnection_v10_2;
+enum _BMDAudioConnection_v10_2 {
+    bmdAudioConnectionEmbedded_v10_2                             = /* 'embd' */ 0x656D6264,
+    bmdAudioConnectionAESEBU_v10_2                               = /* 'aes ' */ 0x61657320,
+    bmdAudioConnectionAnalog_v10_2                               = /* 'anlg' */ 0x616E6C67,
+    bmdAudioConnectionAnalogXLR_v10_2                            = /* 'axlr' */ 0x61786C72,
+    bmdAudioConnectionAnalogRCA_v10_2                            = /* 'arca' */ 0x61726361
+};
+
+#endif /* defined(BMD_DECKLINKAPI_v10_2_H) */
diff --git a/DeckLinkSDK/Linux/include/DeckLinkAPI_v10_4.h b/DeckLinkSDK/Linux/include/DeckLinkAPI_v10_4.h
new file mode 100644
index 0000000000..fa5892dd0a
--- /dev/null
+++ b/DeckLinkSDK/Linux/include/DeckLinkAPI_v10_4.h
@@ -0,0 +1,58 @@
+/* -LICENSE-START-
+** Copyright (c) 2015 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPI_v10_4_H
+#define BMD_DECKLINKAPI_v10_4_H
+
+#include "DeckLinkAPI.h"
+
+// Type Declarations
+
+/* Enum BMDDeckLinkConfigurationID - DeckLink Configuration ID */
+
+typedef uint32_t BMDDeckLinkConfigurationID_v10_4;
+enum _BMDDeckLinkConfigurationID_v10_4 {
+
+    /* Video output flags */
+
+    bmdDeckLinkConfigSingleLinkVideoOutput_v10_4                       = /* 'sglo' */ 0x73676C6F,
+};
+
+#endif /* defined(BMD_DECKLINKAPI_v10_4_H) */
diff --git a/DeckLinkSDK/Linux/include/DeckLinkAPI_v10_5.h b/DeckLinkSDK/Linux/include/DeckLinkAPI_v10_5.h
new file mode 100644
index 0000000000..40ce330f09
--- /dev/null
+++ b/DeckLinkSDK/Linux/include/DeckLinkAPI_v10_5.h
@@ -0,0 +1,59 @@
+/* -LICENSE-START-
+** Copyright (c) 2015 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPI_v10_5_H
+#define BMD_DECKLINKAPI_v10_5_H
+
+#include "DeckLinkAPI.h"
+
+// Type Declarations
+
+/* Enum BMDDeckLinkAttributeID - DeckLink Attribute ID */
+
+typedef uint32_t BMDDeckLinkAttributeID_v10_5;
+enum _BMDDeckLinkAttributeID_v10_5 {
+
+    /* Integers */
+
+    BMDDeckLinkDeviceBusyState_v10_5                             = /* 'dbst' */ 0x64627374,
+};
+
+#endif /* defined(BMD_DECKLINKAPI_v10_5_H) */
+
diff --git a/DeckLinkSDK/Linux/include/DeckLinkAPI_v10_6.h b/DeckLinkSDK/Linux/include/DeckLinkAPI_v10_6.h
new file mode 100644
index 0000000000..2bc306c6b7
--- /dev/null
+++ b/DeckLinkSDK/Linux/include/DeckLinkAPI_v10_6.h
@@ -0,0 +1,63 @@
+/* -LICENSE-START-
+** Copyright (c) 2016 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPI_v10_6_H
+#define BMD_DECKLINKAPI_v10_6_H
+
+#include "DeckLinkAPI.h"
+
+// Type Declarations
+
+/* Enum BMDDeckLinkAttributeID - DeckLink Attribute ID */
+
+typedef uint32_t BMDDeckLinkAttributeID_c10_6;
+enum _BMDDeckLinkAttributeID_v10_6 {
+
+    /* Flags */
+
+    BMDDeckLinkSupportsDesktopDisplay_v10_6                      = /* 'extd' */ 0x65787464,
+};
+
+typedef uint32_t BMDIdleVideoOutputOperation_v10_6;
+enum _BMDIdleVideoOutputOperation_v10_6 {
+    bmdIdleVideoOutputDesktop_v10_6                              = /* 'desk' */ 0x6465736B
+};
+
+#endif /* defined(BMD_DECKLINKAPI_v10_6_H) */
diff --git a/DeckLinkSDK/Linux/include/DeckLinkAPI_v10_9.h b/DeckLinkSDK/Linux/include/DeckLinkAPI_v10_9.h
new file mode 100644
index 0000000000..8b6b4b208f
--- /dev/null
+++ b/DeckLinkSDK/Linux/include/DeckLinkAPI_v10_9.h
@@ -0,0 +1,58 @@
+/* -LICENSE-START-
+** Copyright (c) 2017 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPI_v10_9_H
+#define BMD_DECKLINKAPI_v10_9_H
+
+#include "DeckLinkAPI.h"
+
+// Type Declarations
+
+/* Enum BMDDeckLinkAttributeID - DeckLink Attribute ID */
+
+typedef uint32_t BMDDeckLinkConfigurationID_v10_9;
+enum _BMDDeckLinkConfigurationID_v10_9 {
+
+    /* Flags */
+
+    bmdDeckLinkConfig1080pNotPsF_v10_9                      = 'fpro',
+};
+
+#endif /* defined(BMD_DECKLINKAPI_v10_9_H) */
diff --git a/DeckLinkSDK/Linux/include/DeckLinkAPI_v11_5.h b/DeckLinkSDK/Linux/include/DeckLinkAPI_v11_5.h
new file mode 100644
index 0000000000..30578e5df1
--- /dev/null
+++ b/DeckLinkSDK/Linux/include/DeckLinkAPI_v11_5.h
@@ -0,0 +1,113 @@
+/* -LICENSE-START-
+** Copyright (c) 2020 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPI_v11_5_H
+#define BMD_DECKLINKAPI_v11_5_H
+
+#include "DeckLinkAPI.h"
+
+BMD_CONST REFIID IID_IDeckLinkVideoFrameMetadataExtensions_v11_5	= /* D5973DC9-6432-46D0-8F0B-2496F8A1238F */ {0xD5,0x97,0x3D,0xC9,0x64,0x32,0x46,0xD0,0x8F,0x0B,0x24,0x96,0xF8,0xA1,0x23,0x8F};
+
+/* Enum BMDDeckLinkFrameMetadataID - DeckLink Frame Metadata ID */
+
+typedef uint32_t BMDDeckLinkFrameMetadataID_v11_5;
+enum _BMDDeckLinkFrameMetadataID_v11_5 {
+    bmdDeckLinkFrameMetadataCintelFilmType_v11_5                       = /* 'cfty' */ 0x63667479,	// Current film type
+    bmdDeckLinkFrameMetadataCintelFilmGauge_v11_5                      = /* 'cfga' */ 0x63666761,	// Current film gauge
+    bmdDeckLinkFrameMetadataCintelKeykodeLow_v11_5                     = /* 'ckkl' */ 0x636B6B6C,	// Raw keykode value - low 64 bits
+    bmdDeckLinkFrameMetadataCintelKeykodeHigh_v11_5                    = /* 'ckkh' */ 0x636B6B68,	// Raw keykode value - high 64 bits
+    bmdDeckLinkFrameMetadataCintelTile1Size_v11_5                      = /* 'ct1s' */ 0x63743173,	// Size in bytes of compressed raw tile 1
+    bmdDeckLinkFrameMetadataCintelTile2Size_v11_5                      = /* 'ct2s' */ 0x63743273,	// Size in bytes of compressed raw tile 2
+    bmdDeckLinkFrameMetadataCintelTile3Size_v11_5                      = /* 'ct3s' */ 0x63743373,	// Size in bytes of compressed raw tile 3
+    bmdDeckLinkFrameMetadataCintelTile4Size_v11_5                      = /* 'ct4s' */ 0x63743473,	// Size in bytes of compressed raw tile 4
+    bmdDeckLinkFrameMetadataCintelImageWidth_v11_5                     = /* 'IWPx' */ 0x49575078,	// Width in pixels of image
+    bmdDeckLinkFrameMetadataCintelImageHeight_v11_5                    = /* 'IHPx' */ 0x49485078,	// Height in pixels of image
+    bmdDeckLinkFrameMetadataCintelLinearMaskingRedInRed_v11_5          = /* 'mrir' */ 0x6D726972,	// Red in red linear masking parameter
+    bmdDeckLinkFrameMetadataCintelLinearMaskingGreenInRed_v11_5        = /* 'mgir' */ 0x6D676972,	// Green in red linear masking parameter
+    bmdDeckLinkFrameMetadataCintelLinearMaskingBlueInRed_v11_5         = /* 'mbir' */ 0x6D626972,	// Blue in red linear masking parameter
+    bmdDeckLinkFrameMetadataCintelLinearMaskingRedInGreen_v11_5        = /* 'mrig' */ 0x6D726967,	// Red in green linear masking parameter
+    bmdDeckLinkFrameMetadataCintelLinearMaskingGreenInGreen_v11_5      = /* 'mgig' */ 0x6D676967,	// Green in green linear masking parameter
+    bmdDeckLinkFrameMetadataCintelLinearMaskingBlueInGreen_v11_5       = /* 'mbig' */ 0x6D626967,	// Blue in green linear masking parameter
+    bmdDeckLinkFrameMetadataCintelLinearMaskingRedInBlue_v11_5         = /* 'mrib' */ 0x6D726962,	// Red in blue linear masking parameter
+    bmdDeckLinkFrameMetadataCintelLinearMaskingGreenInBlue_v11_5       = /* 'mgib' */ 0x6D676962,	// Green in blue linear masking parameter
+    bmdDeckLinkFrameMetadataCintelLinearMaskingBlueInBlue_v11_5        = /* 'mbib' */ 0x6D626962,	// Blue in blue linear masking parameter
+    bmdDeckLinkFrameMetadataCintelLogMaskingRedInRed_v11_5             = /* 'mlrr' */ 0x6D6C7272,	// Red in red log masking parameter
+    bmdDeckLinkFrameMetadataCintelLogMaskingGreenInRed_v11_5           = /* 'mlgr' */ 0x6D6C6772,	// Green in red log masking parameter
+    bmdDeckLinkFrameMetadataCintelLogMaskingBlueInRed_v11_5            = /* 'mlbr' */ 0x6D6C6272,	// Blue in red log masking parameter
+    bmdDeckLinkFrameMetadataCintelLogMaskingRedInGreen_v11_5           = /* 'mlrg' */ 0x6D6C7267,	// Red in green log masking parameter
+    bmdDeckLinkFrameMetadataCintelLogMaskingGreenInGreen_v11_5         = /* 'mlgg' */ 0x6D6C6767,	// Green in green log masking parameter
+    bmdDeckLinkFrameMetadataCintelLogMaskingBlueInGreen_v11_5          = /* 'mlbg' */ 0x6D6C6267,	// Blue in green log masking parameter
+    bmdDeckLinkFrameMetadataCintelLogMaskingRedInBlue_v11_5            = /* 'mlrb' */ 0x6D6C7262,	// Red in blue log masking parameter
+    bmdDeckLinkFrameMetadataCintelLogMaskingGreenInBlue_v11_5          = /* 'mlgb' */ 0x6D6C6762,	// Green in blue log masking parameter
+    bmdDeckLinkFrameMetadataCintelLogMaskingBlueInBlue_v11_5           = /* 'mlbb' */ 0x6D6C6262,	// Blue in blue log masking parameter
+    bmdDeckLinkFrameMetadataCintelFilmFrameRate_v11_5                  = /* 'cffr' */ 0x63666672,	// Film frame rate
+    bmdDeckLinkFrameMetadataCintelOffsetToApplyHorizontal_v11_5        = /* 'otah' */ 0x6F746168,	// Horizontal offset (pixels) to be applied to image
+    bmdDeckLinkFrameMetadataCintelOffsetToApplyVertical_v11_5          = /* 'otav' */ 0x6F746176,	// Vertical offset (pixels) to be applied to image
+    bmdDeckLinkFrameMetadataCintelGainRed_v11_5                        = /* 'LfRd' */ 0x4C665264,	// Red gain parameter to apply after log
+    bmdDeckLinkFrameMetadataCintelGainGreen_v11_5                      = /* 'LfGr' */ 0x4C664772,	// Green gain parameter to apply after log
+    bmdDeckLinkFrameMetadataCintelGainBlue_v11_5                       = /* 'LfBl' */ 0x4C66426C,	// Blue gain parameter to apply after log
+    bmdDeckLinkFrameMetadataCintelLiftRed_v11_5                        = /* 'GnRd' */ 0x476E5264,	// Red lift parameter to apply after log and gain
+    bmdDeckLinkFrameMetadataCintelLiftGreen_v11_5                      = /* 'GnGr' */ 0x476E4772,	// Green lift parameter to apply after log and gain
+    bmdDeckLinkFrameMetadataCintelLiftBlue_v11_5                       = /* 'GnBl' */ 0x476E426C,	// Blue lift parameter to apply after log and gain
+    bmdDeckLinkFrameMetadataCintelHDRGainRed_v11_5                     = /* 'HGRd' */ 0x48475264,	// Red gain parameter to apply to linear data for HDR Combination
+    bmdDeckLinkFrameMetadataCintelHDRGainGreen_v11_5                   = /* 'HGGr' */ 0x48474772,	// Green gain parameter to apply to linear data for HDR Combination
+    bmdDeckLinkFrameMetadataCintelHDRGainBlue_v11_5                    = /* 'HGBl' */ 0x4847426C,	// Blue gain parameter to apply to linear data for HDR Combination
+	bmdDeckLinkFrameMetadataCintel16mmCropRequired_v11_5               = /* 'c16c' */ 0x63313663,	// The image should be cropped to 16mm size
+    bmdDeckLinkFrameMetadataCintelInversionRequired_v11_5              = /* 'cinv' */ 0x63696E76,	// The image should be colour inverted
+    bmdDeckLinkFrameMetadataCintelFlipRequired_v11_5                   = /* 'cflr' */ 0x63666C72,	// The image should be flipped horizontally
+    bmdDeckLinkFrameMetadataCintelFocusAssistEnabled_v11_5             = /* 'cfae' */ 0x63666165,	// Focus Assist is currently enabled
+    bmdDeckLinkFrameMetadataCintelKeykodeIsInterpolated_v11_5          = /* 'kkii' */ 0x6B6B6969	// The keykode for this frame is interpolated from nearby keykodes
+};
+
+/* Interface IDeckLinkVideoFrameMetadataExtensions - Optional interface implemented on IDeckLinkVideoFrame to support frame metadata such as HDMI HDR information */
+
+class BMD_PUBLIC IDeckLinkVideoFrameMetadataExtensions_v11_5 : public IUnknown
+{
+public:
+    virtual HRESULT GetInt (/* in */ BMDDeckLinkFrameMetadataID_v11_5 metadataID, /* out */ int64_t *value) = 0;
+    virtual HRESULT GetFloat (/* in */ BMDDeckLinkFrameMetadataID_v11_5 metadataID, /* out */ double *value) = 0;
+    virtual HRESULT GetFlag (/* in */ BMDDeckLinkFrameMetadataID_v11_5 metadataID, /* out */ bool* value) = 0;
+    virtual HRESULT GetString (/* in */ BMDDeckLinkFrameMetadataID_v11_5 metadataID, /* out */ const char **value) = 0;
+
+protected:
+    virtual ~IDeckLinkVideoFrameMetadataExtensions_v11_5 () {} // call Release method to drop reference count
+};
+
+#endif /* defined(BMD_DECKLINKAPI_v11_5_H) */
diff --git a/DeckLinkSDK/Linux/include/DeckLinkAPI_v11_5_1.h b/DeckLinkSDK/Linux/include/DeckLinkAPI_v11_5_1.h
new file mode 100644
index 0000000000..42bc74fcc2
--- /dev/null
+++ b/DeckLinkSDK/Linux/include/DeckLinkAPI_v11_5_1.h
@@ -0,0 +1,57 @@
+/* -LICENSE-START-
+** Copyright (c) 2020 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPI_v11_5_1_H
+#define BMD_DECKLINKAPI_v11_5_1_H
+
+#include "DeckLinkAPI.h"
+
+/* Enum BMDDeckLinkStatusID - DeckLink Status ID */
+
+typedef uint32_t BMDDeckLinkStatusID_v11_5_1;
+enum _BMDDeckLinkStatusID_v11_5_1 {
+
+    /* Video output flags */
+
+	bmdDeckLinkStatusDetectedVideoInputFlags_v11_5_1                     = /* 'dvif' */ 0x64766966,
+
+};
+
+#endif /* defined(BMD_DECKLINKAPI_v11_5_1_H) */
diff --git a/DeckLinkSDK/Linux/include/DeckLinkAPI_v7_1.h b/DeckLinkSDK/Linux/include/DeckLinkAPI_v7_1.h
new file mode 100644
index 0000000000..3c59736c2a
--- /dev/null
+++ b/DeckLinkSDK/Linux/include/DeckLinkAPI_v7_1.h
@@ -0,0 +1,212 @@
+/* -LICENSE-START-
+** Copyright (c) 2009 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+/* DeckLinkAPI_v7_1.h */
+
+#ifndef __DeckLink_API_v7_1_h__
+#define __DeckLink_API_v7_1_h__
+
+#include "DeckLinkAPI.h"
+#include "DeckLinkAPI_v10_11.h"
+
+// "B28131B6-59AC-4857-B5AC-CD75D5883E2F"
+#define IID_IDeckLinkDisplayModeIterator_v7_1	(REFIID){0xB2,0x81,0x31,0xB6,0x59,0xAC,0x48,0x57,0xB5,0xAC,0xCD,0x75,0xD5,0x88,0x3E,0x2F}
+
+// "AF0CD6D5-8376-435E-8433-54F9DD530AC3"
+#define IID_IDeckLinkDisplayMode_v7_1			(REFIID){0xAF,0x0C,0xD6,0xD5,0x83,0x76,0x43,0x5E,0x84,0x33,0x54,0xF9,0xDD,0x53,0x0A,0xC3}
+
+// "EBD01AFA-E4B0-49C6-A01D-EDB9D1B55FD9"
+#define IID_IDeckLinkVideoOutputCallback_v7_1	(REFIID){0xEB,0xD0,0x1A,0xFA,0xE4,0xB0,0x49,0xC6,0xA0,0x1D,0xED,0xB9,0xD1,0xB5,0x5F,0xD9}
+
+// "7F94F328-5ED4-4E9F-9729-76A86BDC99CC"
+#define IID_IDeckLinkInputCallback_v7_1			(REFIID){0x7F,0x94,0xF3,0x28,0x5E,0xD4,0x4E,0x9F,0x97,0x29,0x76,0xA8,0x6B,0xDC,0x99,0xCC}
+
+// "AE5B3E9B-4E1E-4535-B6E8-480FF52F6CE5"
+#define IID_IDeckLinkOutput_v7_1				(REFIID){0xAE,0x5B,0x3E,0x9B,0x4E,0x1E,0x45,0x35,0xB6,0xE8,0x48,0x0F,0xF5,0x2F,0x6C,0xE5}
+
+// "2B54EDEF-5B32-429F-BA11-BB990596EACD"
+#define IID_IDeckLinkInput_v7_1					(REFIID){0x2B,0x54,0xED,0xEF,0x5B,0x32,0x42,0x9F,0xBA,0x11,0xBB,0x99,0x05,0x96,0xEA,0xCD}
+
+// "333F3A10-8C2D-43CF-B79D-46560FEEA1CE"
+#define IID_IDeckLinkVideoFrame_v7_1			(REFIID){0x33,0x3F,0x3A,0x10,0x8C,0x2D,0x43,0xCF,0xB7,0x9D,0x46,0x56,0x0F,0xEE,0xA1,0xCE}
+
+// "C8B41D95-8848-40EE-9B37-6E3417FB114B"
+#define IID_IDeckLinkVideoInputFrame_v7_1		(REFIID){0xC8,0xB4,0x1D,0x95,0x88,0x48,0x40,0xEE,0x9B,0x37,0x6E,0x34,0x17,0xFB,0x11,0x4B}
+
+// "C86DE4F6-A29F-42E3-AB3A-1363E29F0788"
+#define IID_IDeckLinkAudioInputPacket_v7_1		(REFIID){0xC8,0x6D,0xE4,0xF6,0xA2,0x9F,0x42,0xE3,0xAB,0x3A,0x13,0x63,0xE2,0x9F,0x07,0x88}
+
+#if defined(__cplusplus)
+
+class IDeckLinkDisplayModeIterator_v7_1;
+class IDeckLinkDisplayMode_v7_1;
+class IDeckLinkVideoFrame_v7_1;
+class IDeckLinkVideoInputFrame_v7_1;
+class IDeckLinkAudioInputPacket_v7_1;
+
+class BMD_PUBLIC IDeckLinkDisplayModeIterator_v7_1 : public IUnknown
+{
+public:
+	virtual	HRESULT	STDMETHODCALLTYPE	Next (IDeckLinkDisplayMode_v7_1* *deckLinkDisplayMode) = 0;
+};
+
+
+class BMD_PUBLIC IDeckLinkDisplayMode_v7_1 : public IUnknown
+{
+public:
+	virtual	HRESULT			STDMETHODCALLTYPE	GetName (const char **name) = 0;
+	virtual	BMDDisplayMode	STDMETHODCALLTYPE	GetDisplayMode () = 0;
+	virtual	long			STDMETHODCALLTYPE	GetWidth () = 0;
+	virtual	long			STDMETHODCALLTYPE	GetHeight () = 0;
+	virtual	HRESULT			STDMETHODCALLTYPE	GetFrameRate (BMDTimeValue *frameDuration, BMDTimeScale *timeScale) = 0;
+};
+
+class BMD_PUBLIC IDeckLinkVideoOutputCallback_v7_1 : public IUnknown
+{
+public:
+	virtual HRESULT STDMETHODCALLTYPE	ScheduledFrameCompleted (IDeckLinkVideoFrame_v7_1* completedFrame, BMDOutputFrameCompletionResult result) = 0;
+};
+
+class BMD_PUBLIC IDeckLinkInputCallback_v7_1 : public IUnknown
+{
+public:
+	virtual HRESULT STDMETHODCALLTYPE	VideoInputFrameArrived (IDeckLinkVideoInputFrame_v7_1* videoFrame, IDeckLinkAudioInputPacket_v7_1* audioPacket) = 0;
+};
+
+// IDeckLinkOutput_v7_1.  Created by QueryInterface from IDeckLink.
+class BMD_PUBLIC IDeckLinkOutput_v7_1 : public IUnknown
+{
+public:
+	// Display mode predicates
+	virtual	HRESULT	STDMETHODCALLTYPE	DoesSupportVideoMode (BMDDisplayMode displayMode, BMDPixelFormat pixelFormat, BMDDisplayModeSupport_v10_11 *result) = 0;
+	virtual HRESULT	STDMETHODCALLTYPE	GetDisplayModeIterator (IDeckLinkDisplayModeIterator_v7_1* *iterator) = 0;
+	
+	
+	// Video output
+	virtual HRESULT STDMETHODCALLTYPE	EnableVideoOutput (BMDDisplayMode displayMode) = 0;
+	virtual HRESULT STDMETHODCALLTYPE	DisableVideoOutput () = 0;
+	
+	virtual HRESULT STDMETHODCALLTYPE	SetVideoOutputFrameMemoryAllocator (IDeckLinkMemoryAllocator* theAllocator) = 0;
+	virtual HRESULT STDMETHODCALLTYPE	CreateVideoFrame (int32_t width, int32_t height, int32_t rowBytes, BMDPixelFormat pixelFormat, BMDFrameFlags flags, IDeckLinkVideoFrame_v7_1* *outFrame) = 0;
+	virtual HRESULT STDMETHODCALLTYPE	CreateVideoFrameFromBuffer (void* buffer, int32_t width, int32_t height, int32_t rowBytes, BMDPixelFormat pixelFormat, BMDFrameFlags flags, IDeckLinkVideoFrame_v7_1* *outFrame) = 0;
+	
+	virtual HRESULT STDMETHODCALLTYPE	DisplayVideoFrameSync (IDeckLinkVideoFrame_v7_1* theFrame) = 0;
+	virtual HRESULT STDMETHODCALLTYPE	ScheduleVideoFrame (IDeckLinkVideoFrame_v7_1* theFrame, BMDTimeValue displayTime, BMDTimeValue displayDuration, BMDTimeScale timeScale) = 0;
+	virtual HRESULT STDMETHODCALLTYPE	SetScheduledFrameCompletionCallback (IDeckLinkVideoOutputCallback_v7_1* theCallback) = 0;
+	
+	
+	// Audio output
+	virtual HRESULT STDMETHODCALLTYPE	EnableAudioOutput (BMDAudioSampleRate sampleRate, BMDAudioSampleType sampleType, uint32_t channelCount) = 0;
+	virtual HRESULT STDMETHODCALLTYPE	DisableAudioOutput () = 0;
+	
+	virtual HRESULT STDMETHODCALLTYPE	WriteAudioSamplesSync (void* buffer, uint32_t sampleFrameCount, uint32_t *sampleFramesWritten) = 0;
+	
+	virtual HRESULT STDMETHODCALLTYPE	BeginAudioPreroll () = 0;
+	virtual HRESULT STDMETHODCALLTYPE	EndAudioPreroll () = 0;
+	virtual HRESULT STDMETHODCALLTYPE	ScheduleAudioSamples (void* buffer, uint32_t sampleFrameCount, BMDTimeValue streamTime, BMDTimeScale timeScale, uint32_t *sampleFramesWritten) = 0;
+	
+	virtual HRESULT STDMETHODCALLTYPE	GetBufferedAudioSampleFrameCount (uint32_t *bufferedSampleCount) = 0;
+	virtual HRESULT STDMETHODCALLTYPE	FlushBufferedAudioSamples () = 0;
+	
+	virtual HRESULT STDMETHODCALLTYPE	SetAudioCallback (IDeckLinkAudioOutputCallback* theCallback) = 0;
+	
+	
+	// Output control
+	virtual HRESULT STDMETHODCALLTYPE	StartScheduledPlayback (BMDTimeValue playbackStartTime, BMDTimeScale timeScale, double playbackSpeed) = 0;
+	virtual HRESULT STDMETHODCALLTYPE	StopScheduledPlayback (BMDTimeValue stopPlaybackAtTime, BMDTimeValue *actualStopTime, BMDTimeScale timeScale) = 0;
+	virtual HRESULT STDMETHODCALLTYPE	GetHardwareReferenceClock (BMDTimeScale desiredTimeScale, BMDTimeValue *elapsedTimeSinceSchedulerBegan) = 0;
+};
+
+// IDeckLinkInput_v7_1.  Created by QueryInterface from IDeckLink.
+class BMD_PUBLIC IDeckLinkInput_v7_1 : public IUnknown
+{
+public:
+	virtual	HRESULT	STDMETHODCALLTYPE	DoesSupportVideoMode (BMDDisplayMode displayMode, BMDPixelFormat pixelFormat, BMDDisplayModeSupport_v10_11 *result) = 0;
+	virtual HRESULT	STDMETHODCALLTYPE	GetDisplayModeIterator (IDeckLinkDisplayModeIterator_v7_1 **iterator) = 0;
+	
+	// Video input
+	virtual HRESULT STDMETHODCALLTYPE	EnableVideoInput (BMDDisplayMode displayMode, BMDPixelFormat pixelFormat, BMDVideoInputFlags flags) = 0;
+	virtual HRESULT STDMETHODCALLTYPE	DisableVideoInput () = 0;
+	
+	// Audio input
+	virtual HRESULT STDMETHODCALLTYPE	EnableAudioInput (BMDAudioSampleRate sampleRate, BMDAudioSampleType sampleType, uint32_t channelCount) = 0;
+	virtual HRESULT STDMETHODCALLTYPE	DisableAudioInput () = 0;
+	virtual HRESULT STDMETHODCALLTYPE	ReadAudioSamples (void* buffer, uint32_t sampleFrameCount, uint32_t *sampleFramesRead, BMDTimeValue *audioPacketTime, BMDTimeScale timeScale) = 0;
+	virtual HRESULT STDMETHODCALLTYPE	GetBufferedAudioSampleFrameCount (uint32_t *bufferedSampleCount) = 0;
+	
+
+	virtual HRESULT	STDMETHODCALLTYPE	StartStreams () = 0;
+	virtual HRESULT	STDMETHODCALLTYPE	StopStreams () = 0;
+	virtual HRESULT	STDMETHODCALLTYPE	PauseStreams () = 0;
+	virtual HRESULT STDMETHODCALLTYPE	SetCallback (IDeckLinkInputCallback_v7_1* theCallback) = 0;
+};
+
+// IDeckLinkVideoFrame_v7_1.  Created by IDeckLinkOutput::CreateVideoFrame.
+class BMD_PUBLIC IDeckLinkVideoFrame_v7_1 : public IUnknown
+{
+public:
+	virtual long STDMETHODCALLTYPE					GetWidth () = 0;
+	virtual long STDMETHODCALLTYPE					GetHeight () = 0;
+	virtual long STDMETHODCALLTYPE					GetRowBytes () = 0;
+	virtual BMDPixelFormat STDMETHODCALLTYPE		GetPixelFormat () = 0;
+	virtual BMDFrameFlags STDMETHODCALLTYPE			GetFlags () = 0;
+	virtual HRESULT STDMETHODCALLTYPE				GetBytes (void* *buffer) = 0;
+};
+
+// IDeckLinkVideoInputFrame_v7_1.  Provided by the IDeckLinkInput_v7_1 frame arrival callback.
+class BMD_PUBLIC IDeckLinkVideoInputFrame_v7_1 : public IDeckLinkVideoFrame_v7_1
+{
+public:
+	virtual HRESULT STDMETHODCALLTYPE			GetFrameTime (BMDTimeValue *frameTime, BMDTimeValue *frameDuration, BMDTimeScale timeScale) = 0;
+};
+
+// IDeckLinkAudioInputPacket_v7_1.  Provided by the IDeckLinkInput_v7_1 callback.
+class BMD_PUBLIC IDeckLinkAudioInputPacket_v7_1 : public IUnknown
+{
+public:
+	virtual long STDMETHODCALLTYPE				GetSampleCount () = 0;
+	virtual HRESULT STDMETHODCALLTYPE			GetBytes (void* *buffer) = 0;
+	
+	virtual HRESULT STDMETHODCALLTYPE			GetAudioPacketTime (BMDTimeValue *packetTime, BMDTimeScale timeScale) = 0;
+};
+
+#endif		// defined(__cplusplus)
+
+#endif		// __DeckLink_API_v7_1_h__
+
diff --git a/DeckLinkSDK/Linux/include/DeckLinkAPI_v7_3.h b/DeckLinkSDK/Linux/include/DeckLinkAPI_v7_3.h
new file mode 100644
index 0000000000..37e0464db5
--- /dev/null
+++ b/DeckLinkSDK/Linux/include/DeckLinkAPI_v7_3.h
@@ -0,0 +1,187 @@
+/* -LICENSE-START-
+** Copyright (c) 2009 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+/* DeckLinkAPI_v7_3.h */
+
+#ifndef __DeckLink_API_v7_3_h__
+#define __DeckLink_API_v7_3_h__
+
+#include "DeckLinkAPI.h"
+#include "DeckLinkAPI_v7_6.h"
+#include "DeckLinkAPI_v10_11.h"
+
+/* Interface ID Declarations */
+
+#define IID_IDeckLinkInputCallback_v7_3                  /* FD6F311D-4D00-444B-9ED4-1F25B5730AD0 */ (REFIID){0xFD,0x6F,0x31,0x1D,0x4D,0x00,0x44,0x4B,0x9E,0xD4,0x1F,0x25,0xB5,0x73,0x0A,0xD0}
+#define IID_IDeckLinkOutput_v7_3                         /* 271C65E3-C323-4344-A30F-D908BCB20AA3 */ (REFIID){0x27,0x1C,0x65,0xE3,0xC3,0x23,0x43,0x44,0xA3,0x0F,0xD9,0x08,0xBC,0xB2,0x0A,0xA3}
+#define IID_IDeckLinkInput_v7_3                          /* 4973F012-9925-458C-871C-18774CDBBECB */ (REFIID){0x49,0x73,0xF0,0x12,0x99,0x25,0x45,0x8C,0x87,0x1C,0x18,0x77,0x4C,0xDB,0xBE,0xCB}
+#define IID_IDeckLinkVideoInputFrame_v7_3                /* CF317790-2894-11DE-8C30-0800200C9A66 */ (REFIID){0xCF,0x31,0x77,0x90,0x28,0x94,0x11,0xDE,0x8C,0x30,0x08,0x00,0x20,0x0C,0x9A,0x66}
+
+/* End Interface ID Declarations */
+
+#if defined(__cplusplus)
+
+/* Forward Declarations */
+
+class IDeckLinkVideoInputFrame_v7_3;
+
+/* End Forward Declarations */
+
+
+/* Interface IDeckLinkOutput - Created by QueryInterface from IDeckLink. */
+
+class BMD_PUBLIC IDeckLinkOutput_v7_3 : public IUnknown
+{
+public:
+	virtual HRESULT DoesSupportVideoMode (BMDDisplayMode displayMode, BMDPixelFormat pixelFormat, /* out */ BMDDisplayModeSupport_v10_11 *result) = 0;
+    virtual HRESULT GetDisplayModeIterator (/* out */ IDeckLinkDisplayModeIterator_v7_6 **iterator) = 0;
+
+    virtual HRESULT SetScreenPreviewCallback (/* in */ IDeckLinkScreenPreviewCallback *previewCallback) = 0;
+
+    /* Video Output */
+
+    virtual HRESULT EnableVideoOutput (BMDDisplayMode displayMode, BMDVideoOutputFlags flags) = 0;
+    virtual HRESULT DisableVideoOutput (void) = 0;
+
+    virtual HRESULT SetVideoOutputFrameMemoryAllocator (/* in */ IDeckLinkMemoryAllocator *theAllocator) = 0;
+    virtual HRESULT CreateVideoFrame (int32_t width, int32_t height, int32_t rowBytes, BMDPixelFormat pixelFormat, BMDFrameFlags flags, /* out */ IDeckLinkMutableVideoFrame_v7_6 **outFrame) = 0;
+    virtual HRESULT CreateAncillaryData (BMDPixelFormat pixelFormat, /* out */ IDeckLinkVideoFrameAncillary **outBuffer) = 0;
+
+    virtual HRESULT DisplayVideoFrameSync (/* in */ IDeckLinkVideoFrame_v7_6 *theFrame) = 0;
+    virtual HRESULT ScheduleVideoFrame (/* in */ IDeckLinkVideoFrame_v7_6 *theFrame, BMDTimeValue displayTime, BMDTimeValue displayDuration, BMDTimeScale timeScale) = 0;
+    virtual HRESULT SetScheduledFrameCompletionCallback (/* in */ IDeckLinkVideoOutputCallback *theCallback) = 0;
+    virtual HRESULT GetBufferedVideoFrameCount (/* out */ uint32_t *bufferedFrameCount) = 0;
+
+    /* Audio Output */
+
+    virtual HRESULT EnableAudioOutput (BMDAudioSampleRate sampleRate, BMDAudioSampleType sampleType, uint32_t channelCount, BMDAudioOutputStreamType streamType) = 0;
+    virtual HRESULT DisableAudioOutput (void) = 0;
+
+    virtual HRESULT WriteAudioSamplesSync (/* in */ void *buffer, uint32_t sampleFrameCount, /* out */ uint32_t *sampleFramesWritten) = 0;
+
+    virtual HRESULT BeginAudioPreroll (void) = 0;
+    virtual HRESULT EndAudioPreroll (void) = 0;
+    virtual HRESULT ScheduleAudioSamples (/* in */ void *buffer, uint32_t sampleFrameCount, BMDTimeValue streamTime, BMDTimeScale timeScale, /* out */ uint32_t *sampleFramesWritten) = 0;
+
+    virtual HRESULT GetBufferedAudioSampleFrameCount (/* out */ uint32_t *bufferedSampleFrameCount) = 0;
+    virtual HRESULT FlushBufferedAudioSamples (void) = 0;
+
+    virtual HRESULT SetAudioCallback (/* in */ IDeckLinkAudioOutputCallback *theCallback) = 0;
+
+    /* Output Control */
+
+    virtual HRESULT StartScheduledPlayback (BMDTimeValue playbackStartTime, BMDTimeScale timeScale, double playbackSpeed) = 0;
+    virtual HRESULT StopScheduledPlayback (BMDTimeValue stopPlaybackAtTime, /* out */ BMDTimeValue *actualStopTime, BMDTimeScale timeScale) = 0;
+    virtual HRESULT IsScheduledPlaybackRunning (/* out */ bool *active) = 0;
+    virtual HRESULT GetHardwareReferenceClock (BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue *elapsedTimeSinceSchedulerBegan) = 0;
+
+protected:
+    virtual ~IDeckLinkOutput_v7_3 () {}; // call Release method to drop reference count
+};
+
+/* End Interface IDeckLinkOutput */
+
+
+/* Interface IDeckLinkInputCallback - Frame arrival callback. */
+
+class BMD_PUBLIC IDeckLinkInputCallback_v7_3 : public IUnknown
+{
+public:
+    virtual HRESULT VideoInputFormatChanged (/* in */ BMDVideoInputFormatChangedEvents notificationEvents, /* in */ IDeckLinkDisplayMode_v7_6 *newDisplayMode, /* in */ BMDDetectedVideoInputFormatFlags detectedSignalFlags) = 0;
+    virtual HRESULT VideoInputFrameArrived (/* in */ IDeckLinkVideoInputFrame_v7_3 *videoFrame, /* in */ IDeckLinkAudioInputPacket *audioPacket) = 0;
+
+protected:
+    virtual ~IDeckLinkInputCallback_v7_3 () {}; // call Release method to drop reference count
+};
+
+/* End Interface IDeckLinkInputCallback */
+
+
+/* Interface IDeckLinkInput - Created by QueryInterface from IDeckLink. */
+
+class BMD_PUBLIC IDeckLinkInput_v7_3 : public IUnknown
+{
+public:
+	virtual HRESULT DoesSupportVideoMode (BMDDisplayMode displayMode, BMDPixelFormat pixelFormat, /* out */ BMDDisplayModeSupport_v10_11 *result) = 0;
+    virtual HRESULT GetDisplayModeIterator (/* out */ IDeckLinkDisplayModeIterator_v7_6 **iterator) = 0;
+
+    virtual HRESULT SetScreenPreviewCallback (/* in */ IDeckLinkScreenPreviewCallback *previewCallback) = 0;
+
+    /* Video Input */
+
+    virtual HRESULT EnableVideoInput (BMDDisplayMode displayMode, BMDPixelFormat pixelFormat, BMDVideoInputFlags flags) = 0;
+    virtual HRESULT DisableVideoInput (void) = 0;
+    virtual HRESULT GetAvailableVideoFrameCount (/* out */ uint32_t *availableFrameCount) = 0;
+
+    /* Audio Input */
+
+    virtual HRESULT EnableAudioInput (BMDAudioSampleRate sampleRate, BMDAudioSampleType sampleType, uint32_t channelCount) = 0;
+    virtual HRESULT DisableAudioInput (void) = 0;
+    virtual HRESULT GetAvailableAudioSampleFrameCount (/* out */ uint32_t *availableSampleFrameCount) = 0;
+
+    /* Input Control */
+
+    virtual HRESULT StartStreams (void) = 0;
+    virtual HRESULT StopStreams (void) = 0;
+    virtual HRESULT PauseStreams (void) = 0;
+    virtual HRESULT FlushStreams (void) = 0;
+    virtual HRESULT SetCallback (/* in */ IDeckLinkInputCallback_v7_3 *theCallback) = 0;
+
+protected:
+    virtual ~IDeckLinkInput_v7_3 () {}; // call Release method to drop reference count
+};
+
+/* End Interface IDeckLinkInput */
+
+/* Interface IDeckLinkVideoInputFrame - Provided by the IDeckLinkVideoInput frame arrival callback. */
+
+class BMD_PUBLIC IDeckLinkVideoInputFrame_v7_3 : public IDeckLinkVideoFrame_v7_6
+{
+public:
+    virtual HRESULT GetStreamTime (/* out */ BMDTimeValue *frameTime, /* out */ BMDTimeValue *frameDuration, BMDTimeScale timeScale) = 0;
+
+protected:
+    virtual ~IDeckLinkVideoInputFrame_v7_3 () {}; // call Release method to drop reference count
+};
+
+/* End Interface IDeckLinkVideoInputFrame */
+
+#endif      // defined(__cplusplus)
+#endif      // __DeckLink_API_v7_3_h__
diff --git a/DeckLinkSDK/Linux/include/DeckLinkAPI_v7_6.h b/DeckLinkSDK/Linux/include/DeckLinkAPI_v7_6.h
new file mode 100644
index 0000000000..2920e45e20
--- /dev/null
+++ b/DeckLinkSDK/Linux/include/DeckLinkAPI_v7_6.h
@@ -0,0 +1,418 @@
+/* -LICENSE-START-
+** Copyright (c) 2009 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+/* DeckLinkAPI_v7_6.h */
+
+#ifndef __DeckLink_API_v7_6_h__
+#define __DeckLink_API_v7_6_h__
+
+#include "DeckLinkAPI.h"
+#include "DeckLinkAPI_v10_11.h"
+
+// Interface ID Declarations
+
+#define IID_IDeckLinkVideoOutputCallback_v7_6            /* E763A626-4A3C-49D1-BF13-E7AD3692AE52 */ (REFIID){0xE7,0x63,0xA6,0x26,0x4A,0x3C,0x49,0xD1,0xBF,0x13,0xE7,0xAD,0x36,0x92,0xAE,0x52}
+#define IID_IDeckLinkInputCallback_v7_6                  /* 31D28EE7-88B6-4CB1-897A-CDBF79A26414 */ (REFIID){0x31,0xD2,0x8E,0xE7,0x88,0xB6,0x4C,0xB1,0x89,0x7A,0xCD,0xBF,0x79,0xA2,0x64,0x14}
+#define IID_IDeckLinkDisplayModeIterator_v7_6            /* 455D741F-1779-4800-86F5-0B5D13D79751 */ (REFIID){0x45,0x5D,0x74,0x1F,0x17,0x79,0x48,0x00,0x86,0xF5,0x0B,0x5D,0x13,0xD7,0x97,0x51}
+#define IID_IDeckLinkDisplayMode_v7_6                    /* 87451E84-2B7E-439E-A629-4393EA4A8550 */ (REFIID){0x87,0x45,0x1E,0x84,0x2B,0x7E,0x43,0x9E,0xA6,0x29,0x43,0x93,0xEA,0x4A,0x85,0x50}
+#define IID_IDeckLinkOutput_v7_6                         /* 29228142-EB8C-4141-A621-F74026450955 */ (REFIID){0x29,0x22,0x81,0x42,0xEB,0x8C,0x41,0x41,0xA6,0x21,0xF7,0x40,0x26,0x45,0x09,0x55}
+#define IID_IDeckLinkInput_v7_6                          /* 300C135A-9F43-48E2-9906-6D7911D93CF1 */ (REFIID){0x30,0x0C,0x13,0x5A,0x9F,0x43,0x48,0xE2,0x99,0x06,0x6D,0x79,0x11,0xD9,0x3C,0xF1}
+#define IID_IDeckLinkTimecode_v7_6                       /* EFB9BCA6-A521-44F7-BD69-2332F24D9EE6 */ (REFIID){0xEF,0xB9,0xBC,0xA6,0xA5,0x21,0x44,0xF7,0xBD,0x69,0x23,0x32,0xF2,0x4D,0x9E,0xE6}
+#define IID_IDeckLinkVideoFrame_v7_6                     /* A8D8238E-6B18-4196-99E1-5AF717B83D32 */ (REFIID){0xA8,0xD8,0x23,0x8E,0x6B,0x18,0x41,0x96,0x99,0xE1,0x5A,0xF7,0x17,0xB8,0x3D,0x32}
+#define IID_IDeckLinkMutableVideoFrame_v7_6              /* 46FCEE00-B4E6-43D0-91C0-023A7FCEB34F */ (REFIID){0x46,0xFC,0xEE,0x00,0xB4,0xE6,0x43,0xD0,0x91,0xC0,0x02,0x3A,0x7F,0xCE,0xB3,0x4F}
+#define IID_IDeckLinkVideoInputFrame_v7_6                /* 9A74FA41-AE9F-47AC-8CF4-01F42DD59965 */ (REFIID){0x9A,0x74,0xFA,0x41,0xAE,0x9F,0x47,0xAC,0x8C,0xF4,0x01,0xF4,0x2D,0xD5,0x99,0x65}
+#define IID_IDeckLinkScreenPreviewCallback_v7_6          /* 373F499D-4B4D-4518-AD22-6354E5A5825E */ (REFIID){0x37,0x3F,0x49,0x9D,0x4B,0x4D,0x45,0x18,0xAD,0x22,0x63,0x54,0xE5,0xA5,0x82,0x5E}
+#define IID_IDeckLinkGLScreenPreviewHelper_v7_6          /* BA575CD9-A15E-497B-B2C2-F9AFE7BE4EBA */ (REFIID){0xBA,0x57,0x5C,0xD9,0xA1,0x5E,0x49,0x7B,0xB2,0xC2,0xF9,0xAF,0xE7,0xBE,0x4E,0xBA}
+#define IID_IDeckLinkVideoConversion_v7_6                /* 3EB504C9-F97D-40FE-A158-D407D48CB53B */ (REFIID){0x3E,0xB5,0x04,0xC9,0xF9,0x7D,0x40,0xFE,0xA1,0x58,0xD4,0x07,0xD4,0x8C,0xB5,0x3B}
+#define IID_IDeckLinkConfiguration_v7_6                  /* B8EAD569-B764-47F0-A73F-AE40DF6CBF10 */ (REFIID){0xB8,0xEA,0xD5,0x69,0xB7,0x64,0x47,0xF0,0xA7,0x3F,0xAE,0x40,0xDF,0x6C,0xBF,0x10}
+
+
+#if defined(__cplusplus)
+
+/* Enum BMDVideoConnection - Video connection types */
+
+typedef uint32_t BMDVideoConnection_v7_6;
+enum _BMDVideoConnection_v7_6 {
+    bmdVideoConnectionSDI_v7_6                              = 'sdi ',
+    bmdVideoConnectionHDMI_v7_6                             = 'hdmi',
+    bmdVideoConnectionOpticalSDI_v7_6                       = 'opti',
+    bmdVideoConnectionComponent_v7_6                        = 'cpnt',
+    bmdVideoConnectionComposite_v7_6                        = 'cmst',
+    bmdVideoConnectionSVideo_v7_6                           = 'svid'
+};
+
+// Forward Declarations
+
+class IDeckLinkVideoOutputCallback_v7_6;
+class IDeckLinkInputCallback_v7_6;
+class IDeckLinkDisplayModeIterator_v7_6;
+class IDeckLinkDisplayMode_v7_6;
+class IDeckLinkOutput_v7_6;
+class IDeckLinkInput_v7_6;
+class IDeckLinkTimecode_v7_6;
+class IDeckLinkVideoFrame_v7_6;
+class IDeckLinkMutableVideoFrame_v7_6;
+class IDeckLinkVideoInputFrame_v7_6;
+class IDeckLinkScreenPreviewCallback_v7_6;
+class IDeckLinkGLScreenPreviewHelper_v7_6;
+class IDeckLinkVideoConversion_v7_6;
+
+
+/* Interface IDeckLinkVideoOutputCallback - Frame completion callback. */
+
+class BMD_PUBLIC IDeckLinkVideoOutputCallback_v7_6 : public IUnknown
+{
+public:
+    virtual HRESULT ScheduledFrameCompleted (/* in */ IDeckLinkVideoFrame_v7_6 *completedFrame, /* in */ BMDOutputFrameCompletionResult result) = 0;
+    virtual HRESULT ScheduledPlaybackHasStopped (void) = 0;
+
+protected:
+    virtual ~IDeckLinkVideoOutputCallback_v7_6 () {}; // call Release method to drop reference count
+};
+
+
+/* Interface IDeckLinkInputCallback - Frame arrival callback. */
+
+class BMD_PUBLIC IDeckLinkInputCallback_v7_6 : public IUnknown
+{
+public:
+    virtual HRESULT VideoInputFormatChanged (/* in */ BMDVideoInputFormatChangedEvents notificationEvents, /* in */ IDeckLinkDisplayMode_v7_6 *newDisplayMode, /* in */ BMDDetectedVideoInputFormatFlags detectedSignalFlags) = 0;
+    virtual HRESULT VideoInputFrameArrived (/* in */ IDeckLinkVideoInputFrame_v7_6* videoFrame, /* in */ IDeckLinkAudioInputPacket* audioPacket) = 0;
+
+protected:
+    virtual ~IDeckLinkInputCallback_v7_6 () {}; // call Release method to drop reference count
+};
+
+
+/* Interface IDeckLinkDisplayModeIterator - enumerates over supported input/output display modes. */
+
+class BMD_PUBLIC IDeckLinkDisplayModeIterator_v7_6 : public IUnknown
+{
+public:
+    virtual HRESULT Next (/* out */ IDeckLinkDisplayMode_v7_6 **deckLinkDisplayMode) = 0;
+
+protected:
+    virtual ~IDeckLinkDisplayModeIterator_v7_6 () {}; // call Release method to drop reference count
+};
+
+
+/* Interface IDeckLinkDisplayMode - represents a display mode */
+
+class BMD_PUBLIC IDeckLinkDisplayMode_v7_6 : public IUnknown
+{
+public:
+    virtual HRESULT GetName (/* out */ const char **name) = 0;
+    virtual BMDDisplayMode GetDisplayMode (void) = 0;
+    virtual long GetWidth (void) = 0;
+    virtual long GetHeight (void) = 0;
+    virtual HRESULT GetFrameRate (/* out */ BMDTimeValue *frameDuration, /* out */ BMDTimeScale *timeScale) = 0;
+    virtual BMDFieldDominance GetFieldDominance (void) = 0;
+
+protected:
+    virtual ~IDeckLinkDisplayMode_v7_6 () {}; // call Release method to drop reference count
+};
+
+
+/* Interface IDeckLinkOutput - Created by QueryInterface from IDeckLink. */
+
+class BMD_PUBLIC IDeckLinkOutput_v7_6 : public IUnknown
+{
+public:
+	virtual HRESULT DoesSupportVideoMode (/* in */ BMDDisplayMode displayMode, /* in */ BMDPixelFormat pixelFormat, /* out */ BMDDisplayModeSupport_v10_11 *result) = 0;
+    virtual HRESULT GetDisplayModeIterator (/* out */ IDeckLinkDisplayModeIterator_v7_6 **iterator) = 0;
+
+    virtual HRESULT SetScreenPreviewCallback (/* in */ IDeckLinkScreenPreviewCallback_v7_6 *previewCallback) = 0;
+
+    /* Video Output */
+
+    virtual HRESULT EnableVideoOutput (/* in */ BMDDisplayMode displayMode, /* in */ BMDVideoOutputFlags flags) = 0;
+    virtual HRESULT DisableVideoOutput (void) = 0;
+
+    virtual HRESULT SetVideoOutputFrameMemoryAllocator (/* in */ IDeckLinkMemoryAllocator *theAllocator) = 0;
+    virtual HRESULT CreateVideoFrame (/* in */ int32_t width, /* in */ int32_t height, /* in */ int32_t rowBytes, /* in */ BMDPixelFormat pixelFormat, /* in */ BMDFrameFlags flags, /* out */ IDeckLinkMutableVideoFrame_v7_6 **outFrame) = 0;
+    virtual HRESULT CreateAncillaryData (/* in */ BMDPixelFormat pixelFormat, /* out */ IDeckLinkVideoFrameAncillary **outBuffer) = 0;
+
+    virtual HRESULT DisplayVideoFrameSync (/* in */ IDeckLinkVideoFrame_v7_6 *theFrame) = 0;
+    virtual HRESULT ScheduleVideoFrame (/* in */ IDeckLinkVideoFrame_v7_6 *theFrame, /* in */ BMDTimeValue displayTime, /* in */ BMDTimeValue displayDuration, /* in */ BMDTimeScale timeScale) = 0;
+    virtual HRESULT SetScheduledFrameCompletionCallback (/* in */ IDeckLinkVideoOutputCallback_v7_6 *theCallback) = 0;
+    virtual HRESULT GetBufferedVideoFrameCount (/* out */ uint32_t *bufferedFrameCount) = 0;
+
+    /* Audio Output */
+
+    virtual HRESULT EnableAudioOutput (/* in */ BMDAudioSampleRate sampleRate, /* in */ BMDAudioSampleType sampleType, /* in */ uint32_t channelCount, /* in */ BMDAudioOutputStreamType streamType) = 0;
+    virtual HRESULT DisableAudioOutput (void) = 0;
+
+    virtual HRESULT WriteAudioSamplesSync (/* in */ void *buffer, /* in */ uint32_t sampleFrameCount, /* out */ uint32_t *sampleFramesWritten) = 0;
+
+    virtual HRESULT BeginAudioPreroll (void) = 0;
+    virtual HRESULT EndAudioPreroll (void) = 0;
+    virtual HRESULT ScheduleAudioSamples (/* in */ void *buffer, /* in */ uint32_t sampleFrameCount, /* in */ BMDTimeValue streamTime, /* in */ BMDTimeScale timeScale, /* out */ uint32_t *sampleFramesWritten) = 0;
+
+    virtual HRESULT GetBufferedAudioSampleFrameCount (/* out */ uint32_t *bufferedSampleFrameCount) = 0;
+    virtual HRESULT FlushBufferedAudioSamples (void) = 0;
+
+    virtual HRESULT SetAudioCallback (/* in */ IDeckLinkAudioOutputCallback *theCallback) = 0;
+
+    /* Output Control */
+
+    virtual HRESULT StartScheduledPlayback (/* in */ BMDTimeValue playbackStartTime, /* in */ BMDTimeScale timeScale, /* in */ double playbackSpeed) = 0;
+    virtual HRESULT StopScheduledPlayback (/* in */ BMDTimeValue stopPlaybackAtTime, /* out */ BMDTimeValue *actualStopTime, /* in */ BMDTimeScale timeScale) = 0;
+    virtual HRESULT IsScheduledPlaybackRunning (/* out */ bool *active) = 0;
+    virtual HRESULT GetScheduledStreamTime (/* in */ BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue *streamTime, /* out */ double *playbackSpeed) = 0;
+
+    /* Hardware Timing */
+
+    virtual HRESULT GetHardwareReferenceClock (/* in */ BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue *hardwareTime, /* out */ BMDTimeValue *timeInFrame, /* out */ BMDTimeValue *ticksPerFrame) = 0;
+
+protected:
+    virtual ~IDeckLinkOutput_v7_6 () {}; // call Release method to drop reference count
+};
+
+
+/* Interface IDeckLinkInput_v7_6 - Created by QueryInterface from IDeckLink. */
+
+class BMD_PUBLIC IDeckLinkInput_v7_6 : public IUnknown
+{
+public:
+	virtual HRESULT DoesSupportVideoMode (/* in */ BMDDisplayMode displayMode, /* in */ BMDPixelFormat pixelFormat, /* out */ BMDDisplayModeSupport_v10_11 *result) = 0;
+    virtual HRESULT GetDisplayModeIterator (/* out */ IDeckLinkDisplayModeIterator_v7_6 **iterator) = 0;
+
+    virtual HRESULT SetScreenPreviewCallback (/* in */ IDeckLinkScreenPreviewCallback_v7_6 *previewCallback) = 0;
+
+    /* Video Input */
+
+    virtual HRESULT EnableVideoInput (/* in */ BMDDisplayMode displayMode, /* in */ BMDPixelFormat pixelFormat, /* in */ BMDVideoInputFlags flags) = 0;
+    virtual HRESULT DisableVideoInput (void) = 0;
+    virtual HRESULT GetAvailableVideoFrameCount (/* out */ uint32_t *availableFrameCount) = 0;
+
+    /* Audio Input */
+
+    virtual HRESULT EnableAudioInput (/* in */ BMDAudioSampleRate sampleRate, /* in */ BMDAudioSampleType sampleType, /* in */ uint32_t channelCount) = 0;
+    virtual HRESULT DisableAudioInput (void) = 0;
+    virtual HRESULT GetAvailableAudioSampleFrameCount (/* out */ uint32_t *availableSampleFrameCount) = 0;
+
+    /* Input Control */
+
+    virtual HRESULT StartStreams (void) = 0;
+    virtual HRESULT StopStreams (void) = 0;
+    virtual HRESULT PauseStreams (void) = 0;
+    virtual HRESULT FlushStreams (void) = 0;
+    virtual HRESULT SetCallback (/* in */ IDeckLinkInputCallback_v7_6 *theCallback) = 0;
+
+    /* Hardware Timing */
+
+    virtual HRESULT GetHardwareReferenceClock (/* in */ BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue *hardwareTime, /* out */ BMDTimeValue *timeInFrame, /* out */ BMDTimeValue *ticksPerFrame) = 0;
+
+protected:
+    virtual ~IDeckLinkInput_v7_6 () {}; // call Release method to drop reference count
+};
+
+
+/* Interface IDeckLinkTimecode - Used for video frame timecode representation. */
+
+class BMD_PUBLIC IDeckLinkTimecode_v7_6 : public IUnknown
+{
+public:
+    virtual BMDTimecodeBCD GetBCD (void) = 0;
+    virtual HRESULT GetComponents (/* out */ uint8_t *hours, /* out */ uint8_t *minutes, /* out */ uint8_t *seconds, /* out */ uint8_t *frames) = 0;
+    virtual HRESULT GetString (/* out */ const char **timecode) = 0;
+    virtual BMDTimecodeFlags GetFlags (void) = 0;
+
+protected:
+    virtual ~IDeckLinkTimecode_v7_6 () {}; // call Release method to drop reference count
+};
+
+
+/* Interface IDeckLinkVideoFrame - Interface to encapsulate a video frame; can be caller-implemented. */
+
+class BMD_PUBLIC IDeckLinkVideoFrame_v7_6 : public IUnknown
+{
+public:
+    virtual long GetWidth (void) = 0;
+    virtual long GetHeight (void) = 0;
+    virtual long GetRowBytes (void) = 0;
+    virtual BMDPixelFormat GetPixelFormat (void) = 0;
+    virtual BMDFrameFlags GetFlags (void) = 0;
+    virtual HRESULT GetBytes (/* out */ void **buffer) = 0;
+
+    virtual HRESULT GetTimecode (BMDTimecodeFormat format, /* out */ IDeckLinkTimecode_v7_6 **timecode) = 0;
+    virtual HRESULT GetAncillaryData (/* out */ IDeckLinkVideoFrameAncillary **ancillary) = 0;
+
+protected:
+    virtual ~IDeckLinkVideoFrame_v7_6 () {}; // call Release method to drop reference count
+};
+
+
+/* Interface IDeckLinkMutableVideoFrame - Created by IDeckLinkOutput::CreateVideoFrame. */
+
+class BMD_PUBLIC IDeckLinkMutableVideoFrame_v7_6 : public IDeckLinkVideoFrame_v7_6
+{
+public:
+    virtual HRESULT SetFlags (BMDFrameFlags newFlags) = 0;
+
+    virtual HRESULT SetTimecode (BMDTimecodeFormat format, /* in */ IDeckLinkTimecode_v7_6 *timecode) = 0;
+    virtual HRESULT SetTimecodeFromComponents (BMDTimecodeFormat format, uint8_t hours, uint8_t minutes, uint8_t seconds, uint8_t frames, BMDTimecodeFlags flags) = 0;
+    virtual HRESULT SetAncillaryData (/* in */ IDeckLinkVideoFrameAncillary *ancillary) = 0;
+
+protected:
+    virtual ~IDeckLinkMutableVideoFrame_v7_6 () {}; // call Release method to drop reference count
+};
+
+
+/* Interface IDeckLinkVideoInputFrame - Provided by the IDeckLinkVideoInput frame arrival callback. */
+
+class BMD_PUBLIC IDeckLinkVideoInputFrame_v7_6 : public IDeckLinkVideoFrame_v7_6
+{
+public:
+    virtual HRESULT GetStreamTime (/* out */ BMDTimeValue *frameTime, /* out */ BMDTimeValue *frameDuration, BMDTimeScale timeScale) = 0;
+    virtual HRESULT GetHardwareReferenceTimestamp (BMDTimeScale timeScale, /* out */ BMDTimeValue *frameTime, /* out */ BMDTimeValue *frameDuration) = 0;
+
+protected:
+    virtual ~IDeckLinkVideoInputFrame_v7_6 () {}; // call Release method to drop reference count
+};
+
+
+/* Interface IDeckLinkScreenPreviewCallback - Screen preview callback */
+
+class BMD_PUBLIC IDeckLinkScreenPreviewCallback_v7_6 : public IUnknown
+{
+public:
+    virtual HRESULT DrawFrame (/* in */ IDeckLinkVideoFrame_v7_6 *theFrame) = 0;
+
+protected:
+    virtual ~IDeckLinkScreenPreviewCallback_v7_6 () {}; // call Release method to drop reference count
+};
+
+
+/* Interface IDeckLinkGLScreenPreviewHelper - Created with CoCreateInstance(). */
+
+class BMD_PUBLIC IDeckLinkGLScreenPreviewHelper_v7_6 : public IUnknown
+{
+public:
+
+    /* Methods must be called with OpenGL context set */
+
+    virtual HRESULT InitializeGL (void) = 0;
+    virtual HRESULT PaintGL (void) = 0;
+    virtual HRESULT SetFrame (/* in */ IDeckLinkVideoFrame_v7_6 *theFrame) = 0;
+
+protected:
+    virtual ~IDeckLinkGLScreenPreviewHelper_v7_6 () {}; // call Release method to drop reference count
+};
+
+
+/* Interface IDeckLinkVideoConversion - Created with CoCreateInstance(). */
+
+class BMD_PUBLIC IDeckLinkVideoConversion_v7_6 : public IUnknown
+{
+public:
+    virtual HRESULT ConvertFrame (/* in */ IDeckLinkVideoFrame_v7_6* srcFrame, /* in */ IDeckLinkVideoFrame_v7_6* dstFrame) = 0;
+
+protected:
+    virtual ~IDeckLinkVideoConversion_v7_6 () {}; // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkConfiguration - Created by QueryInterface from IDeckLink. */
+
+class BMD_PUBLIC IDeckLinkConfiguration_v7_6 : public IUnknown
+{
+public:
+    virtual HRESULT GetConfigurationValidator (/* out */ IDeckLinkConfiguration_v7_6 **configObject) = 0;
+    virtual HRESULT WriteConfigurationToPreferences (void) = 0;
+	
+    /* Video Output Configuration */
+	
+    virtual HRESULT SetVideoOutputFormat (/* in */ BMDVideoConnection_v7_6 videoOutputConnection) = 0;
+    virtual HRESULT IsVideoOutputActive (/* in */ BMDVideoConnection_v7_6 videoOutputConnection, /* out */ bool *active) = 0;
+	
+    virtual HRESULT SetAnalogVideoOutputFlags (/* in */ BMDAnalogVideoFlags analogVideoFlags) = 0;
+    virtual HRESULT GetAnalogVideoOutputFlags (/* out */ BMDAnalogVideoFlags *analogVideoFlags) = 0;
+	
+    virtual HRESULT EnableFieldFlickerRemovalWhenPaused (/* in */ bool enable) = 0;
+    virtual HRESULT IsEnabledFieldFlickerRemovalWhenPaused (/* out */ bool *enabled) = 0;
+	
+    virtual HRESULT Set444And3GBpsVideoOutput (/* in */ bool enable444VideoOutput, /* in */ bool enable3GbsOutput) = 0;
+    virtual HRESULT Get444And3GBpsVideoOutput (/* out */ bool *is444VideoOutputEnabled, /* out */ bool *threeGbsOutputEnabled) = 0;
+	
+    virtual HRESULT SetVideoOutputConversionMode (/* in */ BMDVideoOutputConversionMode conversionMode) = 0;
+    virtual HRESULT GetVideoOutputConversionMode (/* out */ BMDVideoOutputConversionMode *conversionMode) = 0;
+	
+    virtual HRESULT Set_HD1080p24_to_HD1080i5994_Conversion (/* in */ bool enable) = 0;
+    virtual HRESULT Get_HD1080p24_to_HD1080i5994_Conversion (/* out */ bool *enabled) = 0;
+	
+    /* Video Input Configuration */
+	
+    virtual HRESULT SetVideoInputFormat (/* in */ BMDVideoConnection_v7_6 videoInputFormat) = 0;
+    virtual HRESULT GetVideoInputFormat (/* out */ BMDVideoConnection_v7_6 *videoInputFormat) = 0;
+	
+    virtual HRESULT SetAnalogVideoInputFlags (/* in */ BMDAnalogVideoFlags analogVideoFlags) = 0;
+    virtual HRESULT GetAnalogVideoInputFlags (/* out */ BMDAnalogVideoFlags *analogVideoFlags) = 0;
+	
+    virtual HRESULT SetVideoInputConversionMode (/* in */ BMDVideoInputConversionMode conversionMode) = 0;
+    virtual HRESULT GetVideoInputConversionMode (/* out */ BMDVideoInputConversionMode *conversionMode) = 0;
+	
+    virtual HRESULT SetBlackVideoOutputDuringCapture (/* in */ bool blackOutInCapture) = 0;
+    virtual HRESULT GetBlackVideoOutputDuringCapture (/* out */ bool *blackOutInCapture) = 0;
+	
+    virtual HRESULT Set32PulldownSequenceInitialTimecodeFrame (/* in */ uint32_t aFrameTimecode) = 0;
+    virtual HRESULT Get32PulldownSequenceInitialTimecodeFrame (/* out */ uint32_t *aFrameTimecode) = 0;
+	
+    virtual HRESULT SetVancSourceLineMapping (/* in */ uint32_t activeLine1VANCsource, /* in */ uint32_t activeLine2VANCsource, /* in */ uint32_t activeLine3VANCsource) = 0;
+    virtual HRESULT GetVancSourceLineMapping (/* out */ uint32_t *activeLine1VANCsource, /* out */ uint32_t *activeLine2VANCsource, /* out */ uint32_t *activeLine3VANCsource) = 0;
+	
+    /* Audio Input Configuration */
+	
+    virtual HRESULT SetAudioInputFormat (/* in */ BMDAudioConnection audioInputFormat) = 0;
+    virtual HRESULT GetAudioInputFormat (/* out */ BMDAudioConnection *audioInputFormat) = 0;
+};
+
+/* Functions */
+
+extern "C" {
+
+	BMD_PUBLIC IDeckLinkIterator* CreateDeckLinkIteratorInstance_v7_6 (void);
+	BMD_PUBLIC IDeckLinkGLScreenPreviewHelper_v7_6* CreateOpenGLScreenPreviewHelper_v7_6 (void);
+    BMD_PUBLIC IDeckLinkVideoConversion_v7_6* CreateVideoConversionInstance_v7_6 (void);
+
+};
+
+
+#endif      // defined(__cplusplus)
+#endif      // __DeckLink_API_v7_6_h__
diff --git a/DeckLinkSDK/Linux/include/DeckLinkAPI_v7_9.h b/DeckLinkSDK/Linux/include/DeckLinkAPI_v7_9.h
new file mode 100644
index 0000000000..54c92f1745
--- /dev/null
+++ b/DeckLinkSDK/Linux/include/DeckLinkAPI_v7_9.h
@@ -0,0 +1,101 @@
+/* -LICENSE-START-
+** Copyright (c) 2010 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+/* DeckLinkAPI_v7_9.h */
+
+#ifndef __DeckLink_API_v7_9_h__
+#define __DeckLink_API_v7_9_h__
+
+#include "DeckLinkAPI.h"
+
+// Interface ID Declarations
+#define IID_IDeckLinkDeckControl_v7_9                    /* A4D81043-0619-42B7-8ED6-602D29041DF7 */ (REFIID){0xA4,0xD8,0x10,0x43,0x06,0x19,0x42,0xB7,0x8E,0xD6,0x60,0x2D,0x29,0x04,0x1D,0xF7}
+
+#if defined(__cplusplus)
+
+
+// Forward Declarations
+class IDeckLinkDeckControl_v7_9;
+
+/* Interface IDeckLinkDeckControl_v7_9 - Deck Control main interface */
+class BMD_PUBLIC IDeckLinkDeckControl_v7_9 : public IUnknown
+{
+public:
+    virtual HRESULT Open (/* in */ BMDTimeScale timeScale, /* in */ BMDTimeValue timeValue, /* in */ bool timecodeIsDropFrame, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT Close (/* in */ bool standbyOn) = 0;
+    virtual HRESULT GetCurrentState (/* out */ BMDDeckControlMode *mode, /* out */ BMDDeckControlVTRControlState *vtrControlState, /* out */ BMDDeckControlStatusFlags *flags) = 0;
+    virtual HRESULT SetStandby (/* in */ bool standbyOn) = 0;
+    virtual HRESULT Play (/* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT Stop (/* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT TogglePlayStop (/* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT Eject (/* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT GoToTimecode (/* in */ BMDTimecodeBCD timecode, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT FastForward (/* in */ bool viewTape, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT Rewind (/* in */ bool viewTape, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT StepForward (/* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT StepBack (/* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT Jog (/* in */ double rate, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT Shuttle (/* in */ double rate, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT GetTimecodeString (/* out */ const char **currentTimeCode, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT GetTimecode (/* out */ IDeckLinkTimecode **currentTimecode, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT GetTimecodeBCD (/* out */ BMDTimecodeBCD *currentTimecode, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT SetPreroll (/* in */ uint32_t prerollSeconds) = 0;
+    virtual HRESULT GetPreroll (/* out */ uint32_t *prerollSeconds) = 0;
+    virtual HRESULT SetExportOffset (/* in */ int32_t exportOffsetFields) = 0;
+    virtual HRESULT GetExportOffset (/* out */ int32_t *exportOffsetFields) = 0;
+    virtual HRESULT GetManualExportOffset (/* out */ int32_t *deckManualExportOffsetFields) = 0;
+    virtual HRESULT SetCaptureOffset (/* in */ int32_t captureOffsetFields) = 0;
+    virtual HRESULT GetCaptureOffset (/* out */ int32_t *captureOffsetFields) = 0;
+    virtual HRESULT StartExport (/* in */ BMDTimecodeBCD inTimecode, /* in */ BMDTimecodeBCD outTimecode, /* in */ BMDDeckControlExportModeOpsFlags exportModeOps, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT StartCapture (/* in */ bool useVITC, /* in */ BMDTimecodeBCD inTimecode, /* in */ BMDTimecodeBCD outTimecode, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT GetDeviceID (/* out */ uint16_t *deviceId, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT Abort (void) = 0;
+    virtual HRESULT CrashRecordStart (/* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT CrashRecordStop (/* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT SetCallback (/* in */ IDeckLinkDeckControlStatusCallback *callback) = 0;
+	
+protected:
+    virtual ~IDeckLinkDeckControl_v7_9 () {}; // call Release method to drop reference count
+};
+
+
+
+#endif      // defined(__cplusplus)
+#endif      // __DeckLink_API_v7_9_h__
diff --git a/DeckLinkSDK/Linux/include/DeckLinkAPI_v8_0.h b/DeckLinkSDK/Linux/include/DeckLinkAPI_v8_0.h
new file mode 100644
index 0000000000..32e7b93670
--- /dev/null
+++ b/DeckLinkSDK/Linux/include/DeckLinkAPI_v8_0.h
@@ -0,0 +1,76 @@
+/* -LICENSE-START-
+** Copyright (c) 2011 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPI_v8_0_H
+#define BMD_DECKLINKAPI_v8_0_H
+
+#include "DeckLinkAPI.h"
+
+// Interface ID Declarations
+
+#define IID_IDeckLink_v8_0                                    /* 62BFF75D-6569-4E55-8D4D-66AA03829ABC */ (REFIID){0x62,0xBF,0xF7,0x5D,0x65,0x69,0x4E,0x55,0x8D,0x4D,0x66,0xAA,0x03,0x82,0x9A,0xBC}
+#define IID_IDeckLinkIterator_v8_0                            /* 74E936FC-CC28-4A67-81A0-1E94E52D4E69 */ (REFIID){0x74,0xE9,0x36,0xFC,0xCC,0x28,0x4A,0x67,0x81,0xA0,0x1E,0x94,0xE5,0x2D,0x4E,0x69}
+
+#if defined (__cplusplus)
+
+/* Interface IDeckLink_v8_0 - represents a DeckLink device */
+
+class BMD_PUBLIC IDeckLink_v8_0 : public IUnknown
+{
+public:
+    virtual HRESULT GetModelName (/* out */ const char **modelName) = 0;
+};
+
+/* Interface IDeckLinkIterator_v8_0 - enumerates installed DeckLink hardware */
+
+class BMD_PUBLIC IDeckLinkIterator_v8_0 : public IUnknown
+{
+public:
+    virtual HRESULT Next (/* out */ IDeckLink_v8_0 **deckLinkInstance) = 0;
+};
+
+extern "C" {
+    BMD_PUBLIC IDeckLinkIterator_v8_0* CreateDeckLinkIteratorInstance_v8_0 (void);
+};
+
+#endif	// defined __cplusplus
+
+#endif /* defined(BMD_DECKLINKAPI_v8_0_H) */
+
diff --git a/DeckLinkSDK/Linux/include/DeckLinkAPI_v8_1.h b/DeckLinkSDK/Linux/include/DeckLinkAPI_v8_1.h
new file mode 100644
index 0000000000..5bc67de2ab
--- /dev/null
+++ b/DeckLinkSDK/Linux/include/DeckLinkAPI_v8_1.h
@@ -0,0 +1,124 @@
+/* -LICENSE-START-
+ ** Copyright (c) 2011 Blackmagic Design
+ **  
+ ** Permission is hereby granted, free of charge, to any person or organization 
+ ** obtaining a copy of the software and accompanying documentation (the 
+ ** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+ ** and transmit the Software, and to prepare derivative works of the Software, 
+ ** and to permit third-parties to whom the Software is furnished to do so, in 
+ ** accordance with:
+ ** 
+ ** (1) if the Software is obtained from Blackmagic Design, the End User License 
+ ** Agreement for the Software Development Kit (“EULA”) available at 
+ ** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+ ** 
+ ** (2) if the Software is obtained from any third party, such licensing terms 
+ ** as notified by that third party,
+ ** 
+ ** and all subject to the following:
+ ** 
+ ** (3) the copyright notices in the Software and this entire statement, 
+ ** including the above license grant, this restriction and the following 
+ ** disclaimer, must be included in all copies of the Software, in whole or in 
+ ** part, and all derivative works of the Software, unless such copies or 
+ ** derivative works are solely in the form of machine-executable object code 
+ ** generated by a source language processor.
+ ** 
+ ** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+ ** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+ ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+ ** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+ ** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+ ** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+ ** DEALINGS IN THE SOFTWARE.
+ ** 
+ ** A copy of the Software is available free of charge at 
+ ** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+ ** 
+ ** -LICENSE-END-
+ */
+
+#ifndef BMD_DECKLINKAPI_v8_1_H
+#define BMD_DECKLINKAPI_v8_1_H
+
+#include "DeckLinkAPI.h"
+
+
+// Interface ID Declarations
+
+#define IID_IDeckLinkDeckControlStatusCallback_v8_1           /* E5F693C1-4283-4716-B18F-C1431521955B */ (REFIID){0xE5,0xF6,0x93,0xC1,0x42,0x83,0x47,0x16,0xB1,0x8F,0xC1,0x43,0x15,0x21,0x95,0x5B}
+#define IID_IDeckLinkDeckControl_v8_1                         /* 522A9E39-0F3C-4742-94EE-D80DE335DA1D */ (REFIID){0x52,0x2A,0x9E,0x39,0x0F,0x3C,0x47,0x42,0x94,0xEE,0xD8,0x0D,0xE3,0x35,0xDA,0x1D}
+
+
+/* Enum BMDDeckControlVTRControlState_v8_1 - VTR Control state */
+
+typedef uint32_t BMDDeckControlVTRControlState_v8_1;
+enum _BMDDeckControlVTRControlState_v8_1 {
+    bmdDeckControlNotInVTRControlMode_v8_1                            = 'nvcm',
+    bmdDeckControlVTRControlPlaying_v8_1                              = 'vtrp',
+    bmdDeckControlVTRControlRecording_v8_1                            = 'vtrr',
+    bmdDeckControlVTRControlStill_v8_1                                = 'vtra',
+    bmdDeckControlVTRControlSeeking_v8_1                              = 'vtrs',
+    bmdDeckControlVTRControlStopped_v8_1                              = 'vtro'
+};
+
+
+/* Interface IDeckLinkDeckControlStatusCallback_v8_1 - Deck control state change callback. */
+
+class BMD_PUBLIC IDeckLinkDeckControlStatusCallback_v8_1 : public IUnknown
+{
+public:
+    virtual HRESULT TimecodeUpdate (/* in */ BMDTimecodeBCD currentTimecode) = 0;
+    virtual HRESULT VTRControlStateChanged (/* in */ BMDDeckControlVTRControlState_v8_1 newState, /* in */ BMDDeckControlError error) = 0;
+    virtual HRESULT DeckControlEventReceived (/* in */ BMDDeckControlEvent event, /* in */ BMDDeckControlError error) = 0;
+    virtual HRESULT DeckControlStatusChanged (/* in */ BMDDeckControlStatusFlags flags, /* in */ uint32_t mask) = 0;
+	
+protected:
+    virtual ~IDeckLinkDeckControlStatusCallback_v8_1 () {}; // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkDeckControl_v8_1 - Deck Control main interface */
+
+class BMD_PUBLIC IDeckLinkDeckControl_v8_1 : public IUnknown
+{
+public:
+    virtual HRESULT Open (/* in */ BMDTimeScale timeScale, /* in */ BMDTimeValue timeValue, /* in */ bool timecodeIsDropFrame, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT Close (/* in */ bool standbyOn) = 0;
+    virtual HRESULT GetCurrentState (/* out */ BMDDeckControlMode *mode, /* out */ BMDDeckControlVTRControlState_v8_1 *vtrControlState, /* out */ BMDDeckControlStatusFlags *flags) = 0;
+    virtual HRESULT SetStandby (/* in */ bool standbyOn) = 0;
+    virtual HRESULT SendCommand (/* in */ uint8_t *inBuffer, /* in */ uint32_t inBufferSize, /* out */ uint8_t *outBuffer, /* out */ uint32_t *outDataSize, /* in */ uint32_t outBufferSize, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT Play (/* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT Stop (/* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT TogglePlayStop (/* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT Eject (/* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT GoToTimecode (/* in */ BMDTimecodeBCD timecode, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT FastForward (/* in */ bool viewTape, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT Rewind (/* in */ bool viewTape, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT StepForward (/* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT StepBack (/* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT Jog (/* in */ double rate, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT Shuttle (/* in */ double rate, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT GetTimecodeString (/* out */ const char **currentTimeCode, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT GetTimecode (/* out */ IDeckLinkTimecode **currentTimecode, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT GetTimecodeBCD (/* out */ BMDTimecodeBCD *currentTimecode, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT SetPreroll (/* in */ uint32_t prerollSeconds) = 0;
+    virtual HRESULT GetPreroll (/* out */ uint32_t *prerollSeconds) = 0;
+    virtual HRESULT SetExportOffset (/* in */ int32_t exportOffsetFields) = 0;
+    virtual HRESULT GetExportOffset (/* out */ int32_t *exportOffsetFields) = 0;
+    virtual HRESULT GetManualExportOffset (/* out */ int32_t *deckManualExportOffsetFields) = 0;
+    virtual HRESULT SetCaptureOffset (/* in */ int32_t captureOffsetFields) = 0;
+    virtual HRESULT GetCaptureOffset (/* out */ int32_t *captureOffsetFields) = 0;
+    virtual HRESULT StartExport (/* in */ BMDTimecodeBCD inTimecode, /* in */ BMDTimecodeBCD outTimecode, /* in */ BMDDeckControlExportModeOpsFlags exportModeOps, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT StartCapture (/* in */ bool useVITC, /* in */ BMDTimecodeBCD inTimecode, /* in */ BMDTimecodeBCD outTimecode, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT GetDeviceID (/* out */ uint16_t *deviceId, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT Abort (void) = 0;
+    virtual HRESULT CrashRecordStart (/* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT CrashRecordStop (/* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT SetCallback (/* in */ IDeckLinkDeckControlStatusCallback_v8_1 *callback) = 0;
+	
+protected:
+    virtual ~IDeckLinkDeckControl_v8_1 () {}; // call Release method to drop reference count
+};
+
+
+#endif	// BMD_DECKLINKAPI_v8_1_H
diff --git a/DeckLinkSDK/Linux/include/DeckLinkAPI_v9_2.h b/DeckLinkSDK/Linux/include/DeckLinkAPI_v9_2.h
new file mode 100644
index 0000000000..c11c801292
--- /dev/null
+++ b/DeckLinkSDK/Linux/include/DeckLinkAPI_v9_2.h
@@ -0,0 +1,96 @@
+/* -LICENSE-START-
+** Copyright (c) 2012 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPI_v9_2_H
+#define BMD_DECKLINKAPI_v9_2_H
+
+#include "DeckLinkAPI.h"
+#include "DeckLinkAPI_v10_11.h"
+#include "DeckLinkAPIVideoInput_v11_5_1.h"
+
+
+// Interface ID Declarations
+
+#define IID_IDeckLinkInput_v9_2                          /* 6D40EF78-28B9-4E21-990D-95BB7750A04F */ (REFIID){0x6D,0x40,0xEF,0x78,0x28,0xB9,0x4E,0x21,0x99,0x0D,0x95,0xBB,0x77,0x50,0xA0,0x4F}
+
+
+#if defined(__cplusplus)
+
+/* Interface IDeckLinkInput - Created by QueryInterface from IDeckLink. */
+
+class BMD_PUBLIC IDeckLinkInput_v9_2 : public IUnknown
+{
+public:
+	virtual HRESULT DoesSupportVideoMode (/* in */ BMDDisplayMode displayMode, /* in */ BMDPixelFormat pixelFormat, /* in */ BMDVideoInputFlags flags, /* out */ BMDDisplayModeSupport_v10_11 *result, /* out */ IDeckLinkDisplayMode **resultDisplayMode) = 0;
+    virtual HRESULT GetDisplayModeIterator (/* out */ IDeckLinkDisplayModeIterator **iterator) = 0;
+
+    virtual HRESULT SetScreenPreviewCallback (/* in */ IDeckLinkScreenPreviewCallback *previewCallback) = 0;
+
+    /* Video Input */
+
+    virtual HRESULT EnableVideoInput (/* in */ BMDDisplayMode displayMode, /* in */ BMDPixelFormat pixelFormat, /* in */ BMDVideoInputFlags flags) = 0;
+    virtual HRESULT DisableVideoInput (void) = 0;
+    virtual HRESULT GetAvailableVideoFrameCount (/* out */ uint32_t *availableFrameCount) = 0;
+
+    /* Audio Input */
+
+    virtual HRESULT EnableAudioInput (/* in */ BMDAudioSampleRate sampleRate, /* in */ BMDAudioSampleType sampleType, /* in */ uint32_t channelCount) = 0;
+    virtual HRESULT DisableAudioInput (void) = 0;
+    virtual HRESULT GetAvailableAudioSampleFrameCount (/* out */ uint32_t *availableSampleFrameCount) = 0;
+
+    /* Input Control */
+
+    virtual HRESULT StartStreams (void) = 0;
+    virtual HRESULT StopStreams (void) = 0;
+    virtual HRESULT PauseStreams (void) = 0;
+    virtual HRESULT FlushStreams (void) = 0;
+    virtual HRESULT SetCallback (/* in */ IDeckLinkInputCallback_v11_5_1 *theCallback) = 0;
+
+    /* Hardware Timing */
+
+    virtual HRESULT GetHardwareReferenceClock (/* in */ BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue *hardwareTime, /* out */ BMDTimeValue *timeInFrame, /* out */ BMDTimeValue *ticksPerFrame) = 0;
+
+protected:
+    virtual ~IDeckLinkInput_v9_2 () {}; // call Release method to drop reference count
+};
+
+
+#endif      // defined(__cplusplus)
+#endif	// BMD_DECKLINKAPI_v9_2_H
diff --git a/DeckLinkSDK/Linux/include/DeckLinkAPI_v9_9.h b/DeckLinkSDK/Linux/include/DeckLinkAPI_v9_9.h
new file mode 100644
index 0000000000..16dc671344
--- /dev/null
+++ b/DeckLinkSDK/Linux/include/DeckLinkAPI_v9_9.h
@@ -0,0 +1,112 @@
+/* -LICENSE-START-
+** Copyright (c) 2013 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPI_v9_9_H
+#define BMD_DECKLINKAPI_v9_9_H
+
+#include "DeckLinkAPI.h"
+#include "DeckLinkAPI_v10_11.h"
+
+
+// Interface ID Declarations
+
+#define IID_IDeckLinkOutput_v9_9                         /* A3EF0963-0862-44ED-92A9-EE89ABF431C7 */ (REFIID){0xA3,0xEF,0x09,0x63,0x08,0x62,0x44,0xED,0x92,0xA9,0xEE,0x89,0xAB,0xF4,0x31,0xC7}
+
+
+#if defined(__cplusplus)
+
+/* Interface IDeckLinkOutput - Created by QueryInterface from IDeckLink. */
+
+class BMD_PUBLIC IDeckLinkOutput_v9_9 : public IUnknown
+{
+public:
+	virtual HRESULT DoesSupportVideoMode (/* in */ BMDDisplayMode displayMode, /* in */ BMDPixelFormat pixelFormat, /* in */ BMDVideoOutputFlags flags, /* out */ BMDDisplayModeSupport_v10_11 *result, /* out */ IDeckLinkDisplayMode **resultDisplayMode) = 0;
+    virtual HRESULT GetDisplayModeIterator (/* out */ IDeckLinkDisplayModeIterator **iterator) = 0;
+
+    virtual HRESULT SetScreenPreviewCallback (/* in */ IDeckLinkScreenPreviewCallback *previewCallback) = 0;
+
+    /* Video Output */
+
+    virtual HRESULT EnableVideoOutput (/* in */ BMDDisplayMode displayMode, /* in */ BMDVideoOutputFlags flags) = 0;
+    virtual HRESULT DisableVideoOutput (void) = 0;
+
+    virtual HRESULT SetVideoOutputFrameMemoryAllocator (/* in */ IDeckLinkMemoryAllocator *theAllocator) = 0;
+    virtual HRESULT CreateVideoFrame (/* in */ int32_t width, /* in */ int32_t height, /* in */ int32_t rowBytes, /* in */ BMDPixelFormat pixelFormat, /* in */ BMDFrameFlags flags, /* out */ IDeckLinkMutableVideoFrame **outFrame) = 0;
+    virtual HRESULT CreateAncillaryData (/* in */ BMDPixelFormat pixelFormat, /* out */ IDeckLinkVideoFrameAncillary **outBuffer) = 0;
+
+    virtual HRESULT DisplayVideoFrameSync (/* in */ IDeckLinkVideoFrame *theFrame) = 0;
+    virtual HRESULT ScheduleVideoFrame (/* in */ IDeckLinkVideoFrame *theFrame, /* in */ BMDTimeValue displayTime, /* in */ BMDTimeValue displayDuration, /* in */ BMDTimeScale timeScale) = 0;
+    virtual HRESULT SetScheduledFrameCompletionCallback (/* in */ IDeckLinkVideoOutputCallback *theCallback) = 0;
+    virtual HRESULT GetBufferedVideoFrameCount (/* out */ uint32_t *bufferedFrameCount) = 0;
+
+    /* Audio Output */
+
+    virtual HRESULT EnableAudioOutput (/* in */ BMDAudioSampleRate sampleRate, /* in */ BMDAudioSampleType sampleType, /* in */ uint32_t channelCount, /* in */ BMDAudioOutputStreamType streamType) = 0;
+    virtual HRESULT DisableAudioOutput (void) = 0;
+
+    virtual HRESULT WriteAudioSamplesSync (/* in */ void *buffer, /* in */ uint32_t sampleFrameCount, /* out */ uint32_t *sampleFramesWritten) = 0;
+
+    virtual HRESULT BeginAudioPreroll (void) = 0;
+    virtual HRESULT EndAudioPreroll (void) = 0;
+    virtual HRESULT ScheduleAudioSamples (/* in */ void *buffer, /* in */ uint32_t sampleFrameCount, /* in */ BMDTimeValue streamTime, /* in */ BMDTimeScale timeScale, /* out */ uint32_t *sampleFramesWritten) = 0;
+
+    virtual HRESULT GetBufferedAudioSampleFrameCount (/* out */ uint32_t *bufferedSampleFrameCount) = 0;
+    virtual HRESULT FlushBufferedAudioSamples (void) = 0;
+
+    virtual HRESULT SetAudioCallback (/* in */ IDeckLinkAudioOutputCallback *theCallback) = 0;
+
+    /* Output Control */
+
+    virtual HRESULT StartScheduledPlayback (/* in */ BMDTimeValue playbackStartTime, /* in */ BMDTimeScale timeScale, /* in */ double playbackSpeed) = 0;
+    virtual HRESULT StopScheduledPlayback (/* in */ BMDTimeValue stopPlaybackAtTime, /* out */ BMDTimeValue *actualStopTime, /* in */ BMDTimeScale timeScale) = 0;
+    virtual HRESULT IsScheduledPlaybackRunning (/* out */ bool *active) = 0;
+    virtual HRESULT GetScheduledStreamTime (/* in */ BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue *streamTime, /* out */ double *playbackSpeed) = 0;
+    virtual HRESULT GetReferenceStatus (/* out */ BMDReferenceStatus *referenceStatus) = 0;
+
+    /* Hardware Timing */
+
+    virtual HRESULT GetHardwareReferenceClock (/* in */ BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue *hardwareTime, /* out */ BMDTimeValue *timeInFrame, /* out */ BMDTimeValue *ticksPerFrame) = 0;
+
+protected:
+    virtual ~IDeckLinkOutput_v9_9 () {}; // call Release method to drop reference count
+};
+
+#endif      // defined(__cplusplus)
+#endif	// BMD_DECKLINKAPI_v9_9_H
diff --git a/DeckLinkSDK/Linux/include/LinuxCOM.h b/DeckLinkSDK/Linux/include/LinuxCOM.h
new file mode 100644
index 0000000000..cad638c234
--- /dev/null
+++ b/DeckLinkSDK/Linux/include/LinuxCOM.h
@@ -0,0 +1,116 @@
+/* -LICENSE-START-
+** Copyright (c) 2009 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef __LINUX_COM_H_
+#define __LINUX_COM_H_
+
+struct REFIID
+{	
+	unsigned char byte0;
+	unsigned char byte1;
+	unsigned char byte2;
+	unsigned char byte3;
+	unsigned char byte4;
+	unsigned char byte5;
+	unsigned char byte6;
+	unsigned char byte7;
+	unsigned char byte8;
+	unsigned char byte9;
+	unsigned char byte10;
+	unsigned char byte11;
+	unsigned char byte12;
+	unsigned char byte13;
+	unsigned char byte14;
+	unsigned char byte15;
+};
+
+typedef REFIID CFUUIDBytes;
+#define CFUUIDGetUUIDBytes(x)	x
+
+typedef int HRESULT;
+typedef unsigned long ULONG;
+typedef void *LPVOID;
+
+#define SUCCEEDED(Status) ((HRESULT)(Status) >= 0)
+#define FAILED(Status) ((HRESULT)(Status)<0)
+
+#define IS_ERROR(Status) ((unsigned long)(Status) >> 31 == SEVERITY_ERROR)
+#define HRESULT_CODE(hr) ((hr) & 0xFFFF)
+#define HRESULT_FACILITY(hr) (((hr) >> 16) & 0x1fff)
+#define HRESULT_SEVERITY(hr) (((hr) >> 31) & 0x1)
+#define SEVERITY_SUCCESS 0
+#define SEVERITY_ERROR 1
+
+#define MAKE_HRESULT(sev,fac,code) ((HRESULT) (((unsigned long)(sev)<<31) | ((unsigned long)(fac)<<16) | ((unsigned long)(code))) )
+
+#define S_OK ((HRESULT)0x00000000L)
+#define S_FALSE ((HRESULT)0x00000001L)
+#define E_UNEXPECTED ((HRESULT)0x8000FFFFL)
+#define E_NOTIMPL ((HRESULT)0x80000001L)
+#define E_OUTOFMEMORY ((HRESULT)0x80000002L)
+#define E_INVALIDARG ((HRESULT)0x80000003L)
+#define E_NOINTERFACE ((HRESULT)0x80000004L)
+#define E_POINTER ((HRESULT)0x80000005L)
+#define E_HANDLE ((HRESULT)0x80000006L)
+#define E_ABORT ((HRESULT)0x80000007L)
+#define E_FAIL ((HRESULT)0x80000008L)
+#define E_ACCESSDENIED ((HRESULT)0x80000009L)
+
+#define STDMETHODCALLTYPE
+
+#define IID_IUnknown		(REFIID){0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x46}
+#define IUnknownUUID		IID_IUnknown
+
+#ifndef BMD_PUBLIC
+	#define BMD_PUBLIC
+#endif
+
+#ifdef __cplusplus
+class BMD_PUBLIC IUnknown
+{
+    public:
+    	virtual HRESULT STDMETHODCALLTYPE QueryInterface(REFIID iid, LPVOID *ppv) = 0;
+    	virtual ULONG STDMETHODCALLTYPE AddRef(void) = 0;
+    	virtual ULONG STDMETHODCALLTYPE Release(void) = 0;
+};
+#endif
+
+#endif 
+
diff --git a/DeckLinkSDK/Mac/include/DeckLinkAPI.h b/DeckLinkSDK/Mac/include/DeckLinkAPI.h
new file mode 100644
index 0000000000..e9070c88dc
--- /dev/null
+++ b/DeckLinkSDK/Mac/include/DeckLinkAPI.h
@@ -0,0 +1,1332 @@
+/* -LICENSE-START-
+ ** Copyright (c) 2022 Blackmagic Design
+ **  
+ ** Permission is hereby granted, free of charge, to any person or organization 
+ ** obtaining a copy of the software and accompanying documentation (the 
+ ** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+ ** and transmit the Software, and to prepare derivative works of the Software, 
+ ** and to permit third-parties to whom the Software is furnished to do so, in 
+ ** accordance with:
+ ** 
+ ** (1) if the Software is obtained from Blackmagic Design, the End User License 
+ ** Agreement for the Software Development Kit ("EULA") available at 
+ ** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+ ** 
+ ** (2) if the Software is obtained from any third party, such licensing terms 
+ ** as notified by that third party,
+ ** 
+ ** and all subject to the following:
+ ** 
+ ** (3) the copyright notices in the Software and this entire statement, 
+ ** including the above license grant, this restriction and the following 
+ ** disclaimer, must be included in all copies of the Software, in whole or in 
+ ** part, and all derivative works of the Software, unless such copies or 
+ ** derivative works are solely in the form of machine-executable object code 
+ ** generated by a source language processor.
+ ** 
+ ** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+ ** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+ ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+ ** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+ ** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+ ** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+ ** DEALINGS IN THE SOFTWARE.
+ ** 
+ ** A copy of the Software is available free of charge at 
+ ** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+ ** 
+ ** -LICENSE-END-
+ */
+
+
+#ifndef BMD_DECKLINKAPI_H
+#define BMD_DECKLINKAPI_H
+
+
+#ifndef BMD_CONST
+    #if defined(_MSC_VER)
+        #define BMD_CONST __declspec(selectany) static const
+    #else
+        #define BMD_CONST static const
+    #endif
+#endif
+
+#ifndef BMD_PUBLIC
+	#define BMD_PUBLIC
+#endif
+
+/* DeckLink API */
+
+#include <CoreFoundation/CoreFoundation.h>
+#include <CoreFoundation/CFPlugInCOM.h>
+#include <stdint.h>
+
+#include "DeckLinkAPITypes.h"
+#include "DeckLinkAPIModes.h"
+#include "DeckLinkAPIDiscovery.h"
+#include "DeckLinkAPIConfiguration.h"
+#include "DeckLinkAPIDeckControl.h"
+
+#include "DeckLinkAPIStreaming.h"
+
+#define BLACKMAGIC_DECKLINK_API_MAGIC	1
+
+// Type Declarations
+
+
+// Interface ID Declarations
+
+BMD_CONST REFIID IID_IDeckLinkVideoOutputCallback                 = /* 20AA5225-1958-47CB-820B-80A8D521A6EE */ { 0x20,0xAA,0x52,0x25,0x19,0x58,0x47,0xCB,0x82,0x0B,0x80,0xA8,0xD5,0x21,0xA6,0xEE };
+BMD_CONST REFIID IID_IDeckLinkInputCallback                       = /* C6FCE4C9-C4E4-4047-82FB-5D238232A902 */ { 0xC6,0xFC,0xE4,0xC9,0xC4,0xE4,0x40,0x47,0x82,0xFB,0x5D,0x23,0x82,0x32,0xA9,0x02 };
+BMD_CONST REFIID IID_IDeckLinkEncoderInputCallback                = /* ACF13E61-F4A0-4974-A6A7-59AFF6268B31 */ { 0xAC,0xF1,0x3E,0x61,0xF4,0xA0,0x49,0x74,0xA6,0xA7,0x59,0xAF,0xF6,0x26,0x8B,0x31 };
+BMD_CONST REFIID IID_IDeckLinkMemoryAllocator                     = /* B36EB6E7-9D29-4AA8-92EF-843B87A289E8 */ { 0xB3,0x6E,0xB6,0xE7,0x9D,0x29,0x4A,0xA8,0x92,0xEF,0x84,0x3B,0x87,0xA2,0x89,0xE8 };
+BMD_CONST REFIID IID_IDeckLinkAudioOutputCallback                 = /* 403C681B-7F46-4A12-B993-2BB127084EE6 */ { 0x40,0x3C,0x68,0x1B,0x7F,0x46,0x4A,0x12,0xB9,0x93,0x2B,0xB1,0x27,0x08,0x4E,0xE6 };
+BMD_CONST REFIID IID_IDeckLinkIterator                            = /* 50FB36CD-3063-4B73-BDBB-958087F2D8BA */ { 0x50,0xFB,0x36,0xCD,0x30,0x63,0x4B,0x73,0xBD,0xBB,0x95,0x80,0x87,0xF2,0xD8,0xBA };
+BMD_CONST REFIID IID_IDeckLinkAPIInformation                      = /* 7BEA3C68-730D-4322-AF34-8A7152B532A4 */ { 0x7B,0xEA,0x3C,0x68,0x73,0x0D,0x43,0x22,0xAF,0x34,0x8A,0x71,0x52,0xB5,0x32,0xA4 };
+BMD_CONST REFIID IID_IDeckLinkOutput                              = /* BE2D9020-461E-442F-84B7-E949CB953B9D */ { 0xBE,0x2D,0x90,0x20,0x46,0x1E,0x44,0x2F,0x84,0xB7,0xE9,0x49,0xCB,0x95,0x3B,0x9D };
+BMD_CONST REFIID IID_IDeckLinkInput                               = /* C21CDB6E-F414-46E4-A636-80A566E0ED37 */ { 0xC2,0x1C,0xDB,0x6E,0xF4,0x14,0x46,0xE4,0xA6,0x36,0x80,0xA5,0x66,0xE0,0xED,0x37 };
+BMD_CONST REFIID IID_IDeckLinkHDMIInputEDID                       = /* ABBBACBC-45BC-4665-9D92-ACE6E5A97902 */ { 0xAB,0xBB,0xAC,0xBC,0x45,0xBC,0x46,0x65,0x9D,0x92,0xAC,0xE6,0xE5,0xA9,0x79,0x02 };
+BMD_CONST REFIID IID_IDeckLinkEncoderInput                        = /* F222551D-13DF-4FD8-B587-9D4F19EC12C9 */ { 0xF2,0x22,0x55,0x1D,0x13,0xDF,0x4F,0xD8,0xB5,0x87,0x9D,0x4F,0x19,0xEC,0x12,0xC9 };
+BMD_CONST REFIID IID_IDeckLinkVideoFrame                          = /* 3F716FE0-F023-4111-BE5D-EF4414C05B17 */ { 0x3F,0x71,0x6F,0xE0,0xF0,0x23,0x41,0x11,0xBE,0x5D,0xEF,0x44,0x14,0xC0,0x5B,0x17 };
+BMD_CONST REFIID IID_IDeckLinkMutableVideoFrame                   = /* 69E2639F-40DA-4E19-B6F2-20ACE815C390 */ { 0x69,0xE2,0x63,0x9F,0x40,0xDA,0x4E,0x19,0xB6,0xF2,0x20,0xAC,0xE8,0x15,0xC3,0x90 };
+BMD_CONST REFIID IID_IDeckLinkVideoFrame3DExtensions              = /* DA0F7E4A-EDC7-48A8-9CDD-2DB51C729CD7 */ { 0xDA,0x0F,0x7E,0x4A,0xED,0xC7,0x48,0xA8,0x9C,0xDD,0x2D,0xB5,0x1C,0x72,0x9C,0xD7 };
+BMD_CONST REFIID IID_IDeckLinkVideoFrameMetadataExtensions        = /* E232A5B7-4DB4-44C9-9152-F47C12E5F051 */ { 0xE2,0x32,0xA5,0xB7,0x4D,0xB4,0x44,0xC9,0x91,0x52,0xF4,0x7C,0x12,0xE5,0xF0,0x51 };
+BMD_CONST REFIID IID_IDeckLinkVideoInputFrame                     = /* 05CFE374-537C-4094-9A57-680525118F44 */ { 0x05,0xCF,0xE3,0x74,0x53,0x7C,0x40,0x94,0x9A,0x57,0x68,0x05,0x25,0x11,0x8F,0x44 };
+BMD_CONST REFIID IID_IDeckLinkAncillaryPacket                     = /* CC5BBF7E-029C-4D3B-9158-6000EF5E3670 */ { 0xCC,0x5B,0xBF,0x7E,0x02,0x9C,0x4D,0x3B,0x91,0x58,0x60,0x00,0xEF,0x5E,0x36,0x70 };
+BMD_CONST REFIID IID_IDeckLinkAncillaryPacketIterator             = /* 3FC8994B-88FB-4C17-968F-9AAB69D964A7 */ { 0x3F,0xC8,0x99,0x4B,0x88,0xFB,0x4C,0x17,0x96,0x8F,0x9A,0xAB,0x69,0xD9,0x64,0xA7 };
+BMD_CONST REFIID IID_IDeckLinkVideoFrameAncillaryPackets          = /* 6C186C0F-459E-41D8-AEE2-4812D81AEE68 */ { 0x6C,0x18,0x6C,0x0F,0x45,0x9E,0x41,0xD8,0xAE,0xE2,0x48,0x12,0xD8,0x1A,0xEE,0x68 };
+BMD_CONST REFIID IID_IDeckLinkVideoFrameAncillary                 = /* 732E723C-D1A4-4E29-9E8E-4A88797A0004 */ { 0x73,0x2E,0x72,0x3C,0xD1,0xA4,0x4E,0x29,0x9E,0x8E,0x4A,0x88,0x79,0x7A,0x00,0x04 };
+BMD_CONST REFIID IID_IDeckLinkEncoderPacket                       = /* B693F36C-316E-4AF1-B6C2-F389A4BCA620 */ { 0xB6,0x93,0xF3,0x6C,0x31,0x6E,0x4A,0xF1,0xB6,0xC2,0xF3,0x89,0xA4,0xBC,0xA6,0x20 };
+BMD_CONST REFIID IID_IDeckLinkEncoderVideoPacket                  = /* 4E7FD944-E8C7-4EAC-B8C0-7B77F80F5AE0 */ { 0x4E,0x7F,0xD9,0x44,0xE8,0xC7,0x4E,0xAC,0xB8,0xC0,0x7B,0x77,0xF8,0x0F,0x5A,0xE0 };
+BMD_CONST REFIID IID_IDeckLinkEncoderAudioPacket                  = /* 49E8EDC8-693B-4E14-8EF6-12C658F5A07A */ { 0x49,0xE8,0xED,0xC8,0x69,0x3B,0x4E,0x14,0x8E,0xF6,0x12,0xC6,0x58,0xF5,0xA0,0x7A };
+BMD_CONST REFIID IID_IDeckLinkH265NALPacket                       = /* 639C8E0B-68D5-4BDE-A6D4-95F3AEAFF2E7 */ { 0x63,0x9C,0x8E,0x0B,0x68,0xD5,0x4B,0xDE,0xA6,0xD4,0x95,0xF3,0xAE,0xAF,0xF2,0xE7 };
+BMD_CONST REFIID IID_IDeckLinkAudioInputPacket                    = /* E43D5870-2894-11DE-8C30-0800200C9A66 */ { 0xE4,0x3D,0x58,0x70,0x28,0x94,0x11,0xDE,0x8C,0x30,0x08,0x00,0x20,0x0C,0x9A,0x66 };
+BMD_CONST REFIID IID_IDeckLinkScreenPreviewCallback               = /* B1D3F49A-85FE-4C5D-95C8-0B5D5DCCD438 */ { 0xB1,0xD3,0xF4,0x9A,0x85,0xFE,0x4C,0x5D,0x95,0xC8,0x0B,0x5D,0x5D,0xCC,0xD4,0x38 };
+BMD_CONST REFIID IID_IDeckLinkCocoaScreenPreviewCallback          = /* D174152F-8F96-4C07-83A5-DD5F5AF0A2AA */ { 0xD1,0x74,0x15,0x2F,0x8F,0x96,0x4C,0x07,0x83,0xA5,0xDD,0x5F,0x5A,0xF0,0xA2,0xAA };
+BMD_CONST REFIID IID_IDeckLinkGLScreenPreviewHelper               = /* 504E2209-CAC7-4C1A-9FB4-C5BB6274D22F */ { 0x50,0x4E,0x22,0x09,0xCA,0xC7,0x4C,0x1A,0x9F,0xB4,0xC5,0xBB,0x62,0x74,0xD2,0x2F };
+BMD_CONST REFIID IID_IDeckLinkMetalScreenPreviewHelper            = /* 1AB252C5-DACB-4AE8-A58B-5320DE9CE373 */ { 0x1A,0xB2,0x52,0xC5,0xDA,0xCB,0x4A,0xE8,0xA5,0x8B,0x53,0x20,0xDE,0x9C,0xE3,0x73 };
+BMD_CONST REFIID IID_IDeckLinkNotificationCallback                = /* B002A1EC-070D-4288-8289-BD5D36E5FF0D */ { 0xB0,0x02,0xA1,0xEC,0x07,0x0D,0x42,0x88,0x82,0x89,0xBD,0x5D,0x36,0xE5,0xFF,0x0D };
+BMD_CONST REFIID IID_IDeckLinkNotification                        = /* B85DF4C8-BDF5-47C1-8064-28162EBDD4EB */ { 0xB8,0x5D,0xF4,0xC8,0xBD,0xF5,0x47,0xC1,0x80,0x64,0x28,0x16,0x2E,0xBD,0xD4,0xEB };
+BMD_CONST REFIID IID_IDeckLinkProfileAttributes                   = /* 17D4BF8E-4911-473A-80A0-731CF6FF345B */ { 0x17,0xD4,0xBF,0x8E,0x49,0x11,0x47,0x3A,0x80,0xA0,0x73,0x1C,0xF6,0xFF,0x34,0x5B };
+BMD_CONST REFIID IID_IDeckLinkProfileIterator                     = /* 29E5A8C0-8BE4-46EB-93AC-31DAAB5B7BF2 */ { 0x29,0xE5,0xA8,0xC0,0x8B,0xE4,0x46,0xEB,0x93,0xAC,0x31,0xDA,0xAB,0x5B,0x7B,0xF2 };
+BMD_CONST REFIID IID_IDeckLinkProfile                             = /* 16093466-674A-432B-9DA0-1AC2C5A8241C */ { 0x16,0x09,0x34,0x66,0x67,0x4A,0x43,0x2B,0x9D,0xA0,0x1A,0xC2,0xC5,0xA8,0x24,0x1C };
+BMD_CONST REFIID IID_IDeckLinkProfileCallback                     = /* A4F9341E-97AA-4E04-8935-15F809898CEA */ { 0xA4,0xF9,0x34,0x1E,0x97,0xAA,0x4E,0x04,0x89,0x35,0x15,0xF8,0x09,0x89,0x8C,0xEA };
+BMD_CONST REFIID IID_IDeckLinkProfileManager                      = /* 30D41429-3998-4B6D-84F8-78C94A797C6E */ { 0x30,0xD4,0x14,0x29,0x39,0x98,0x4B,0x6D,0x84,0xF8,0x78,0xC9,0x4A,0x79,0x7C,0x6E };
+BMD_CONST REFIID IID_IDeckLinkStatus                              = /* 5F558200-4028-49BC-BEAC-DB3FA4A96E46 */ { 0x5F,0x55,0x82,0x00,0x40,0x28,0x49,0xBC,0xBE,0xAC,0xDB,0x3F,0xA4,0xA9,0x6E,0x46 };
+BMD_CONST REFIID IID_IDeckLinkKeyer                               = /* 89AFCAF5-65F8-421E-98F7-96FE5F5BFBA3 */ { 0x89,0xAF,0xCA,0xF5,0x65,0xF8,0x42,0x1E,0x98,0xF7,0x96,0xFE,0x5F,0x5B,0xFB,0xA3 };
+BMD_CONST REFIID IID_IDeckLinkVideoConversion                     = /* 3BBCB8A2-DA2C-42D9-B5D8-88083644E99A */ { 0x3B,0xBC,0xB8,0xA2,0xDA,0x2C,0x42,0xD9,0xB5,0xD8,0x88,0x08,0x36,0x44,0xE9,0x9A };
+BMD_CONST REFIID IID_IDeckLinkDeviceNotificationCallback          = /* 4997053B-0ADF-4CC8-AC70-7A50C4BE728F */ { 0x49,0x97,0x05,0x3B,0x0A,0xDF,0x4C,0xC8,0xAC,0x70,0x7A,0x50,0xC4,0xBE,0x72,0x8F };
+BMD_CONST REFIID IID_IDeckLinkDiscovery                           = /* CDBF631C-BC76-45FA-B44D-C55059BC6101 */ { 0xCD,0xBF,0x63,0x1C,0xBC,0x76,0x45,0xFA,0xB4,0x4D,0xC5,0x50,0x59,0xBC,0x61,0x01 };
+
+/* Enum BMDVideoOutputFlags - Flags to control the output of ancillary data along with video. */
+
+typedef uint32_t BMDVideoOutputFlags;
+enum _BMDVideoOutputFlags {
+    bmdVideoOutputFlagDefault                                    = 0,
+    bmdVideoOutputVANC                                           = 1 << 0,
+    bmdVideoOutputVITC                                           = 1 << 1,
+    bmdVideoOutputRP188                                          = 1 << 2,
+    bmdVideoOutputDualStream3D                                   = 1 << 4,
+    bmdVideoOutputSynchronizeToPlaybackGroup                     = 1 << 6
+};
+
+/* Enum BMDSupportedVideoModeFlags - Flags to describe supported video modes */
+
+typedef uint32_t BMDSupportedVideoModeFlags;
+enum _BMDSupportedVideoModeFlags {
+    bmdSupportedVideoModeDefault                                 = 0,
+    bmdSupportedVideoModeKeying                                  = 1 << 0,
+    bmdSupportedVideoModeDualStream3D                            = 1 << 1,
+    bmdSupportedVideoModeSDISingleLink                           = 1 << 2,
+    bmdSupportedVideoModeSDIDualLink                             = 1 << 3,
+    bmdSupportedVideoModeSDIQuadLink                             = 1 << 4,
+    bmdSupportedVideoModeInAnyProfile                            = 1 << 5
+};
+
+/* Enum BMDPacketType - Type of packet */
+
+typedef uint32_t BMDPacketType;
+enum _BMDPacketType {
+    bmdPacketTypeStreamInterruptedMarker                         = /* 'sint' */ 0x73696E74,	// A packet of this type marks the time when a video stream was interrupted, for example by a disconnected cable
+    bmdPacketTypeStreamData                                      = /* 'sdat' */ 0x73646174	// Regular stream data
+};
+
+/* Enum BMDFrameFlags - Frame flags */
+
+typedef uint32_t BMDFrameFlags;
+enum _BMDFrameFlags {
+    bmdFrameFlagDefault                                          = 0,
+    bmdFrameFlagFlipVertical                                     = 1 << 0,
+    bmdFrameContainsHDRMetadata                                  = 1 << 1,
+
+    /* Flags that are applicable only to instances of IDeckLinkVideoInputFrame */
+
+    bmdFrameCapturedAsPsF                                        = 1 << 30,
+    bmdFrameHasNoInputSource                                     = 1 << 31
+};
+
+/* Enum BMDVideoInputFlags - Flags applicable to video input */
+
+typedef uint32_t BMDVideoInputFlags;
+enum _BMDVideoInputFlags {
+    bmdVideoInputFlagDefault                                     = 0,
+    bmdVideoInputEnableFormatDetection                           = 1 << 0,
+    bmdVideoInputDualStream3D                                    = 1 << 1,
+    bmdVideoInputSynchronizeToCaptureGroup                       = 1 << 2
+};
+
+/* Enum BMDVideoInputFormatChangedEvents - Bitmask passed to the VideoInputFormatChanged notification to identify the properties of the input signal that have changed */
+
+typedef uint32_t BMDVideoInputFormatChangedEvents;
+enum _BMDVideoInputFormatChangedEvents {
+    bmdVideoInputDisplayModeChanged                              = 1 << 0,
+    bmdVideoInputFieldDominanceChanged                           = 1 << 1,
+    bmdVideoInputColorspaceChanged                               = 1 << 2
+};
+
+/* Enum BMDDetectedVideoInputFormatFlags - Flags passed to the VideoInputFormatChanged notification to describe the detected video input signal */
+
+typedef uint32_t BMDDetectedVideoInputFormatFlags;
+enum _BMDDetectedVideoInputFormatFlags {
+    bmdDetectedVideoInputYCbCr422                                = 1 << 0,
+    bmdDetectedVideoInputRGB444                                  = 1 << 1,
+    bmdDetectedVideoInputDualStream3D                            = 1 << 2,
+    bmdDetectedVideoInput12BitDepth                              = 1 << 3,
+    bmdDetectedVideoInput10BitDepth                              = 1 << 4,
+    bmdDetectedVideoInput8BitDepth                               = 1 << 5
+};
+
+/* Enum BMDDeckLinkCapturePassthroughMode - Enumerates whether the video output is electrically connected to the video input or if the clean switching mode is enabled */
+
+typedef uint32_t BMDDeckLinkCapturePassthroughMode;
+enum _BMDDeckLinkCapturePassthroughMode {
+    bmdDeckLinkCapturePassthroughModeDisabled                    = /* 'pdis' */ 0x70646973,
+    bmdDeckLinkCapturePassthroughModeDirect                      = /* 'pdir' */ 0x70646972,
+    bmdDeckLinkCapturePassthroughModeCleanSwitch                 = /* 'pcln' */ 0x70636C6E
+};
+
+/* Enum BMDOutputFrameCompletionResult - Frame Completion Callback */
+
+typedef uint32_t BMDOutputFrameCompletionResult;
+enum _BMDOutputFrameCompletionResult {
+    bmdOutputFrameCompleted,
+    bmdOutputFrameDisplayedLate,
+    bmdOutputFrameDropped,
+    bmdOutputFrameFlushed
+};
+
+/* Enum BMDReferenceStatus - GenLock input status */
+
+typedef uint32_t BMDReferenceStatus;
+enum _BMDReferenceStatus {
+    bmdReferenceUnlocked                                         = 0,
+    bmdReferenceNotSupportedByHardware                           = 1 << 0,
+    bmdReferenceLocked                                           = 1 << 1
+};
+
+/* Enum BMDAudioFormat - Audio Format */
+
+typedef uint32_t BMDAudioFormat;
+enum _BMDAudioFormat {
+    bmdAudioFormatPCM                                            = /* 'lpcm' */ 0x6C70636D	// Linear signed PCM samples
+};
+
+/* Enum BMDAudioSampleRate - Audio sample rates supported for output/input */
+
+typedef uint32_t BMDAudioSampleRate;
+enum _BMDAudioSampleRate {
+    bmdAudioSampleRate48kHz                                      = 48000
+};
+
+/* Enum BMDAudioSampleType - Audio sample sizes supported for output/input */
+
+typedef uint32_t BMDAudioSampleType;
+enum _BMDAudioSampleType {
+    bmdAudioSampleType16bitInteger                               = 16,
+    bmdAudioSampleType32bitInteger                               = 32
+};
+
+/* Enum BMDAudioOutputStreamType - Audio output stream type */
+
+typedef uint32_t BMDAudioOutputStreamType;
+enum _BMDAudioOutputStreamType {
+    bmdAudioOutputStreamContinuous,
+    bmdAudioOutputStreamContinuousDontResample,
+    bmdAudioOutputStreamTimestamped
+};
+
+/* Enum BMDAncillaryPacketFormat - Ancillary packet format */
+
+typedef uint32_t BMDAncillaryPacketFormat;
+enum _BMDAncillaryPacketFormat {
+    bmdAncillaryPacketFormatUInt8                                = /* 'ui08' */ 0x75693038,
+    bmdAncillaryPacketFormatUInt16                               = /* 'ui16' */ 0x75693136,
+    bmdAncillaryPacketFormatYCbCr10                              = /* 'v210' */ 0x76323130
+};
+
+/* Enum BMDTimecodeFormat - Timecode formats for frame metadata */
+
+typedef uint32_t BMDTimecodeFormat;
+enum _BMDTimecodeFormat {
+    bmdTimecodeRP188VITC1                                        = /* 'rpv1' */ 0x72707631,	// RP188 timecode where DBB1 equals VITC1 (line 9)
+    bmdTimecodeRP188VITC2                                        = /* 'rp12' */ 0x72703132,	// RP188 timecode where DBB1 equals VITC2 (line 9 for progressive or line 571 for interlaced/PsF)
+    bmdTimecodeRP188LTC                                          = /* 'rplt' */ 0x72706C74,	// RP188 timecode where DBB1 equals LTC (line 10)
+    bmdTimecodeRP188HighFrameRate                                = /* 'rphr' */ 0x72706872,	// RP188 timecode where DBB1 is an HFRTC (SMPTE ST 12-3), the only timecode allowing the frame value to go above 30
+    bmdTimecodeRP188Any                                          = /* 'rp18' */ 0x72703138,	// Convenience for capture, returning the first valid timecode in {HFRTC (if supported), VITC1, VITC2, LTC }
+    bmdTimecodeVITC                                              = /* 'vitc' */ 0x76697463,
+    bmdTimecodeVITCField2                                        = /* 'vit2' */ 0x76697432,
+    bmdTimecodeSerial                                            = /* 'seri' */ 0x73657269
+};
+
+/* Enum BMDAnalogVideoFlags - Analog video display flags */
+
+typedef uint32_t BMDAnalogVideoFlags;
+enum _BMDAnalogVideoFlags {
+    bmdAnalogVideoFlagCompositeSetup75                           = 1 << 0,
+    bmdAnalogVideoFlagComponentBetacamLevels                     = 1 << 1
+};
+
+/* Enum BMDAudioOutputAnalogAESSwitch - Audio output Analog/AESEBU switch */
+
+typedef uint32_t BMDAudioOutputAnalogAESSwitch;
+enum _BMDAudioOutputAnalogAESSwitch {
+    bmdAudioOutputSwitchAESEBU                                   = /* 'aes ' */ 0x61657320,
+    bmdAudioOutputSwitchAnalog                                   = /* 'anlg' */ 0x616E6C67
+};
+
+/* Enum BMDVideoOutputConversionMode - Video/audio conversion mode */
+
+typedef uint32_t BMDVideoOutputConversionMode;
+enum _BMDVideoOutputConversionMode {
+    bmdNoVideoOutputConversion                                   = /* 'none' */ 0x6E6F6E65,
+    bmdVideoOutputLetterboxDownconversion                        = /* 'ltbx' */ 0x6C746278,
+    bmdVideoOutputAnamorphicDownconversion                       = /* 'amph' */ 0x616D7068,
+    bmdVideoOutputHD720toHD1080Conversion                        = /* '720c' */ 0x37323063,
+    bmdVideoOutputHardwareLetterboxDownconversion                = /* 'HWlb' */ 0x48576C62,
+    bmdVideoOutputHardwareAnamorphicDownconversion               = /* 'HWam' */ 0x4857616D,
+    bmdVideoOutputHardwareCenterCutDownconversion                = /* 'HWcc' */ 0x48576363,
+    bmdVideoOutputHardware720p1080pCrossconversion               = /* 'xcap' */ 0x78636170,
+    bmdVideoOutputHardwareAnamorphic720pUpconversion             = /* 'ua7p' */ 0x75613770,
+    bmdVideoOutputHardwareAnamorphic1080iUpconversion            = /* 'ua1i' */ 0x75613169,
+    bmdVideoOutputHardwareAnamorphic149To720pUpconversion        = /* 'u47p' */ 0x75343770,
+    bmdVideoOutputHardwareAnamorphic149To1080iUpconversion       = /* 'u41i' */ 0x75343169,
+    bmdVideoOutputHardwarePillarbox720pUpconversion              = /* 'up7p' */ 0x75703770,
+    bmdVideoOutputHardwarePillarbox1080iUpconversion             = /* 'up1i' */ 0x75703169
+};
+
+/* Enum BMDVideoInputConversionMode - Video input conversion mode */
+
+typedef uint32_t BMDVideoInputConversionMode;
+enum _BMDVideoInputConversionMode {
+    bmdNoVideoInputConversion                                    = /* 'none' */ 0x6E6F6E65,
+    bmdVideoInputLetterboxDownconversionFromHD1080               = /* '10lb' */ 0x31306C62,
+    bmdVideoInputAnamorphicDownconversionFromHD1080              = /* '10am' */ 0x3130616D,
+    bmdVideoInputLetterboxDownconversionFromHD720                = /* '72lb' */ 0x37326C62,
+    bmdVideoInputAnamorphicDownconversionFromHD720               = /* '72am' */ 0x3732616D,
+    bmdVideoInputLetterboxUpconversion                           = /* 'lbup' */ 0x6C627570,
+    bmdVideoInputAnamorphicUpconversion                          = /* 'amup' */ 0x616D7570
+};
+
+/* Enum BMDVideo3DPackingFormat - Video 3D packing format */
+
+typedef uint32_t BMDVideo3DPackingFormat;
+enum _BMDVideo3DPackingFormat {
+    bmdVideo3DPackingSidebySideHalf                              = /* 'sbsh' */ 0x73627368,
+    bmdVideo3DPackingLinebyLine                                  = /* 'lbyl' */ 0x6C62796C,
+    bmdVideo3DPackingTopAndBottom                                = /* 'tabo' */ 0x7461626F,
+    bmdVideo3DPackingFramePacking                                = /* 'frpk' */ 0x6672706B,
+    bmdVideo3DPackingLeftOnly                                    = /* 'left' */ 0x6C656674,
+    bmdVideo3DPackingRightOnly                                   = /* 'righ' */ 0x72696768
+};
+
+/* Enum BMDIdleVideoOutputOperation - Video output operation when not playing video */
+
+typedef uint32_t BMDIdleVideoOutputOperation;
+enum _BMDIdleVideoOutputOperation {
+    bmdIdleVideoOutputBlack                                      = /* 'blac' */ 0x626C6163,
+    bmdIdleVideoOutputLastFrame                                  = /* 'lafa' */ 0x6C616661
+};
+
+/* Enum BMDVideoEncoderFrameCodingMode - Video frame coding mode */
+
+typedef uint32_t BMDVideoEncoderFrameCodingMode;
+enum _BMDVideoEncoderFrameCodingMode {
+    bmdVideoEncoderFrameCodingModeInter                          = /* 'inte' */ 0x696E7465,
+    bmdVideoEncoderFrameCodingModeIntra                          = /* 'intr' */ 0x696E7472
+};
+
+/* Enum BMDDNxHRLevel - DNxHR Levels */
+
+typedef uint32_t BMDDNxHRLevel;
+enum _BMDDNxHRLevel {
+    bmdDNxHRLevelSQ                                              = /* 'dnsq' */ 0x646E7371,
+    bmdDNxHRLevelLB                                              = /* 'dnlb' */ 0x646E6C62,
+    bmdDNxHRLevelHQ                                              = /* 'dnhq' */ 0x646E6871,
+    bmdDNxHRLevelHQX                                             = /* 'dhqx' */ 0x64687178,
+    bmdDNxHRLevel444                                             = /* 'd444' */ 0x64343434
+};
+
+/* Enum BMDLinkConfiguration - Video link configuration */
+
+typedef uint32_t BMDLinkConfiguration;
+enum _BMDLinkConfiguration {
+    bmdLinkConfigurationSingleLink                               = /* 'lcsl' */ 0x6C63736C,
+    bmdLinkConfigurationDualLink                                 = /* 'lcdl' */ 0x6C63646C,
+    bmdLinkConfigurationQuadLink                                 = /* 'lcql' */ 0x6C63716C
+};
+
+/* Enum BMDDeviceInterface - Device interface type */
+
+typedef uint32_t BMDDeviceInterface;
+enum _BMDDeviceInterface {
+    bmdDeviceInterfacePCI                                        = /* 'pci ' */ 0x70636920,
+    bmdDeviceInterfaceUSB                                        = /* 'usb ' */ 0x75736220,
+    bmdDeviceInterfaceThunderbolt                                = /* 'thun' */ 0x7468756E
+};
+
+/* Enum BMDColorspace - Colorspace */
+
+typedef uint32_t BMDColorspace;
+enum _BMDColorspace {
+    bmdColorspaceRec601                                          = /* 'r601' */ 0x72363031,
+    bmdColorspaceRec709                                          = /* 'r709' */ 0x72373039,
+    bmdColorspaceRec2020                                         = /* '2020' */ 0x32303230
+};
+
+/* Enum BMDDynamicRange - SDR or HDR */
+
+typedef uint32_t BMDDynamicRange;
+enum _BMDDynamicRange {
+    bmdDynamicRangeSDR                                           = 0,	// Standard Dynamic Range in accordance with SMPTE ST 2036-1
+    bmdDynamicRangeHDRStaticPQ                                   = 1 << 29,	// High Dynamic Range PQ in accordance with SMPTE ST 2084
+    bmdDynamicRangeHDRStaticHLG                                  = 1 << 30	// High Dynamic Range HLG in accordance with ITU-R BT.2100-0
+};
+
+/* Enum BMDDeckLinkHDMIInputEDIDID - DeckLink HDMI Input EDID ID */
+
+typedef uint32_t BMDDeckLinkHDMIInputEDIDID;
+enum _BMDDeckLinkHDMIInputEDIDID {
+
+    /* Integers */
+
+    bmdDeckLinkHDMIInputEDIDDynamicRange                         = /* 'HIDy' */ 0x48494479	// Parameter is of type BMDDynamicRange. Default is (bmdDynamicRangeSDR|bmdDynamicRangeHDRStaticPQ)
+};
+
+/* Enum BMDDeckLinkFrameMetadataID - DeckLink Frame Metadata ID */
+
+typedef uint32_t BMDDeckLinkFrameMetadataID;
+enum _BMDDeckLinkFrameMetadataID {
+
+    /* Colorspace Metadata - Integers */
+
+    bmdDeckLinkFrameMetadataColorspace                           = /* 'cspc' */ 0x63737063,	// Colorspace of video frame (see BMDColorspace)
+
+    /* HDR Metadata - Integers */
+
+    bmdDeckLinkFrameMetadataHDRElectroOpticalTransferFunc        = /* 'eotf' */ 0x656F7466,	// EOTF in range 0-7 as per CEA 861.3
+
+    /* HDR Metadata - Floats */
+
+    bmdDeckLinkFrameMetadataHDRDisplayPrimariesRedX              = /* 'hdrx' */ 0x68647278,	// Red display primaries in range 0.0 - 1.0
+    bmdDeckLinkFrameMetadataHDRDisplayPrimariesRedY              = /* 'hdry' */ 0x68647279,	// Red display primaries in range 0.0 - 1.0
+    bmdDeckLinkFrameMetadataHDRDisplayPrimariesGreenX            = /* 'hdgx' */ 0x68646778,	// Green display primaries in range 0.0 - 1.0
+    bmdDeckLinkFrameMetadataHDRDisplayPrimariesGreenY            = /* 'hdgy' */ 0x68646779,	// Green display primaries in range 0.0 - 1.0
+    bmdDeckLinkFrameMetadataHDRDisplayPrimariesBlueX             = /* 'hdbx' */ 0x68646278,	// Blue display primaries in range 0.0 - 1.0
+    bmdDeckLinkFrameMetadataHDRDisplayPrimariesBlueY             = /* 'hdby' */ 0x68646279,	// Blue display primaries in range 0.0 - 1.0
+    bmdDeckLinkFrameMetadataHDRWhitePointX                       = /* 'hdwx' */ 0x68647778,	// White point in range 0.0 - 1.0
+    bmdDeckLinkFrameMetadataHDRWhitePointY                       = /* 'hdwy' */ 0x68647779,	// White point in range 0.0 - 1.0
+    bmdDeckLinkFrameMetadataHDRMaxDisplayMasteringLuminance      = /* 'hdml' */ 0x68646D6C,	// Max display mastering luminance in range 1 cd/m2 - 65535 cd/m2
+    bmdDeckLinkFrameMetadataHDRMinDisplayMasteringLuminance      = /* 'hmil' */ 0x686D696C,	// Min display mastering luminance in range 0.0001 cd/m2 - 6.5535 cd/m2
+    bmdDeckLinkFrameMetadataHDRMaximumContentLightLevel          = /* 'mcll' */ 0x6D636C6C,	// Maximum Content Light Level in range 1 cd/m2 - 65535 cd/m2
+    bmdDeckLinkFrameMetadataHDRMaximumFrameAverageLightLevel     = /* 'fall' */ 0x66616C6C	// Maximum Frame Average Light Level in range 1 cd/m2 - 65535 cd/m2
+};
+
+/* Enum BMDProfileID - Identifies a profile */
+
+typedef uint32_t BMDProfileID;
+enum _BMDProfileID {
+    bmdProfileOneSubDeviceFullDuplex                             = /* '1dfd' */ 0x31646664,
+    bmdProfileOneSubDeviceHalfDuplex                             = /* '1dhd' */ 0x31646864,
+    bmdProfileTwoSubDevicesFullDuplex                            = /* '2dfd' */ 0x32646664,
+    bmdProfileTwoSubDevicesHalfDuplex                            = /* '2dhd' */ 0x32646864,
+    bmdProfileFourSubDevicesHalfDuplex                           = /* '4dhd' */ 0x34646864
+};
+
+/* Enum BMDHDMITimecodePacking - Packing form of timecode on HDMI */
+
+typedef uint32_t BMDHDMITimecodePacking;
+enum _BMDHDMITimecodePacking {
+    bmdHDMITimecodePackingIEEEOUI000085                          = 0x00008500,
+    bmdHDMITimecodePackingIEEEOUI080046                          = 0x08004601,
+    bmdHDMITimecodePackingIEEEOUI5CF9F0                          = 0x5CF9F003
+};
+
+/* Enum BMDInternalKeyingAncillaryDataSource - Source for VANC and timecode data when performing internal keying */
+
+typedef uint32_t BMDInternalKeyingAncillaryDataSource;
+enum _BMDInternalKeyingAncillaryDataSource {
+    bmdInternalKeyingUsesAncillaryDataFromInputSignal            = /* 'ikai' */ 0x696B6169,
+    bmdInternalKeyingUsesAncillaryDataFromKeyFrame               = /* 'ikak' */ 0x696B616B
+};
+
+/* Enum BMDDeckLinkAttributeID - DeckLink Attribute ID */
+
+typedef uint32_t BMDDeckLinkAttributeID;
+enum _BMDDeckLinkAttributeID {
+
+    /* Flags */
+
+    BMDDeckLinkSupportsInternalKeying                            = /* 'keyi' */ 0x6B657969,
+    BMDDeckLinkSupportsExternalKeying                            = /* 'keye' */ 0x6B657965,
+    BMDDeckLinkSupportsInputFormatDetection                      = /* 'infd' */ 0x696E6664,
+    BMDDeckLinkHasReferenceInput                                 = /* 'hrin' */ 0x6872696E,
+    BMDDeckLinkHasSerialPort                                     = /* 'hspt' */ 0x68737074,
+    BMDDeckLinkHasAnalogVideoOutputGain                          = /* 'avog' */ 0x61766F67,
+    BMDDeckLinkCanOnlyAdjustOverallVideoOutputGain               = /* 'ovog' */ 0x6F766F67,
+    BMDDeckLinkHasVideoInputAntiAliasingFilter                   = /* 'aafl' */ 0x6161666C,
+    BMDDeckLinkHasBypass                                         = /* 'byps' */ 0x62797073,
+    BMDDeckLinkSupportsClockTimingAdjustment                     = /* 'ctad' */ 0x63746164,
+    BMDDeckLinkSupportsFullFrameReferenceInputTimingOffset       = /* 'frin' */ 0x6672696E,
+    BMDDeckLinkSupportsSMPTELevelAOutput                         = /* 'lvla' */ 0x6C766C61,
+    BMDDeckLinkSupportsAutoSwitchingPPsFOnInput                  = /* 'apsf' */ 0x61707366,
+    BMDDeckLinkSupportsDualLinkSDI                               = /* 'sdls' */ 0x73646C73,
+    BMDDeckLinkSupportsQuadLinkSDI                               = /* 'sqls' */ 0x73716C73,
+    BMDDeckLinkSupportsIdleOutput                                = /* 'idou' */ 0x69646F75,
+    BMDDeckLinkVANCRequires10BitYUVVideoFrames                   = /* 'vioY' */ 0x76696F59,	// Legacy product requires v210 active picture for IDeckLinkVideoFrameAncillaryPackets or 10-bit VANC
+    BMDDeckLinkHasLTCTimecodeInput                               = /* 'hltc' */ 0x686C7463,
+    BMDDeckLinkSupportsHDRMetadata                               = /* 'hdrm' */ 0x6864726D,
+    BMDDeckLinkSupportsColorspaceMetadata                        = /* 'cmet' */ 0x636D6574,
+    BMDDeckLinkSupportsHDMITimecode                              = /* 'htim' */ 0x6874696D,
+    BMDDeckLinkSupportsHighFrameRateTimecode                     = /* 'HFRT' */ 0x48465254,
+    BMDDeckLinkSupportsSynchronizeToCaptureGroup                 = /* 'stcg' */ 0x73746367,
+    BMDDeckLinkSupportsSynchronizeToPlaybackGroup                = /* 'stpg' */ 0x73747067,
+
+    /* Integers */
+
+    BMDDeckLinkMaximumAudioChannels                              = /* 'mach' */ 0x6D616368,
+    BMDDeckLinkMaximumAnalogAudioInputChannels                   = /* 'iach' */ 0x69616368,
+    BMDDeckLinkMaximumAnalogAudioOutputChannels                  = /* 'aach' */ 0x61616368,
+    BMDDeckLinkNumberOfSubDevices                                = /* 'nsbd' */ 0x6E736264,
+    BMDDeckLinkSubDeviceIndex                                    = /* 'subi' */ 0x73756269,
+    BMDDeckLinkPersistentID                                      = /* 'peid' */ 0x70656964,
+    BMDDeckLinkDeviceGroupID                                     = /* 'dgid' */ 0x64676964,
+    BMDDeckLinkTopologicalID                                     = /* 'toid' */ 0x746F6964,
+    BMDDeckLinkVideoOutputConnections                            = /* 'vocn' */ 0x766F636E,	// Returns a BMDVideoConnection bit field
+    BMDDeckLinkVideoInputConnections                             = /* 'vicn' */ 0x7669636E,	// Returns a BMDVideoConnection bit field
+    BMDDeckLinkAudioOutputConnections                            = /* 'aocn' */ 0x616F636E,	// Returns a BMDAudioConnection bit field
+    BMDDeckLinkAudioInputConnections                             = /* 'aicn' */ 0x6169636E,	// Returns a BMDAudioConnection bit field
+    BMDDeckLinkVideoIOSupport                                    = /* 'vios' */ 0x76696F73,	// Returns a BMDVideoIOSupport bit field
+    BMDDeckLinkDeckControlConnections                            = /* 'dccn' */ 0x6463636E,	// Returns a BMDDeckControlConnection bit field
+    BMDDeckLinkDeviceInterface                                   = /* 'dbus' */ 0x64627573,	// Returns a BMDDeviceInterface
+    BMDDeckLinkAudioInputRCAChannelCount                         = /* 'airc' */ 0x61697263,
+    BMDDeckLinkAudioInputXLRChannelCount                         = /* 'aixc' */ 0x61697863,
+    BMDDeckLinkAudioOutputRCAChannelCount                        = /* 'aorc' */ 0x616F7263,
+    BMDDeckLinkAudioOutputXLRChannelCount                        = /* 'aoxc' */ 0x616F7863,
+    BMDDeckLinkProfileID                                         = /* 'prid' */ 0x70726964,	// Returns a BMDProfileID
+    BMDDeckLinkDuplex                                            = /* 'dupx' */ 0x64757078,
+    BMDDeckLinkMinimumPrerollFrames                              = /* 'mprf' */ 0x6D707266,
+    BMDDeckLinkSupportedDynamicRange                             = /* 'sudr' */ 0x73756472,
+
+    /* Floats */
+
+    BMDDeckLinkVideoInputGainMinimum                             = /* 'vigm' */ 0x7669676D,
+    BMDDeckLinkVideoInputGainMaximum                             = /* 'vigx' */ 0x76696778,
+    BMDDeckLinkVideoOutputGainMinimum                            = /* 'vogm' */ 0x766F676D,
+    BMDDeckLinkVideoOutputGainMaximum                            = /* 'vogx' */ 0x766F6778,
+    BMDDeckLinkMicrophoneInputGainMinimum                        = /* 'migm' */ 0x6D69676D,
+    BMDDeckLinkMicrophoneInputGainMaximum                        = /* 'migx' */ 0x6D696778,
+
+    /* Strings */
+
+    BMDDeckLinkSerialPortDeviceName                              = /* 'slpn' */ 0x736C706E,
+    BMDDeckLinkVendorName                                        = /* 'vndr' */ 0x766E6472,
+    BMDDeckLinkDisplayName                                       = /* 'dspn' */ 0x6473706E,
+    BMDDeckLinkModelName                                         = /* 'mdln' */ 0x6D646C6E,
+    BMDDeckLinkDeviceHandle                                      = /* 'devh' */ 0x64657668
+};
+
+/* Enum BMDDeckLinkAPIInformationID - DeckLinkAPI information ID */
+
+typedef uint32_t BMDDeckLinkAPIInformationID;
+enum _BMDDeckLinkAPIInformationID {
+
+    /* Integer or String */
+
+    BMDDeckLinkAPIVersion                                        = /* 'vers' */ 0x76657273
+};
+
+/* Enum BMDDeckLinkStatusID - DeckLink Status ID */
+
+typedef uint32_t BMDDeckLinkStatusID;
+enum _BMDDeckLinkStatusID {
+
+    /* Integers */
+
+    bmdDeckLinkStatusDetectedVideoInputMode                      = /* 'dvim' */ 0x6476696D,
+    bmdDeckLinkStatusDetectedVideoInputFormatFlags               = /* 'dvff' */ 0x64766666,
+    bmdDeckLinkStatusDetectedVideoInputFieldDominance            = /* 'dvfd' */ 0x64766664,
+    bmdDeckLinkStatusDetectedVideoInputColorspace                = /* 'dscl' */ 0x6473636C,
+    bmdDeckLinkStatusDetectedVideoInputDynamicRange              = /* 'dsdr' */ 0x64736472,
+    bmdDeckLinkStatusDetectedSDILinkConfiguration                = /* 'dslc' */ 0x64736C63,
+    bmdDeckLinkStatusCurrentVideoInputMode                       = /* 'cvim' */ 0x6376696D,
+    bmdDeckLinkStatusCurrentVideoInputPixelFormat                = /* 'cvip' */ 0x63766970,
+    bmdDeckLinkStatusCurrentVideoInputFlags                      = /* 'cvif' */ 0x63766966,
+    bmdDeckLinkStatusCurrentVideoOutputMode                      = /* 'cvom' */ 0x63766F6D,
+    bmdDeckLinkStatusCurrentVideoOutputFlags                     = /* 'cvof' */ 0x63766F66,
+    bmdDeckLinkStatusPCIExpressLinkWidth                         = /* 'pwid' */ 0x70776964,
+    bmdDeckLinkStatusPCIExpressLinkSpeed                         = /* 'plnk' */ 0x706C6E6B,
+    bmdDeckLinkStatusLastVideoOutputPixelFormat                  = /* 'opix' */ 0x6F706978,
+    bmdDeckLinkStatusReferenceSignalMode                         = /* 'refm' */ 0x7265666D,
+    bmdDeckLinkStatusReferenceSignalFlags                        = /* 'reff' */ 0x72656666,
+    bmdDeckLinkStatusBusy                                        = /* 'busy' */ 0x62757379,
+    bmdDeckLinkStatusInterchangeablePanelType                    = /* 'icpt' */ 0x69637074,
+    bmdDeckLinkStatusDeviceTemperature                           = /* 'dtmp' */ 0x64746D70,
+
+    /* Flags */
+
+    bmdDeckLinkStatusVideoInputSignalLocked                      = /* 'visl' */ 0x7669736C,
+    bmdDeckLinkStatusReferenceSignalLocked                       = /* 'refl' */ 0x7265666C,
+
+    /* Bytes */
+
+    bmdDeckLinkStatusReceivedEDID                                = /* 'edid' */ 0x65646964
+};
+
+/* Enum BMDDeckLinkVideoStatusFlags -  */
+
+typedef uint32_t BMDDeckLinkVideoStatusFlags;
+enum _BMDDeckLinkVideoStatusFlags {
+    bmdDeckLinkVideoStatusPsF                                    = 1 << 0,
+    bmdDeckLinkVideoStatusDualStream3D                           = 1 << 1
+};
+
+/* Enum BMDDuplexMode - Duplex of the device */
+
+typedef uint32_t BMDDuplexMode;
+enum _BMDDuplexMode {
+    bmdDuplexFull                                                = /* 'dxfu' */ 0x64786675,
+    bmdDuplexHalf                                                = /* 'dxha' */ 0x64786861,
+    bmdDuplexSimplex                                             = /* 'dxsp' */ 0x64787370,
+    bmdDuplexInactive                                            = /* 'dxin' */ 0x6478696E
+};
+
+/* Enum BMDPanelType - The type of interchangeable panel */
+
+typedef uint32_t BMDPanelType;
+enum _BMDPanelType {
+    bmdPanelNotDetected                                          = /* 'npnl' */ 0x6E706E6C,
+    bmdPanelTeranexMiniSmartPanel                                = /* 'tmsm' */ 0x746D736D
+};
+
+/* Enum BMDDeviceBusyState - Current device busy state */
+
+typedef uint32_t BMDDeviceBusyState;
+enum _BMDDeviceBusyState {
+    bmdDeviceCaptureBusy                                         = 1 << 0,
+    bmdDevicePlaybackBusy                                        = 1 << 1,
+    bmdDeviceSerialPortBusy                                      = 1 << 2
+};
+
+/* Enum BMDVideoIOSupport - Device video input/output support */
+
+typedef uint32_t BMDVideoIOSupport;
+enum _BMDVideoIOSupport {
+    bmdDeviceSupportsCapture                                     = 1 << 0,
+    bmdDeviceSupportsPlayback                                    = 1 << 1
+};
+
+/* Enum BMD3DPreviewFormat - Linked Frame preview format */
+
+typedef uint32_t BMD3DPreviewFormat;
+enum _BMD3DPreviewFormat {
+    bmd3DPreviewFormatDefault                                    = /* 'defa' */ 0x64656661,
+    bmd3DPreviewFormatLeftOnly                                   = /* 'left' */ 0x6C656674,
+    bmd3DPreviewFormatRightOnly                                  = /* 'righ' */ 0x72696768,
+    bmd3DPreviewFormatSideBySide                                 = /* 'side' */ 0x73696465,
+    bmd3DPreviewFormatTopBottom                                  = /* 'topb' */ 0x746F7062
+};
+
+/* Enum BMDNotifications - Events that can be subscribed through IDeckLinkNotification */
+
+typedef uint32_t BMDNotifications;
+enum _BMDNotifications {
+    bmdPreferencesChanged                                        = /* 'pref' */ 0x70726566,
+    bmdStatusChanged                                             = /* 'stat' */ 0x73746174
+};
+
+#if defined(__cplusplus)
+
+// Forward Declarations
+
+class IDeckLinkVideoOutputCallback;
+class IDeckLinkInputCallback;
+class IDeckLinkEncoderInputCallback;
+class IDeckLinkMemoryAllocator;
+class IDeckLinkAudioOutputCallback;
+class IDeckLinkIterator;
+class IDeckLinkAPIInformation;
+class IDeckLinkOutput;
+class IDeckLinkInput;
+class IDeckLinkHDMIInputEDID;
+class IDeckLinkEncoderInput;
+class IDeckLinkVideoFrame;
+class IDeckLinkMutableVideoFrame;
+class IDeckLinkVideoFrame3DExtensions;
+class IDeckLinkVideoFrameMetadataExtensions;
+class IDeckLinkVideoInputFrame;
+class IDeckLinkAncillaryPacket;
+class IDeckLinkAncillaryPacketIterator;
+class IDeckLinkVideoFrameAncillaryPackets;
+class IDeckLinkVideoFrameAncillary;
+class IDeckLinkEncoderPacket;
+class IDeckLinkEncoderVideoPacket;
+class IDeckLinkEncoderAudioPacket;
+class IDeckLinkH265NALPacket;
+class IDeckLinkAudioInputPacket;
+class IDeckLinkScreenPreviewCallback;
+class IDeckLinkCocoaScreenPreviewCallback;
+class IDeckLinkGLScreenPreviewHelper;
+class IDeckLinkMetalScreenPreviewHelper;
+class IDeckLinkNotificationCallback;
+class IDeckLinkNotification;
+class IDeckLinkProfileAttributes;
+class IDeckLinkProfileIterator;
+class IDeckLinkProfile;
+class IDeckLinkProfileCallback;
+class IDeckLinkProfileManager;
+class IDeckLinkStatus;
+class IDeckLinkKeyer;
+class IDeckLinkVideoConversion;
+class IDeckLinkDeviceNotificationCallback;
+class IDeckLinkDiscovery;
+
+/* Interface IDeckLinkVideoOutputCallback - Frame completion callback. */
+
+class BMD_PUBLIC IDeckLinkVideoOutputCallback : public IUnknown
+{
+public:
+    virtual HRESULT ScheduledFrameCompleted (/* in */ IDeckLinkVideoFrame* completedFrame, /* in */ BMDOutputFrameCompletionResult result) = 0;
+    virtual HRESULT ScheduledPlaybackHasStopped (void) = 0;
+
+protected:
+    virtual ~IDeckLinkVideoOutputCallback () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkInputCallback - Frame arrival callback. */
+
+class BMD_PUBLIC IDeckLinkInputCallback : public IUnknown
+{
+public:
+    virtual HRESULT VideoInputFormatChanged (/* in */ BMDVideoInputFormatChangedEvents notificationEvents, /* in */ IDeckLinkDisplayMode* newDisplayMode, /* in */ BMDDetectedVideoInputFormatFlags detectedSignalFlags) = 0;
+    virtual HRESULT VideoInputFrameArrived (/* in */ IDeckLinkVideoInputFrame* videoFrame, /* in */ IDeckLinkAudioInputPacket* audioPacket) = 0;
+
+protected:
+    virtual ~IDeckLinkInputCallback () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkEncoderInputCallback - Frame arrival callback. */
+
+class BMD_PUBLIC IDeckLinkEncoderInputCallback : public IUnknown
+{
+public:
+    virtual HRESULT VideoInputSignalChanged (/* in */ BMDVideoInputFormatChangedEvents notificationEvents, /* in */ IDeckLinkDisplayMode* newDisplayMode, /* in */ BMDDetectedVideoInputFormatFlags detectedSignalFlags) = 0;
+    virtual HRESULT VideoPacketArrived (/* in */ IDeckLinkEncoderVideoPacket* videoPacket) = 0;
+    virtual HRESULT AudioPacketArrived (/* in */ IDeckLinkEncoderAudioPacket* audioPacket) = 0;
+
+protected:
+    virtual ~IDeckLinkEncoderInputCallback () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkMemoryAllocator - Memory allocator for video frames. */
+
+class BMD_PUBLIC IDeckLinkMemoryAllocator : public IUnknown
+{
+public:
+    virtual HRESULT AllocateBuffer (/* in */ uint32_t bufferSize, /* out */ void** allocatedBuffer) = 0;
+    virtual HRESULT ReleaseBuffer (/* in */ void* buffer) = 0;
+    virtual HRESULT Commit (void) = 0;
+    virtual HRESULT Decommit (void) = 0;
+};
+
+/* Interface IDeckLinkAudioOutputCallback - Optional callback to allow audio samples to be pulled as required. */
+
+class BMD_PUBLIC IDeckLinkAudioOutputCallback : public IUnknown
+{
+public:
+    virtual HRESULT RenderAudioSamples (/* in */ bool preroll) = 0;
+};
+
+/* Interface IDeckLinkIterator - Enumerates installed DeckLink hardware */
+
+class BMD_PUBLIC IDeckLinkIterator : public IUnknown
+{
+public:
+    virtual HRESULT Next (/* out */ IDeckLink** deckLinkInstance) = 0;
+};
+
+/* Interface IDeckLinkAPIInformation - DeckLinkAPI attribute interface */
+
+class BMD_PUBLIC IDeckLinkAPIInformation : public IUnknown
+{
+public:
+    virtual HRESULT GetFlag (/* in */ BMDDeckLinkAPIInformationID cfgID, /* out */ bool* value) = 0;
+    virtual HRESULT GetInt (/* in */ BMDDeckLinkAPIInformationID cfgID, /* out */ int64_t* value) = 0;
+    virtual HRESULT GetFloat (/* in */ BMDDeckLinkAPIInformationID cfgID, /* out */ double* value) = 0;
+    virtual HRESULT GetString (/* in */ BMDDeckLinkAPIInformationID cfgID, /* out */ CFStringRef* value) = 0;
+
+protected:
+    virtual ~IDeckLinkAPIInformation () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkOutput - Created by QueryInterface from IDeckLink. */
+
+class BMD_PUBLIC IDeckLinkOutput : public IUnknown
+{
+public:
+    virtual HRESULT DoesSupportVideoMode (/* in */ BMDVideoConnection connection /* If a value of bmdVideoConnectionUnspecified is specified, the caller does not care about the connection */, /* in */ BMDDisplayMode requestedMode, /* in */ BMDPixelFormat requestedPixelFormat, /* in */ BMDVideoOutputConversionMode conversionMode, /* in */ BMDSupportedVideoModeFlags flags, /* out */ BMDDisplayMode* actualMode, /* out */ bool* supported) = 0;
+    virtual HRESULT GetDisplayMode (/* in */ BMDDisplayMode displayMode, /* out */ IDeckLinkDisplayMode** resultDisplayMode) = 0;
+    virtual HRESULT GetDisplayModeIterator (/* out */ IDeckLinkDisplayModeIterator** iterator) = 0;
+    virtual HRESULT SetScreenPreviewCallback (/* in */ IDeckLinkScreenPreviewCallback* previewCallback) = 0;
+
+    /* Video Output */
+
+    virtual HRESULT EnableVideoOutput (/* in */ BMDDisplayMode displayMode, /* in */ BMDVideoOutputFlags flags) = 0;
+    virtual HRESULT DisableVideoOutput (void) = 0;
+    virtual HRESULT SetVideoOutputFrameMemoryAllocator (/* in */ IDeckLinkMemoryAllocator* theAllocator) = 0;
+    virtual HRESULT CreateVideoFrame (/* in */ int32_t width, /* in */ int32_t height, /* in */ int32_t rowBytes, /* in */ BMDPixelFormat pixelFormat, /* in */ BMDFrameFlags flags, /* out */ IDeckLinkMutableVideoFrame** outFrame) = 0;
+    virtual HRESULT CreateAncillaryData (/* in */ BMDPixelFormat pixelFormat, /* out */ IDeckLinkVideoFrameAncillary** outBuffer) = 0;	// Use of IDeckLinkVideoFrameAncillaryPackets is preferred
+    virtual HRESULT DisplayVideoFrameSync (/* in */ IDeckLinkVideoFrame* theFrame) = 0;
+    virtual HRESULT ScheduleVideoFrame (/* in */ IDeckLinkVideoFrame* theFrame, /* in */ BMDTimeValue displayTime, /* in */ BMDTimeValue displayDuration, /* in */ BMDTimeScale timeScale) = 0;
+    virtual HRESULT SetScheduledFrameCompletionCallback (/* in */ IDeckLinkVideoOutputCallback* theCallback) = 0;
+    virtual HRESULT GetBufferedVideoFrameCount (/* out */ uint32_t* bufferedFrameCount) = 0;
+
+    /* Audio Output */
+
+    virtual HRESULT EnableAudioOutput (/* in */ BMDAudioSampleRate sampleRate, /* in */ BMDAudioSampleType sampleType, /* in */ uint32_t channelCount, /* in */ BMDAudioOutputStreamType streamType) = 0;
+    virtual HRESULT DisableAudioOutput (void) = 0;
+    virtual HRESULT WriteAudioSamplesSync (/* in */ void* buffer, /* in */ uint32_t sampleFrameCount, /* out */ uint32_t* sampleFramesWritten) = 0;
+    virtual HRESULT BeginAudioPreroll (void) = 0;
+    virtual HRESULT EndAudioPreroll (void) = 0;
+    virtual HRESULT ScheduleAudioSamples (/* in */ void* buffer, /* in */ uint32_t sampleFrameCount, /* in */ BMDTimeValue streamTime, /* in */ BMDTimeScale timeScale, /* out */ uint32_t* sampleFramesWritten) = 0;
+    virtual HRESULT GetBufferedAudioSampleFrameCount (/* out */ uint32_t* bufferedSampleFrameCount) = 0;
+    virtual HRESULT FlushBufferedAudioSamples (void) = 0;
+    virtual HRESULT SetAudioCallback (/* in */ IDeckLinkAudioOutputCallback* theCallback) = 0;
+
+    /* Output Control */
+
+    virtual HRESULT StartScheduledPlayback (/* in */ BMDTimeValue playbackStartTime, /* in */ BMDTimeScale timeScale, /* in */ double playbackSpeed) = 0;
+    virtual HRESULT StopScheduledPlayback (/* in */ BMDTimeValue stopPlaybackAtTime, /* out */ BMDTimeValue* actualStopTime, /* in */ BMDTimeScale timeScale) = 0;
+    virtual HRESULT IsScheduledPlaybackRunning (/* out */ bool* active) = 0;
+    virtual HRESULT GetScheduledStreamTime (/* in */ BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue* streamTime, /* out */ double* playbackSpeed) = 0;
+    virtual HRESULT GetReferenceStatus (/* out */ BMDReferenceStatus* referenceStatus) = 0;
+
+    /* Hardware Timing */
+
+    virtual HRESULT GetHardwareReferenceClock (/* in */ BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue* hardwareTime, /* out */ BMDTimeValue* timeInFrame, /* out */ BMDTimeValue* ticksPerFrame) = 0;
+    virtual HRESULT GetFrameCompletionReferenceTimestamp (/* in */ IDeckLinkVideoFrame* theFrame, /* in */ BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue* frameCompletionTimestamp) = 0;
+
+protected:
+    virtual ~IDeckLinkOutput () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkInput - Created by QueryInterface from IDeckLink. */
+
+class BMD_PUBLIC IDeckLinkInput : public IUnknown
+{
+public:
+    virtual HRESULT DoesSupportVideoMode (/* in */ BMDVideoConnection connection /* If a value of bmdVideoConnectionUnspecified is specified, the caller does not care about the connection */, /* in */ BMDDisplayMode requestedMode, /* in */ BMDPixelFormat requestedPixelFormat, /* in */ BMDVideoInputConversionMode conversionMode, /* in */ BMDSupportedVideoModeFlags flags, /* out */ BMDDisplayMode* actualMode, /* out */ bool* supported) = 0;
+    virtual HRESULT GetDisplayMode (/* in */ BMDDisplayMode displayMode, /* out */ IDeckLinkDisplayMode** resultDisplayMode) = 0;
+    virtual HRESULT GetDisplayModeIterator (/* out */ IDeckLinkDisplayModeIterator** iterator) = 0;
+    virtual HRESULT SetScreenPreviewCallback (/* in */ IDeckLinkScreenPreviewCallback* previewCallback) = 0;
+
+    /* Video Input */
+
+    virtual HRESULT EnableVideoInput (/* in */ BMDDisplayMode displayMode, /* in */ BMDPixelFormat pixelFormat, /* in */ BMDVideoInputFlags flags) = 0;
+    virtual HRESULT DisableVideoInput (void) = 0;
+    virtual HRESULT GetAvailableVideoFrameCount (/* out */ uint32_t* availableFrameCount) = 0;
+    virtual HRESULT SetVideoInputFrameMemoryAllocator (/* in */ IDeckLinkMemoryAllocator* theAllocator) = 0;
+
+    /* Audio Input */
+
+    virtual HRESULT EnableAudioInput (/* in */ BMDAudioSampleRate sampleRate, /* in */ BMDAudioSampleType sampleType, /* in */ uint32_t channelCount) = 0;
+    virtual HRESULT DisableAudioInput (void) = 0;
+    virtual HRESULT GetAvailableAudioSampleFrameCount (/* out */ uint32_t* availableSampleFrameCount) = 0;
+
+    /* Input Control */
+
+    virtual HRESULT StartStreams (void) = 0;
+    virtual HRESULT StopStreams (void) = 0;
+    virtual HRESULT PauseStreams (void) = 0;
+    virtual HRESULT FlushStreams (void) = 0;
+    virtual HRESULT SetCallback (/* in */ IDeckLinkInputCallback* theCallback) = 0;
+
+    /* Hardware Timing */
+
+    virtual HRESULT GetHardwareReferenceClock (/* in */ BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue* hardwareTime, /* out */ BMDTimeValue* timeInFrame, /* out */ BMDTimeValue* ticksPerFrame) = 0;
+
+protected:
+    virtual ~IDeckLinkInput () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkHDMIInputEDID - Created by QueryInterface from IDeckLink. Releasing all references will restore EDID to default */
+
+class BMD_PUBLIC IDeckLinkHDMIInputEDID : public IUnknown
+{
+public:
+    virtual HRESULT SetInt (/* in */ BMDDeckLinkHDMIInputEDIDID cfgID, /* in */ int64_t value) = 0;
+    virtual HRESULT GetInt (/* in */ BMDDeckLinkHDMIInputEDIDID cfgID, /* out */ int64_t* value) = 0;
+    virtual HRESULT WriteToEDID (void) = 0;
+
+protected:
+    virtual ~IDeckLinkHDMIInputEDID () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkEncoderInput - Created by QueryInterface from IDeckLink. */
+
+class BMD_PUBLIC IDeckLinkEncoderInput : public IUnknown
+{
+public:
+    virtual HRESULT DoesSupportVideoMode (/* in */ BMDVideoConnection connection /* If a value of bmdVideoConnectionUnspecified is specified, the caller does not care about the connection */, /* in */ BMDDisplayMode requestedMode, /* in */ BMDPixelFormat requestedCodec, /* in */ uint32_t requestedCodecProfile, /* in */ BMDSupportedVideoModeFlags flags, /* out */ bool* supported) = 0;
+    virtual HRESULT GetDisplayMode (/* in */ BMDDisplayMode displayMode, /* out */ IDeckLinkDisplayMode** resultDisplayMode) = 0;
+    virtual HRESULT GetDisplayModeIterator (/* out */ IDeckLinkDisplayModeIterator** iterator) = 0;
+
+    /* Video Input */
+
+    virtual HRESULT EnableVideoInput (/* in */ BMDDisplayMode displayMode, /* in */ BMDPixelFormat pixelFormat, /* in */ BMDVideoInputFlags flags) = 0;
+    virtual HRESULT DisableVideoInput (void) = 0;
+    virtual HRESULT GetAvailablePacketsCount (/* out */ uint32_t* availablePacketsCount) = 0;
+    virtual HRESULT SetMemoryAllocator (/* in */ IDeckLinkMemoryAllocator* theAllocator) = 0;
+
+    /* Audio Input */
+
+    virtual HRESULT EnableAudioInput (/* in */ BMDAudioFormat audioFormat, /* in */ BMDAudioSampleRate sampleRate, /* in */ BMDAudioSampleType sampleType, /* in */ uint32_t channelCount) = 0;
+    virtual HRESULT DisableAudioInput (void) = 0;
+    virtual HRESULT GetAvailableAudioSampleFrameCount (/* out */ uint32_t* availableSampleFrameCount) = 0;
+
+    /* Input Control */
+
+    virtual HRESULT StartStreams (void) = 0;
+    virtual HRESULT StopStreams (void) = 0;
+    virtual HRESULT PauseStreams (void) = 0;
+    virtual HRESULT FlushStreams (void) = 0;
+    virtual HRESULT SetCallback (/* in */ IDeckLinkEncoderInputCallback* theCallback) = 0;
+
+    /* Hardware Timing */
+
+    virtual HRESULT GetHardwareReferenceClock (/* in */ BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue* hardwareTime, /* out */ BMDTimeValue* timeInFrame, /* out */ BMDTimeValue* ticksPerFrame) = 0;
+
+protected:
+    virtual ~IDeckLinkEncoderInput () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkVideoFrame - Interface to encapsulate a video frame; can be caller-implemented. */
+
+class BMD_PUBLIC IDeckLinkVideoFrame : public IUnknown
+{
+public:
+    virtual long GetWidth (void) = 0;
+    virtual long GetHeight (void) = 0;
+    virtual long GetRowBytes (void) = 0;
+    virtual BMDPixelFormat GetPixelFormat (void) = 0;
+    virtual BMDFrameFlags GetFlags (void) = 0;
+    virtual HRESULT GetBytes (/* out */ void** buffer) = 0;
+    virtual HRESULT GetTimecode (/* in */ BMDTimecodeFormat format, /* out */ IDeckLinkTimecode** timecode) = 0;
+    virtual HRESULT GetAncillaryData (/* out */ IDeckLinkVideoFrameAncillary** ancillary) = 0;	// Use of IDeckLinkVideoFrameAncillaryPackets is preferred
+
+protected:
+    virtual ~IDeckLinkVideoFrame () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkMutableVideoFrame - Created by IDeckLinkOutput::CreateVideoFrame. */
+
+class BMD_PUBLIC IDeckLinkMutableVideoFrame : public IDeckLinkVideoFrame
+{
+public:
+    virtual HRESULT SetFlags (/* in */ BMDFrameFlags newFlags) = 0;
+    virtual HRESULT SetTimecode (/* in */ BMDTimecodeFormat format, /* in */ IDeckLinkTimecode* timecode) = 0;
+    virtual HRESULT SetTimecodeFromComponents (/* in */ BMDTimecodeFormat format, /* in */ uint8_t hours, /* in */ uint8_t minutes, /* in */ uint8_t seconds, /* in */ uint8_t frames, /* in */ BMDTimecodeFlags flags) = 0;
+    virtual HRESULT SetAncillaryData (/* in */ IDeckLinkVideoFrameAncillary* ancillary) = 0;
+    virtual HRESULT SetTimecodeUserBits (/* in */ BMDTimecodeFormat format, /* in */ BMDTimecodeUserBits userBits) = 0;
+
+protected:
+    virtual ~IDeckLinkMutableVideoFrame () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkVideoFrame3DExtensions - Optional interface implemented on IDeckLinkVideoFrame to support 3D frames */
+
+class BMD_PUBLIC IDeckLinkVideoFrame3DExtensions : public IUnknown
+{
+public:
+    virtual BMDVideo3DPackingFormat Get3DPackingFormat (void) = 0;
+    virtual HRESULT GetFrameForRightEye (/* out */ IDeckLinkVideoFrame** rightEyeFrame) = 0;
+
+protected:
+    virtual ~IDeckLinkVideoFrame3DExtensions () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkVideoFrameMetadataExtensions - Optional interface implemented on IDeckLinkVideoFrame to support frame metadata such as HDR information */
+
+class BMD_PUBLIC IDeckLinkVideoFrameMetadataExtensions : public IUnknown
+{
+public:
+    virtual HRESULT GetInt (/* in */ BMDDeckLinkFrameMetadataID metadataID, /* out */ int64_t* value) = 0;
+    virtual HRESULT GetFloat (/* in */ BMDDeckLinkFrameMetadataID metadataID, /* out */ double* value) = 0;
+    virtual HRESULT GetFlag (/* in */ BMDDeckLinkFrameMetadataID metadataID, /* out */ bool* value) = 0;
+    virtual HRESULT GetString (/* in */ BMDDeckLinkFrameMetadataID metadataID, /* out */ CFStringRef* value) = 0;
+    virtual HRESULT GetBytes (/* in */ BMDDeckLinkFrameMetadataID metadataID, /* out */ void* buffer /* optional */, /* in, out */ uint32_t* bufferSize) = 0;
+
+protected:
+    virtual ~IDeckLinkVideoFrameMetadataExtensions () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkVideoInputFrame - Provided by the IDeckLinkVideoInput frame arrival callback. */
+
+class BMD_PUBLIC IDeckLinkVideoInputFrame : public IDeckLinkVideoFrame
+{
+public:
+    virtual HRESULT GetStreamTime (/* out */ BMDTimeValue* frameTime, /* out */ BMDTimeValue* frameDuration, /* in */ BMDTimeScale timeScale) = 0;
+    virtual HRESULT GetHardwareReferenceTimestamp (/* in */ BMDTimeScale timeScale, /* out */ BMDTimeValue* frameTime, /* out */ BMDTimeValue* frameDuration) = 0;
+
+protected:
+    virtual ~IDeckLinkVideoInputFrame () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkAncillaryPacket - On output, user needs to implement this interface */
+
+class BMD_PUBLIC IDeckLinkAncillaryPacket : public IUnknown
+{
+public:
+    virtual HRESULT GetBytes (/* in */ BMDAncillaryPacketFormat format /* For output, only one format need be offered */, /* out */ const void** data /* Optional */, /* out */ uint32_t* size /* Optional */) = 0;
+    virtual uint8_t GetDID (void) = 0;
+    virtual uint8_t GetSDID (void) = 0;
+    virtual uint32_t GetLineNumber (void) = 0;	// On output, zero is auto
+    virtual uint8_t GetDataStreamIndex (void) = 0;	// Usually zero. Can only be 1 if non-SD and the first data stream is completely full
+
+protected:
+    virtual ~IDeckLinkAncillaryPacket () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkAncillaryPacketIterator - Enumerates ancillary packets */
+
+class BMD_PUBLIC IDeckLinkAncillaryPacketIterator : public IUnknown
+{
+public:
+    virtual HRESULT Next (/* out */ IDeckLinkAncillaryPacket** packet) = 0;
+
+protected:
+    virtual ~IDeckLinkAncillaryPacketIterator () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkVideoFrameAncillaryPackets - Obtained through QueryInterface on an IDeckLinkVideoFrame object. */
+
+class BMD_PUBLIC IDeckLinkVideoFrameAncillaryPackets : public IUnknown
+{
+public:
+    virtual HRESULT GetPacketIterator (/* out */ IDeckLinkAncillaryPacketIterator** iterator) = 0;
+    virtual HRESULT GetFirstPacketByID (/* in */ uint8_t DID, /* in */ uint8_t SDID, /* out */ IDeckLinkAncillaryPacket** packet) = 0;
+    virtual HRESULT AttachPacket (/* in */ IDeckLinkAncillaryPacket* packet) = 0;	// Implement IDeckLinkAncillaryPacket to output your own
+    virtual HRESULT DetachPacket (/* in */ IDeckLinkAncillaryPacket* packet) = 0;
+    virtual HRESULT DetachAllPackets (void) = 0;
+
+protected:
+    virtual ~IDeckLinkVideoFrameAncillaryPackets () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkVideoFrameAncillary - Use of IDeckLinkVideoFrameAncillaryPackets is preferred. Obtained through QueryInterface on an IDeckLinkVideoFrame object. */
+
+class BMD_PUBLIC IDeckLinkVideoFrameAncillary : public IUnknown
+{
+public:
+    virtual HRESULT GetBufferForVerticalBlankingLine (/* in */ uint32_t lineNumber, /* out */ void** buffer) = 0;	// Pixels/rowbytes is same as display mode, except for above HD where it's 1920 pixels for UHD modes and 2048 pixels for DCI modes
+    virtual BMDPixelFormat GetPixelFormat (void) = 0;
+    virtual BMDDisplayMode GetDisplayMode (void) = 0;
+
+protected:
+    virtual ~IDeckLinkVideoFrameAncillary () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkEncoderPacket - Interface to encapsulate an encoded packet. */
+
+class BMD_PUBLIC IDeckLinkEncoderPacket : public IUnknown
+{
+public:
+    virtual HRESULT GetBytes (/* out */ void** buffer) = 0;
+    virtual long GetSize (void) = 0;
+    virtual HRESULT GetStreamTime (/* out */ BMDTimeValue* frameTime, /* in */ BMDTimeScale timeScale) = 0;
+    virtual BMDPacketType GetPacketType (void) = 0;
+
+protected:
+    virtual ~IDeckLinkEncoderPacket () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkEncoderVideoPacket - Provided by the IDeckLinkEncoderInput video packet arrival callback. */
+
+class BMD_PUBLIC IDeckLinkEncoderVideoPacket : public IDeckLinkEncoderPacket
+{
+public:
+    virtual BMDPixelFormat GetPixelFormat (void) = 0;
+    virtual HRESULT GetHardwareReferenceTimestamp (/* in */ BMDTimeScale timeScale, /* out */ BMDTimeValue* frameTime, /* out */ BMDTimeValue* frameDuration) = 0;
+    virtual HRESULT GetTimecode (/* in */ BMDTimecodeFormat format, /* out */ IDeckLinkTimecode** timecode) = 0;
+
+protected:
+    virtual ~IDeckLinkEncoderVideoPacket () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkEncoderAudioPacket - Provided by the IDeckLinkEncoderInput audio packet arrival callback. */
+
+class BMD_PUBLIC IDeckLinkEncoderAudioPacket : public IDeckLinkEncoderPacket
+{
+public:
+    virtual BMDAudioFormat GetAudioFormat (void) = 0;
+
+protected:
+    virtual ~IDeckLinkEncoderAudioPacket () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkH265NALPacket - Obtained through QueryInterface on an IDeckLinkEncoderVideoPacket object */
+
+class BMD_PUBLIC IDeckLinkH265NALPacket : public IDeckLinkEncoderVideoPacket
+{
+public:
+    virtual HRESULT GetUnitType (/* out */ uint8_t* unitType) = 0;
+    virtual HRESULT GetBytesNoPrefix (/* out */ void** buffer) = 0;
+    virtual long GetSizeNoPrefix (void) = 0;
+
+protected:
+    virtual ~IDeckLinkH265NALPacket () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkAudioInputPacket - Provided by the IDeckLinkInput callback. */
+
+class BMD_PUBLIC IDeckLinkAudioInputPacket : public IUnknown
+{
+public:
+    virtual long GetSampleFrameCount (void) = 0;
+    virtual HRESULT GetBytes (/* out */ void** buffer) = 0;
+    virtual HRESULT GetPacketTime (/* out */ BMDTimeValue* packetTime, /* in */ BMDTimeScale timeScale) = 0;
+
+protected:
+    virtual ~IDeckLinkAudioInputPacket () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkScreenPreviewCallback - Screen preview callback */
+
+class BMD_PUBLIC IDeckLinkScreenPreviewCallback : public IUnknown
+{
+public:
+    virtual HRESULT DrawFrame (/* in */ IDeckLinkVideoFrame* theFrame) = 0;
+
+protected:
+    virtual ~IDeckLinkScreenPreviewCallback () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkCocoaScreenPreviewCallback - Screen preview callback for Cocoa-based applications. Created with CreateCocoaScreenPreview */
+
+class BMD_PUBLIC IDeckLinkCocoaScreenPreviewCallback : public IDeckLinkScreenPreviewCallback
+{
+public:
+
+protected:
+    virtual ~IDeckLinkCocoaScreenPreviewCallback () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkGLScreenPreviewHelper - Created with CoCreateInstance on platforms with native COM support or from CreateOpenGLScreenPreviewHelper/CreateOpenGL3ScreenPreviewHelper on other platforms. */
+
+class BMD_PUBLIC IDeckLinkGLScreenPreviewHelper : public IUnknown
+{
+public:
+
+    /* Methods must be called with OpenGL context set */
+
+    virtual HRESULT InitializeGL (void) = 0;
+    virtual HRESULT PaintGL (void) = 0;
+    virtual HRESULT SetFrame (/* in */ IDeckLinkVideoFrame* theFrame) = 0;
+    virtual HRESULT Set3DPreviewFormat (/* in */ BMD3DPreviewFormat previewFormat) = 0;
+
+protected:
+    virtual ~IDeckLinkGLScreenPreviewHelper () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkMetalScreenPreviewHelper - Created with CreateMetalScreenPreviewHelper(). */
+
+class BMD_PUBLIC IDeckLinkMetalScreenPreviewHelper : public IUnknown
+{
+public:
+    virtual HRESULT Initialize (/* in */ void* device) = 0;
+    virtual HRESULT Draw (/* in */ void* cmdBuffer, /* in */ void* renderPassDescriptor, /* in */ void* viewport) = 0;
+    virtual HRESULT SetFrame (/* in */ IDeckLinkVideoFrame* theFrame) = 0;
+    virtual HRESULT Set3DPreviewFormat (/* in */ BMD3DPreviewFormat previewFormat) = 0;
+
+protected:
+    virtual ~IDeckLinkMetalScreenPreviewHelper () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkNotificationCallback - DeckLink Notification Callback Interface */
+
+class BMD_PUBLIC IDeckLinkNotificationCallback : public IUnknown
+{
+public:
+    virtual HRESULT Notify (/* in */ BMDNotifications topic, /* in */ uint64_t param1, /* in */ uint64_t param2) = 0;
+};
+
+/* Interface IDeckLinkNotification - DeckLink Notification interface */
+
+class BMD_PUBLIC IDeckLinkNotification : public IUnknown
+{
+public:
+    virtual HRESULT Subscribe (/* in */ BMDNotifications topic, /* in */ IDeckLinkNotificationCallback* theCallback) = 0;
+    virtual HRESULT Unsubscribe (/* in */ BMDNotifications topic, /* in */ IDeckLinkNotificationCallback* theCallback) = 0;
+
+protected:
+    virtual ~IDeckLinkNotification () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkProfileAttributes - Created by QueryInterface from an IDeckLinkProfile, or from IDeckLink. When queried from IDeckLink, interrogates the active profile */
+
+class BMD_PUBLIC IDeckLinkProfileAttributes : public IUnknown
+{
+public:
+    virtual HRESULT GetFlag (/* in */ BMDDeckLinkAttributeID cfgID, /* out */ bool* value) = 0;
+    virtual HRESULT GetInt (/* in */ BMDDeckLinkAttributeID cfgID, /* out */ int64_t* value) = 0;
+    virtual HRESULT GetFloat (/* in */ BMDDeckLinkAttributeID cfgID, /* out */ double* value) = 0;
+    virtual HRESULT GetString (/* in */ BMDDeckLinkAttributeID cfgID, /* out */ CFStringRef* value) = 0;
+
+protected:
+    virtual ~IDeckLinkProfileAttributes () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkProfileIterator - Enumerates IDeckLinkProfile interfaces */
+
+class BMD_PUBLIC IDeckLinkProfileIterator : public IUnknown
+{
+public:
+    virtual HRESULT Next (/* out */ IDeckLinkProfile** profile) = 0;
+
+protected:
+    virtual ~IDeckLinkProfileIterator () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkProfile - Represents the active profile when queried from IDeckLink */
+
+class BMD_PUBLIC IDeckLinkProfile : public IUnknown
+{
+public:
+    virtual HRESULT GetDevice (/* out */ IDeckLink** device) = 0;	// Device affected when this profile becomes active
+    virtual HRESULT IsActive (/* out */ bool* isActive) = 0;
+    virtual HRESULT SetActive (void) = 0;	// Activating a profile will also change the profile on all devices enumerated by GetPeers. Activation is not complete until IDeckLinkProfileCallback::ProfileActivated is called
+    virtual HRESULT GetPeers (/* out */ IDeckLinkProfileIterator** profileIterator) = 0;	// Profiles of other devices activated with this profile
+
+protected:
+    virtual ~IDeckLinkProfile () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkProfileCallback - Receive notifications about profiles related to this device */
+
+class BMD_PUBLIC IDeckLinkProfileCallback : public IUnknown
+{
+public:
+    virtual HRESULT ProfileChanging (/* in */ IDeckLinkProfile* profileToBeActivated, /* in */ bool streamsWillBeForcedToStop) = 0;	// Called before this device changes profile. User has an opportunity for teardown if streamsWillBeForcedToStop
+    virtual HRESULT ProfileActivated (/* in */ IDeckLinkProfile* activatedProfile) = 0;	// Called after this device has been activated with a new profile
+
+protected:
+    virtual ~IDeckLinkProfileCallback () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkProfileManager - Created by QueryInterface from IDeckLink when a device has multiple optional profiles */
+
+class BMD_PUBLIC IDeckLinkProfileManager : public IUnknown
+{
+public:
+    virtual HRESULT GetProfiles (/* out */ IDeckLinkProfileIterator** profileIterator) = 0;	// All available profiles for this device
+    virtual HRESULT GetProfile (/* in */ BMDProfileID profileID, /* out */ IDeckLinkProfile** profile) = 0;
+    virtual HRESULT SetCallback (/* in */ IDeckLinkProfileCallback* callback) = 0;
+
+protected:
+    virtual ~IDeckLinkProfileManager () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkStatus - DeckLink Status interface */
+
+class BMD_PUBLIC IDeckLinkStatus : public IUnknown
+{
+public:
+    virtual HRESULT GetFlag (/* in */ BMDDeckLinkStatusID statusID, /* out */ bool* value) = 0;
+    virtual HRESULT GetInt (/* in */ BMDDeckLinkStatusID statusID, /* out */ int64_t* value) = 0;
+    virtual HRESULT GetFloat (/* in */ BMDDeckLinkStatusID statusID, /* out */ double* value) = 0;
+    virtual HRESULT GetString (/* in */ BMDDeckLinkStatusID statusID, /* out */ CFStringRef* value) = 0;
+    virtual HRESULT GetBytes (/* in */ BMDDeckLinkStatusID statusID, /* out */ void* buffer, /* in, out */ uint32_t* bufferSize) = 0;
+
+protected:
+    virtual ~IDeckLinkStatus () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkKeyer - DeckLink Keyer interface */
+
+class BMD_PUBLIC IDeckLinkKeyer : public IUnknown
+{
+public:
+    virtual HRESULT Enable (/* in */ bool isExternal) = 0;
+    virtual HRESULT SetLevel (/* in */ uint8_t level) = 0;
+    virtual HRESULT RampUp (/* in */ uint32_t numberOfFrames) = 0;
+    virtual HRESULT RampDown (/* in */ uint32_t numberOfFrames) = 0;
+    virtual HRESULT Disable (void) = 0;
+
+protected:
+    virtual ~IDeckLinkKeyer () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkVideoConversion - Created with CoCreateInstance. */
+
+class BMD_PUBLIC IDeckLinkVideoConversion : public IUnknown
+{
+public:
+    virtual HRESULT ConvertFrame (/* in */ IDeckLinkVideoFrame* srcFrame, /* in */ IDeckLinkVideoFrame* dstFrame) = 0;
+
+protected:
+    virtual ~IDeckLinkVideoConversion () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkDeviceNotificationCallback - DeckLink device arrival/removal notification callbacks */
+
+class BMD_PUBLIC IDeckLinkDeviceNotificationCallback : public IUnknown
+{
+public:
+    virtual HRESULT DeckLinkDeviceArrived (/* in */ IDeckLink* deckLinkDevice) = 0;
+    virtual HRESULT DeckLinkDeviceRemoved (/* in */ IDeckLink* deckLinkDevice) = 0;
+
+protected:
+    virtual ~IDeckLinkDeviceNotificationCallback () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkDiscovery - DeckLink device discovery */
+
+class BMD_PUBLIC IDeckLinkDiscovery : public IUnknown
+{
+public:
+    virtual HRESULT InstallDeviceNotifications (/* in */ IDeckLinkDeviceNotificationCallback* deviceNotificationCallback) = 0;
+    virtual HRESULT UninstallDeviceNotifications (void) = 0;
+
+protected:
+    virtual ~IDeckLinkDiscovery () {} // call Release method to drop reference count
+};
+
+/* Functions */
+
+extern "C" {
+
+    BMD_PUBLIC IDeckLinkIterator* CreateDeckLinkIteratorInstance(void);
+    BMD_PUBLIC IDeckLinkDiscovery* CreateDeckLinkDiscoveryInstance(void);
+    BMD_PUBLIC IDeckLinkAPIInformation* CreateDeckLinkAPIInformationInstance(void);
+    BMD_PUBLIC IDeckLinkGLScreenPreviewHelper* CreateOpenGLScreenPreviewHelper(void);
+    BMD_PUBLIC IDeckLinkGLScreenPreviewHelper* CreateOpenGL3ScreenPreviewHelper(void);	// Requires OpenGL 3.2 support and provides improved performance and color handling
+    BMD_PUBLIC IDeckLinkCocoaScreenPreviewCallback* CreateCocoaScreenPreview(/* in */ void* /* (NSView*)*/ parentView);
+    BMD_PUBLIC IDeckLinkMetalScreenPreviewHelper* CreateMetalScreenPreviewHelper(void);
+    BMD_PUBLIC IDeckLinkVideoConversion* CreateVideoConversionInstance(void);
+    BMD_PUBLIC IDeckLinkVideoFrameAncillaryPackets* CreateVideoFrameAncillaryPacketsInstance(void);	// For use when creating a custom IDeckLinkVideoFrame without wrapping IDeckLinkOutput::CreateVideoFrame
+
+}
+
+
+
+#endif /* defined(__cplusplus) */
+#endif /* defined(BMD_DECKLINKAPI_H) */
diff --git a/DeckLinkSDK/Mac/include/DeckLinkAPIConfiguration.h b/DeckLinkSDK/Mac/include/DeckLinkAPIConfiguration.h
new file mode 100644
index 0000000000..9f2a145307
--- /dev/null
+++ b/DeckLinkSDK/Mac/include/DeckLinkAPIConfiguration.h
@@ -0,0 +1,269 @@
+/* -LICENSE-START-
+** Copyright (c) 2022 Blackmagic Design
+**
+** Permission is hereby granted, free of charge, to any person or organization
+** obtaining a copy of the software and accompanying documentation covered by
+** this license (the "Software") to use, reproduce, display, distribute,
+** execute, and transmit the Software, and to prepare derivative works of the
+** Software, and to permit third-parties to whom the Software is furnished to
+** do so, all subject to the following:
+**
+** The copyright notices in the Software and this entire statement, including
+** the above license grant, this restriction and the following disclaimer,
+** must be included in all copies of the Software, in whole or in part, and
+** all derivative works of the Software, unless such copies or derivative
+** works are solely in the form of machine-executable object code generated by
+** a source language processor.
+**
+** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+** DEALINGS IN THE SOFTWARE.
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPICONFIGURATION_H
+#define BMD_DECKLINKAPICONFIGURATION_H
+
+
+#ifndef BMD_CONST
+    #if defined(_MSC_VER)
+        #define BMD_CONST __declspec(selectany) static const
+    #else
+        #define BMD_CONST static const
+    #endif
+#endif
+
+#ifndef BMD_PUBLIC
+	#define BMD_PUBLIC
+#endif
+
+// Type Declarations
+
+
+// Interface ID Declarations
+
+BMD_CONST REFIID IID_IDeckLinkConfiguration                       = /* 912F634B-2D4E-40A4-8AAB-8D80B73F1289 */ { 0x91,0x2F,0x63,0x4B,0x2D,0x4E,0x40,0xA4,0x8A,0xAB,0x8D,0x80,0xB7,0x3F,0x12,0x89 };
+BMD_CONST REFIID IID_IDeckLinkEncoderConfiguration                = /* 138050E5-C60A-4552-BF3F-0F358049327E */ { 0x13,0x80,0x50,0xE5,0xC6,0x0A,0x45,0x52,0xBF,0x3F,0x0F,0x35,0x80,0x49,0x32,0x7E };
+
+/* Enum BMDDeckLinkConfigurationID - DeckLink Configuration ID */
+
+typedef uint32_t BMDDeckLinkConfigurationID;
+enum _BMDDeckLinkConfigurationID {
+
+    /* Serial port Flags */
+
+    bmdDeckLinkConfigSwapSerialRxTx                              = /* 'ssrt' */ 0x73737274,
+
+    /* Video Input/Output Integers */
+
+    bmdDeckLinkConfigHDMI3DPackingFormat                         = /* '3dpf' */ 0x33647066,
+    bmdDeckLinkConfigBypass                                      = /* 'byps' */ 0x62797073,
+    bmdDeckLinkConfigClockTimingAdjustment                       = /* 'ctad' */ 0x63746164,
+
+    /* Audio Input/Output Flags */
+
+    bmdDeckLinkConfigAnalogAudioConsumerLevels                   = /* 'aacl' */ 0x6161636C,
+    bmdDeckLinkConfigSwapHDMICh3AndCh4OnInput                    = /* 'hi34' */ 0x68693334,
+    bmdDeckLinkConfigSwapHDMICh3AndCh4OnOutput                   = /* 'ho34' */ 0x686F3334,
+
+    /* Video Output Flags */
+
+    bmdDeckLinkConfigFieldFlickerRemoval                         = /* 'fdfr' */ 0x66646672,
+    bmdDeckLinkConfigHD1080p24ToHD1080i5994Conversion            = /* 'to59' */ 0x746F3539,
+    bmdDeckLinkConfig444SDIVideoOutput                           = /* '444o' */ 0x3434346F,
+    bmdDeckLinkConfigBlackVideoOutputDuringCapture               = /* 'bvoc' */ 0x62766F63,
+    bmdDeckLinkConfigLowLatencyVideoOutput                       = /* 'llvo' */ 0x6C6C766F,
+    bmdDeckLinkConfigDownConversionOnAllAnalogOutput             = /* 'caao' */ 0x6361616F,
+    bmdDeckLinkConfigSMPTELevelAOutput                           = /* 'smta' */ 0x736D7461,
+    bmdDeckLinkConfigRec2020Output                               = /* 'rec2' */ 0x72656332,	// Ensure output is Rec.2020 colorspace
+    bmdDeckLinkConfigQuadLinkSDIVideoOutputSquareDivisionSplit   = /* 'SDQS' */ 0x53445153,
+    bmdDeckLinkConfigOutput1080pAsPsF                            = /* 'pfpr' */ 0x70667072,
+
+    /* Video Output Integers */
+
+    bmdDeckLinkConfigVideoOutputConnection                       = /* 'vocn' */ 0x766F636E,
+    bmdDeckLinkConfigVideoOutputConversionMode                   = /* 'vocm' */ 0x766F636D,
+    bmdDeckLinkConfigAnalogVideoOutputFlags                      = /* 'avof' */ 0x61766F66,
+    bmdDeckLinkConfigReferenceInputTimingOffset                  = /* 'glot' */ 0x676C6F74,
+    bmdDeckLinkConfigVideoOutputIdleOperation                    = /* 'voio' */ 0x766F696F,
+    bmdDeckLinkConfigDefaultVideoOutputMode                      = /* 'dvom' */ 0x64766F6D,
+    bmdDeckLinkConfigDefaultVideoOutputModeFlags                 = /* 'dvof' */ 0x64766F66,
+    bmdDeckLinkConfigSDIOutputLinkConfiguration                  = /* 'solc' */ 0x736F6C63,
+    bmdDeckLinkConfigHDMITimecodePacking                         = /* 'htpk' */ 0x6874706B,
+    bmdDeckLinkConfigPlaybackGroup                               = /* 'plgr' */ 0x706C6772,
+
+    /* Video Output Floats */
+
+    bmdDeckLinkConfigVideoOutputComponentLumaGain                = /* 'oclg' */ 0x6F636C67,
+    bmdDeckLinkConfigVideoOutputComponentChromaBlueGain          = /* 'occb' */ 0x6F636362,
+    bmdDeckLinkConfigVideoOutputComponentChromaRedGain           = /* 'occr' */ 0x6F636372,
+    bmdDeckLinkConfigVideoOutputCompositeLumaGain                = /* 'oilg' */ 0x6F696C67,
+    bmdDeckLinkConfigVideoOutputCompositeChromaGain              = /* 'oicg' */ 0x6F696367,
+    bmdDeckLinkConfigVideoOutputSVideoLumaGain                   = /* 'oslg' */ 0x6F736C67,
+    bmdDeckLinkConfigVideoOutputSVideoChromaGain                 = /* 'oscg' */ 0x6F736367,
+
+    /* Video Input Flags */
+
+    bmdDeckLinkConfigVideoInputScanning                          = /* 'visc' */ 0x76697363,	// Applicable to H264 Pro Recorder only
+    bmdDeckLinkConfigUseDedicatedLTCInput                        = /* 'dltc' */ 0x646C7463,	// Use timecode from LTC input instead of SDI stream
+    bmdDeckLinkConfigSDIInput3DPayloadOverride                   = /* '3dds' */ 0x33646473,
+    bmdDeckLinkConfigCapture1080pAsPsF                           = /* 'cfpr' */ 0x63667072,
+
+    /* Video Input Integers */
+
+    bmdDeckLinkConfigVideoInputConnection                        = /* 'vicn' */ 0x7669636E,
+    bmdDeckLinkConfigAnalogVideoInputFlags                       = /* 'avif' */ 0x61766966,
+    bmdDeckLinkConfigVideoInputConversionMode                    = /* 'vicm' */ 0x7669636D,
+    bmdDeckLinkConfig32PulldownSequenceInitialTimecodeFrame      = /* 'pdif' */ 0x70646966,
+    bmdDeckLinkConfigVANCSourceLine1Mapping                      = /* 'vsl1' */ 0x76736C31,
+    bmdDeckLinkConfigVANCSourceLine2Mapping                      = /* 'vsl2' */ 0x76736C32,
+    bmdDeckLinkConfigVANCSourceLine3Mapping                      = /* 'vsl3' */ 0x76736C33,
+    bmdDeckLinkConfigCapturePassThroughMode                      = /* 'cptm' */ 0x6370746D,
+    bmdDeckLinkConfigCaptureGroup                                = /* 'cpgr' */ 0x63706772,
+
+    /* Video Input Floats */
+
+    bmdDeckLinkConfigVideoInputComponentLumaGain                 = /* 'iclg' */ 0x69636C67,
+    bmdDeckLinkConfigVideoInputComponentChromaBlueGain           = /* 'iccb' */ 0x69636362,
+    bmdDeckLinkConfigVideoInputComponentChromaRedGain            = /* 'iccr' */ 0x69636372,
+    bmdDeckLinkConfigVideoInputCompositeLumaGain                 = /* 'iilg' */ 0x69696C67,
+    bmdDeckLinkConfigVideoInputCompositeChromaGain               = /* 'iicg' */ 0x69696367,
+    bmdDeckLinkConfigVideoInputSVideoLumaGain                    = /* 'islg' */ 0x69736C67,
+    bmdDeckLinkConfigVideoInputSVideoChromaGain                  = /* 'iscg' */ 0x69736367,
+
+    /* Keying Integers */
+
+    bmdDeckLinkConfigInternalKeyingAncillaryDataSource           = /* 'ikas' */ 0x696B6173,
+
+    /* Audio Input Flags */
+
+    bmdDeckLinkConfigMicrophonePhantomPower                      = /* 'mphp' */ 0x6D706870,
+
+    /* Audio Input Integers */
+
+    bmdDeckLinkConfigAudioInputConnection                        = /* 'aicn' */ 0x6169636E,
+
+    /* Audio Input Floats */
+
+    bmdDeckLinkConfigAnalogAudioInputScaleChannel1               = /* 'ais1' */ 0x61697331,
+    bmdDeckLinkConfigAnalogAudioInputScaleChannel2               = /* 'ais2' */ 0x61697332,
+    bmdDeckLinkConfigAnalogAudioInputScaleChannel3               = /* 'ais3' */ 0x61697333,
+    bmdDeckLinkConfigAnalogAudioInputScaleChannel4               = /* 'ais4' */ 0x61697334,
+    bmdDeckLinkConfigDigitalAudioInputScale                      = /* 'dais' */ 0x64616973,
+    bmdDeckLinkConfigMicrophoneInputGain                         = /* 'micg' */ 0x6D696367,
+
+    /* Audio Output Integers */
+
+    bmdDeckLinkConfigAudioOutputAESAnalogSwitch                  = /* 'aoaa' */ 0x616F6161,
+
+    /* Audio Output Floats */
+
+    bmdDeckLinkConfigAnalogAudioOutputScaleChannel1              = /* 'aos1' */ 0x616F7331,
+    bmdDeckLinkConfigAnalogAudioOutputScaleChannel2              = /* 'aos2' */ 0x616F7332,
+    bmdDeckLinkConfigAnalogAudioOutputScaleChannel3              = /* 'aos3' */ 0x616F7333,
+    bmdDeckLinkConfigAnalogAudioOutputScaleChannel4              = /* 'aos4' */ 0x616F7334,
+    bmdDeckLinkConfigDigitalAudioOutputScale                     = /* 'daos' */ 0x64616F73,
+    bmdDeckLinkConfigHeadphoneVolume                             = /* 'hvol' */ 0x68766F6C,
+
+    /* Device Information Strings */
+
+    bmdDeckLinkConfigDeviceInformationLabel                      = /* 'dila' */ 0x64696C61,
+    bmdDeckLinkConfigDeviceInformationSerialNumber               = /* 'disn' */ 0x6469736E,
+    bmdDeckLinkConfigDeviceInformationCompany                    = /* 'dico' */ 0x6469636F,
+    bmdDeckLinkConfigDeviceInformationPhone                      = /* 'diph' */ 0x64697068,
+    bmdDeckLinkConfigDeviceInformationEmail                      = /* 'diem' */ 0x6469656D,
+    bmdDeckLinkConfigDeviceInformationDate                       = /* 'dida' */ 0x64696461,
+
+    /* Deck Control Integers */
+
+    bmdDeckLinkConfigDeckControlConnection                       = /* 'dcco' */ 0x6463636F
+};
+
+/* Enum BMDDeckLinkEncoderConfigurationID - DeckLink Encoder Configuration ID */
+
+typedef uint32_t BMDDeckLinkEncoderConfigurationID;
+enum _BMDDeckLinkEncoderConfigurationID {
+
+    /* Video Encoder Integers */
+
+    bmdDeckLinkEncoderConfigPreferredBitDepth                    = /* 'epbr' */ 0x65706272,
+    bmdDeckLinkEncoderConfigFrameCodingMode                      = /* 'efcm' */ 0x6566636D,
+
+    /* HEVC/H.265 Encoder Integers */
+
+    bmdDeckLinkEncoderConfigH265TargetBitrate                    = /* 'htbr' */ 0x68746272,
+
+    /* DNxHR/DNxHD Compression ID */
+
+    bmdDeckLinkEncoderConfigDNxHRCompressionID                   = /* 'dcid' */ 0x64636964,
+
+    /* DNxHR/DNxHD Level */
+
+    bmdDeckLinkEncoderConfigDNxHRLevel                           = /* 'dlev' */ 0x646C6576,
+
+    /* Encoded Sample Decriptions */
+
+    bmdDeckLinkEncoderConfigMPEG4SampleDescription               = /* 'stsE' */ 0x73747345,	// Full MPEG4 sample description (aka SampleEntry of an 'stsd' atom-box). Useful for MediaFoundation, QuickTime, MKV and more
+    bmdDeckLinkEncoderConfigMPEG4CodecSpecificDesc               = /* 'esds' */ 0x65736473	// Sample description extensions only (atom stream, each with size and fourCC header). Useful for AVFoundation, VideoToolbox, MKV and more
+};
+
+#if defined(__cplusplus)
+
+// Forward Declarations
+
+class IDeckLinkConfiguration;
+class IDeckLinkEncoderConfiguration;
+
+/* Interface IDeckLinkConfiguration - DeckLink Configuration interface */
+
+class BMD_PUBLIC IDeckLinkConfiguration : public IUnknown
+{
+public:
+    virtual HRESULT SetFlag (/* in */ BMDDeckLinkConfigurationID cfgID, /* in */ bool value) = 0;
+    virtual HRESULT GetFlag (/* in */ BMDDeckLinkConfigurationID cfgID, /* out */ bool* value) = 0;
+    virtual HRESULT SetInt (/* in */ BMDDeckLinkConfigurationID cfgID, /* in */ int64_t value) = 0;
+    virtual HRESULT GetInt (/* in */ BMDDeckLinkConfigurationID cfgID, /* out */ int64_t* value) = 0;
+    virtual HRESULT SetFloat (/* in */ BMDDeckLinkConfigurationID cfgID, /* in */ double value) = 0;
+    virtual HRESULT GetFloat (/* in */ BMDDeckLinkConfigurationID cfgID, /* out */ double* value) = 0;
+    virtual HRESULT SetString (/* in */ BMDDeckLinkConfigurationID cfgID, /* in */ CFStringRef value) = 0;
+    virtual HRESULT GetString (/* in */ BMDDeckLinkConfigurationID cfgID, /* out */ CFStringRef* value) = 0;
+    virtual HRESULT WriteConfigurationToPreferences (void) = 0;
+
+protected:
+    virtual ~IDeckLinkConfiguration () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkEncoderConfiguration - DeckLink Encoder Configuration interface. Obtained from IDeckLinkEncoderInput */
+
+class BMD_PUBLIC IDeckLinkEncoderConfiguration : public IUnknown
+{
+public:
+    virtual HRESULT SetFlag (/* in */ BMDDeckLinkEncoderConfigurationID cfgID, /* in */ bool value) = 0;
+    virtual HRESULT GetFlag (/* in */ BMDDeckLinkEncoderConfigurationID cfgID, /* out */ bool* value) = 0;
+    virtual HRESULT SetInt (/* in */ BMDDeckLinkEncoderConfigurationID cfgID, /* in */ int64_t value) = 0;
+    virtual HRESULT GetInt (/* in */ BMDDeckLinkEncoderConfigurationID cfgID, /* out */ int64_t* value) = 0;
+    virtual HRESULT SetFloat (/* in */ BMDDeckLinkEncoderConfigurationID cfgID, /* in */ double value) = 0;
+    virtual HRESULT GetFloat (/* in */ BMDDeckLinkEncoderConfigurationID cfgID, /* out */ double* value) = 0;
+    virtual HRESULT SetString (/* in */ BMDDeckLinkEncoderConfigurationID cfgID, /* in */ CFStringRef value) = 0;
+    virtual HRESULT GetString (/* in */ BMDDeckLinkEncoderConfigurationID cfgID, /* out */ CFStringRef* value) = 0;
+    virtual HRESULT GetBytes (/* in */ BMDDeckLinkEncoderConfigurationID cfgID, /* out */ void* buffer /* optional */, /* in, out */ uint32_t* bufferSize) = 0;
+
+protected:
+    virtual ~IDeckLinkEncoderConfiguration () {} // call Release method to drop reference count
+};
+
+/* Functions */
+
+extern "C" {
+
+
+}
+
+
+
+#endif /* defined(__cplusplus) */
+#endif /* defined(BMD_DECKLINKAPICONFIGURATION_H) */
diff --git a/DeckLinkSDK/Mac/include/DeckLinkAPIConfiguration_v10_11.h b/DeckLinkSDK/Mac/include/DeckLinkAPIConfiguration_v10_11.h
new file mode 100644
index 0000000000..ea19f8db24
--- /dev/null
+++ b/DeckLinkSDK/Mac/include/DeckLinkAPIConfiguration_v10_11.h
@@ -0,0 +1,84 @@
+/* -LICENSE-START-
+** Copyright (c) 2017 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPICONFIGURATION_v10_11_H
+#define BMD_DECKLINKAPICONFIGURATION_v10_11_H
+
+#include "DeckLinkAPIConfiguration.h"
+
+// Interface ID Declarations
+
+BMD_CONST REFIID IID_IDeckLinkConfiguration_v10_11                   = /* EF90380B-4AE5-4346-9077-E288E149F129 */ {0xEF,0x90,0x38,0x0B,0x4A,0xE5,0x43,0x46,0x90,0x77,0xE2,0x88,0xE1,0x49,0xF1,0x29};
+
+/* Enum BMDDeckLinkConfigurationID_v10_11 - DeckLink Configuration ID */
+
+typedef uint32_t BMDDeckLinkConfigurationID_v10_11;
+enum _BMDDeckLinkConfigurationID_v10_11 {
+
+    /* Video Input/Output Integers */
+
+    bmdDeckLinkConfigDuplexMode_v10_11                              = 'dupx',
+};
+
+// Forward Declarations
+
+class IDeckLinkConfiguration_v10_11;
+
+/* Interface IDeckLinkConfiguration_v10_11 - DeckLink Configuration interface */
+
+class IDeckLinkConfiguration_v10_11 : public IUnknown
+{
+public:
+    virtual HRESULT SetFlag (/* in */ BMDDeckLinkConfigurationID cfgID, /* in */ bool value) = 0;
+    virtual HRESULT GetFlag (/* in */ BMDDeckLinkConfigurationID cfgID, /* out */ bool *value) = 0;
+    virtual HRESULT SetInt (/* in */ BMDDeckLinkConfigurationID cfgID, /* in */ int64_t value) = 0;
+    virtual HRESULT GetInt (/* in */ BMDDeckLinkConfigurationID cfgID, /* out */ int64_t *value) = 0;
+    virtual HRESULT SetFloat (/* in */ BMDDeckLinkConfigurationID cfgID, /* in */ double value) = 0;
+    virtual HRESULT GetFloat (/* in */ BMDDeckLinkConfigurationID cfgID, /* out */ double *value) = 0;
+    virtual HRESULT SetString (/* in */ BMDDeckLinkConfigurationID cfgID, /* in */ CFStringRef value) = 0;
+    virtual HRESULT GetString (/* in */ BMDDeckLinkConfigurationID cfgID, /* out */ CFStringRef *value) = 0;
+    virtual HRESULT WriteConfigurationToPreferences (void) = 0;
+
+protected:
+    virtual ~IDeckLinkConfiguration_v10_11 () {} // call Release method to drop reference count
+};
+
+
+#endif /* defined(BMD_DECKLINKAPICONFIGURATION_v10_11_H) */
diff --git a/DeckLinkSDK/Mac/include/DeckLinkAPIConfiguration_v10_2.h b/DeckLinkSDK/Mac/include/DeckLinkAPIConfiguration_v10_2.h
new file mode 100644
index 0000000000..b0e0dbc9e8
--- /dev/null
+++ b/DeckLinkSDK/Mac/include/DeckLinkAPIConfiguration_v10_2.h
@@ -0,0 +1,73 @@
+/* -LICENSE-START-
+** Copyright (c) 2014 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPICONFIGURATION_v10_2_H
+#define BMD_DECKLINKAPICONFIGURATION_v10_2_H
+
+#include "DeckLinkAPIConfiguration.h"
+
+// Interface ID Declarations
+
+BMD_CONST REFIID IID_IDeckLinkConfiguration_v10_2                = /* C679A35B-610C-4D09-B748-1D0478100FC0 */ {0xC6,0x79,0xA3,0x5B,0x61,0x0C,0x4D,0x09,0xB7,0x48,0x1D,0x04,0x78,0x10,0x0F,0xC0};
+
+// Forward Declarations
+
+class IDeckLinkConfiguration_v10_2;
+
+/* Interface IDeckLinkConfiguration_v10_2 - DeckLink Configuration interface */
+
+class IDeckLinkConfiguration_v10_2 : public IUnknown
+{
+public:
+    virtual HRESULT SetFlag (/* in */ BMDDeckLinkConfigurationID cfgID, /* in */ bool value) = 0;
+    virtual HRESULT GetFlag (/* in */ BMDDeckLinkConfigurationID cfgID, /* out */ bool *value) = 0;
+    virtual HRESULT SetInt (/* in */ BMDDeckLinkConfigurationID cfgID, /* in */ int64_t value) = 0;
+    virtual HRESULT GetInt (/* in */ BMDDeckLinkConfigurationID cfgID, /* out */ int64_t *value) = 0;
+    virtual HRESULT SetFloat (/* in */ BMDDeckLinkConfigurationID cfgID, /* in */ double value) = 0;
+    virtual HRESULT GetFloat (/* in */ BMDDeckLinkConfigurationID cfgID, /* out */ double *value) = 0;
+    virtual HRESULT SetString (/* in */ BMDDeckLinkConfigurationID cfgID, /* in */ CFStringRef value) = 0;
+    virtual HRESULT GetString (/* in */ BMDDeckLinkConfigurationID cfgID, /* out */ CFStringRef *value) = 0;
+    virtual HRESULT WriteConfigurationToPreferences (void) = 0;
+
+protected:
+    virtual ~IDeckLinkConfiguration_v10_2 () {} // call Release method to drop reference count
+};
+
+#endif /* defined(BMD_DECKLINKAPICONFIGURATION_v10_2_H) */
diff --git a/DeckLinkSDK/Mac/include/DeckLinkAPIConfiguration_v10_4.h b/DeckLinkSDK/Mac/include/DeckLinkAPIConfiguration_v10_4.h
new file mode 100644
index 0000000000..7d3215de90
--- /dev/null
+++ b/DeckLinkSDK/Mac/include/DeckLinkAPIConfiguration_v10_4.h
@@ -0,0 +1,75 @@
+/* -LICENSE-START-
+** Copyright (c) 2015 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPICONFIGURATION_v10_4_H
+#define BMD_DECKLINKAPICONFIGURATION_v10_4_H
+
+#include "DeckLinkAPIConfiguration.h"
+
+// Interface ID Declarations
+
+BMD_CONST REFIID IID_IDeckLinkConfiguration_v10_4                       = /* 1E69FCF6-4203-4936-8076-2A9F4CFD50CB */ {0x1E,0x69,0xFC,0xF6,0x42,0x03,0x49,0x36,0x80,0x76,0x2A,0x9F,0x4C,0xFD,0x50,0xCB};
+
+//
+// Forward Declarations
+
+class IDeckLinkConfiguration_v10_4;
+
+/* Interface IDeckLinkConfiguration_v10_4 - DeckLink Configuration interface */
+
+class IDeckLinkConfiguration_v10_4 : public IUnknown
+{
+public:
+    virtual HRESULT SetFlag (/* in */ BMDDeckLinkConfigurationID cfgID, /* in */ bool value) = 0;
+    virtual HRESULT GetFlag (/* in */ BMDDeckLinkConfigurationID cfgID, /* out */ bool *value) = 0;
+    virtual HRESULT SetInt (/* in */ BMDDeckLinkConfigurationID cfgID, /* in */ int64_t value) = 0;
+    virtual HRESULT GetInt (/* in */ BMDDeckLinkConfigurationID cfgID, /* out */ int64_t *value) = 0;
+    virtual HRESULT SetFloat (/* in */ BMDDeckLinkConfigurationID cfgID, /* in */ double value) = 0;
+    virtual HRESULT GetFloat (/* in */ BMDDeckLinkConfigurationID cfgID, /* out */ double *value) = 0;
+    virtual HRESULT SetString (/* in */ BMDDeckLinkConfigurationID cfgID, /* in */ CFStringRef value) = 0;
+    virtual HRESULT GetString (/* in */ BMDDeckLinkConfigurationID cfgID, /* out */ CFStringRef *value) = 0;
+    virtual HRESULT WriteConfigurationToPreferences (void) = 0;
+
+protected:
+    virtual ~IDeckLinkConfiguration_v10_4 () {} // call Release method to drop reference count
+};
+
+
+#endif /* defined(BMD_DECKLINKAPICONFIGURATION_v10_4_H) */
diff --git a/DeckLinkSDK/Mac/include/DeckLinkAPIConfiguration_v10_5.h b/DeckLinkSDK/Mac/include/DeckLinkAPIConfiguration_v10_5.h
new file mode 100644
index 0000000000..b67572d4d9
--- /dev/null
+++ b/DeckLinkSDK/Mac/include/DeckLinkAPIConfiguration_v10_5.h
@@ -0,0 +1,73 @@
+/* -LICENSE-START-
+** Copyright (c) 2015 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPICONFIGURATION_v10_5_H
+#define BMD_DECKLINKAPICONFIGURATION_v10_5_H
+
+#include "DeckLinkAPIConfiguration.h"
+
+// Interface ID Declarations
+
+BMD_CONST REFIID IID_IDeckLinkEncoderConfiguration_v10_5          = /* 67455668-0848-45DF-8D8E-350A77C9A028 */ {0x67,0x45,0x56,0x68,0x08,0x48,0x45,0xDF,0x8D,0x8E,0x35,0x0A,0x77,0xC9,0xA0,0x28};
+
+// Forward Declarations
+
+class IDeckLinkConfiguration_v10_5;
+
+/* Interface IDeckLinkEncoderConfiguration_v10_5 - DeckLink Encoder Configuration interface. Obtained from IDeckLinkEncoderInput */
+
+class IDeckLinkEncoderConfiguration_v10_5 : public IUnknown
+{
+public:
+    virtual HRESULT SetFlag (/* in */ BMDDeckLinkEncoderConfigurationID cfgID, /* in */ bool value) = 0;
+    virtual HRESULT GetFlag (/* in */ BMDDeckLinkEncoderConfigurationID cfgID, /* out */ bool *value) = 0;
+    virtual HRESULT SetInt (/* in */ BMDDeckLinkEncoderConfigurationID cfgID, /* in */ int64_t value) = 0;
+    virtual HRESULT GetInt (/* in */ BMDDeckLinkEncoderConfigurationID cfgID, /* out */ int64_t *value) = 0;
+    virtual HRESULT SetFloat (/* in */ BMDDeckLinkEncoderConfigurationID cfgID, /* in */ double value) = 0;
+    virtual HRESULT GetFloat (/* in */ BMDDeckLinkEncoderConfigurationID cfgID, /* out */ double *value) = 0;
+    virtual HRESULT SetString (/* in */ BMDDeckLinkEncoderConfigurationID cfgID, /* in */ CFStringRef value) = 0;
+    virtual HRESULT GetString (/* in */ BMDDeckLinkEncoderConfigurationID cfgID, /* out */ CFStringRef *value) = 0;
+    virtual HRESULT GetDecoderConfigurationInfo (/* out */ void *buffer, /* in */ long bufferSize, /* out */ long *returnedSize) = 0;
+
+protected:
+    virtual ~IDeckLinkEncoderConfiguration_v10_5 () {} // call Release method to drop reference count
+};
+
+#endif /* defined(BMD_DECKLINKAPICONFIGURATION_v10_5_H) */
diff --git a/DeckLinkSDK/Mac/include/DeckLinkAPIConfiguration_v10_9.h b/DeckLinkSDK/Mac/include/DeckLinkAPIConfiguration_v10_9.h
new file mode 100644
index 0000000000..04a6a45ce8
--- /dev/null
+++ b/DeckLinkSDK/Mac/include/DeckLinkAPIConfiguration_v10_9.h
@@ -0,0 +1,75 @@
+/* -LICENSE-START-
+** Copyright (c) 2017 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPICONFIGURATION_v10_9_H
+#define BMD_DECKLINKAPICONFIGURATION_v10_9_H
+
+#include "DeckLinkAPIConfiguration.h"
+
+// Interface ID Declarations
+
+BMD_CONST REFIID IID_IDeckLinkConfiguration_v10_9                       = /* CB71734A-FE37-4E8D-8E13-802133A1C3F2 */ {0xCB,0x71,0x73,0x4A,0xFE,0x37,0x4E,0x8D,0x8E,0x13,0x80,0x21,0x33,0xA1,0xC3,0xF2};
+
+//
+// Forward Declarations
+
+class IDeckLinkConfiguration_v10_9;
+
+/* Interface IDeckLinkConfiguration_v10_9 - DeckLink Configuration interface */
+
+class IDeckLinkConfiguration_v10_9 : public IUnknown
+{
+public:
+    virtual HRESULT SetFlag (/* in */ BMDDeckLinkConfigurationID cfgID, /* in */ bool value) = 0;
+    virtual HRESULT GetFlag (/* in */ BMDDeckLinkConfigurationID cfgID, /* out */ bool *value) = 0;
+    virtual HRESULT SetInt (/* in */ BMDDeckLinkConfigurationID cfgID, /* in */ int64_t value) = 0;
+    virtual HRESULT GetInt (/* in */ BMDDeckLinkConfigurationID cfgID, /* out */ int64_t *value) = 0;
+    virtual HRESULT SetFloat (/* in */ BMDDeckLinkConfigurationID cfgID, /* in */ double value) = 0;
+    virtual HRESULT GetFloat (/* in */ BMDDeckLinkConfigurationID cfgID, /* out */ double *value) = 0;
+    virtual HRESULT SetString (/* in */ BMDDeckLinkConfigurationID cfgID, /* in */ CFStringRef value) = 0;
+    virtual HRESULT GetString (/* in */ BMDDeckLinkConfigurationID cfgID, /* out */ CFStringRef *value) = 0;
+    virtual HRESULT WriteConfigurationToPreferences (void) = 0;
+
+protected:
+    virtual ~IDeckLinkConfiguration_v10_9 () {} // call Release method to drop reference count
+};
+
+
+#endif /* defined(BMD_DECKLINKAPICONFIGURATION_v10_9_H) */
diff --git a/DeckLinkSDK/Mac/include/DeckLinkAPIDeckControl.h b/DeckLinkSDK/Mac/include/DeckLinkAPIDeckControl.h
new file mode 100644
index 0000000000..f946af20dc
--- /dev/null
+++ b/DeckLinkSDK/Mac/include/DeckLinkAPIDeckControl.h
@@ -0,0 +1,223 @@
+/* -LICENSE-START-
+** Copyright (c) 2022 Blackmagic Design
+**
+** Permission is hereby granted, free of charge, to any person or organization
+** obtaining a copy of the software and accompanying documentation covered by
+** this license (the "Software") to use, reproduce, display, distribute,
+** execute, and transmit the Software, and to prepare derivative works of the
+** Software, and to permit third-parties to whom the Software is furnished to
+** do so, all subject to the following:
+**
+** The copyright notices in the Software and this entire statement, including
+** the above license grant, this restriction and the following disclaimer,
+** must be included in all copies of the Software, in whole or in part, and
+** all derivative works of the Software, unless such copies or derivative
+** works are solely in the form of machine-executable object code generated by
+** a source language processor.
+**
+** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+** DEALINGS IN THE SOFTWARE.
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPIDECKCONTROL_H
+#define BMD_DECKLINKAPIDECKCONTROL_H
+
+
+#ifndef BMD_CONST
+    #if defined(_MSC_VER)
+        #define BMD_CONST __declspec(selectany) static const
+    #else
+        #define BMD_CONST static const
+    #endif
+#endif
+
+#ifndef BMD_PUBLIC
+	#define BMD_PUBLIC
+#endif
+
+// Type Declarations
+
+
+// Interface ID Declarations
+
+BMD_CONST REFIID IID_IDeckLinkDeckControlStatusCallback           = /* 53436FFB-B434-4906-BADC-AE3060FFE8EF */ { 0x53,0x43,0x6F,0xFB,0xB4,0x34,0x49,0x06,0xBA,0xDC,0xAE,0x30,0x60,0xFF,0xE8,0xEF };
+BMD_CONST REFIID IID_IDeckLinkDeckControl                         = /* 8E1C3ACE-19C7-4E00-8B92-D80431D958BE */ { 0x8E,0x1C,0x3A,0xCE,0x19,0xC7,0x4E,0x00,0x8B,0x92,0xD8,0x04,0x31,0xD9,0x58,0xBE };
+
+/* Enum BMDDeckControlMode - DeckControl mode */
+
+typedef uint32_t BMDDeckControlMode;
+enum _BMDDeckControlMode {
+    bmdDeckControlNotOpened                                      = /* 'ntop' */ 0x6E746F70,
+    bmdDeckControlVTRControlMode                                 = /* 'vtrc' */ 0x76747263,
+    bmdDeckControlExportMode                                     = /* 'expm' */ 0x6578706D,
+    bmdDeckControlCaptureMode                                    = /* 'capm' */ 0x6361706D
+};
+
+/* Enum BMDDeckControlEvent - DeckControl event */
+
+typedef uint32_t BMDDeckControlEvent;
+enum _BMDDeckControlEvent {
+    bmdDeckControlAbortedEvent                                   = /* 'abte' */ 0x61627465,	// This event is triggered when a capture or edit-to-tape operation is aborted.
+
+    /* Export-To-Tape events */
+
+    bmdDeckControlPrepareForExportEvent                          = /* 'pfee' */ 0x70666565,	// This event is triggered a few frames before reaching the in-point. IDeckLinkInput::StartScheduledPlayback should be called at this point.
+    bmdDeckControlExportCompleteEvent                            = /* 'exce' */ 0x65786365,	// This event is triggered a few frames after reaching the out-point. At this point, it is safe to stop playback. Upon reception of this event the deck's control mode is set back to bmdDeckControlVTRControlMode.
+
+    /* Capture events */
+
+    bmdDeckControlPrepareForCaptureEvent                         = /* 'pfce' */ 0x70666365,	// This event is triggered a few frames before reaching the in-point. The serial timecode attached to IDeckLinkVideoInputFrames is now valid.
+    bmdDeckControlCaptureCompleteEvent                           = /* 'ccev' */ 0x63636576	// This event is triggered a few frames after reaching the out-point. Upon reception of this event the deck's control mode is set back to bmdDeckControlVTRControlMode.
+};
+
+/* Enum BMDDeckControlVTRControlState - VTR Control state */
+
+typedef uint32_t BMDDeckControlVTRControlState;
+enum _BMDDeckControlVTRControlState {
+    bmdDeckControlNotInVTRControlMode                            = /* 'nvcm' */ 0x6E76636D,
+    bmdDeckControlVTRControlPlaying                              = /* 'vtrp' */ 0x76747270,
+    bmdDeckControlVTRControlRecording                            = /* 'vtrr' */ 0x76747272,
+    bmdDeckControlVTRControlStill                                = /* 'vtra' */ 0x76747261,
+    bmdDeckControlVTRControlShuttleForward                       = /* 'vtsf' */ 0x76747366,
+    bmdDeckControlVTRControlShuttleReverse                       = /* 'vtsr' */ 0x76747372,
+    bmdDeckControlVTRControlJogForward                           = /* 'vtjf' */ 0x76746A66,
+    bmdDeckControlVTRControlJogReverse                           = /* 'vtjr' */ 0x76746A72,
+    bmdDeckControlVTRControlStopped                              = /* 'vtro' */ 0x7674726F
+};
+
+/* Enum BMDDeckControlStatusFlags - Deck Control status flags */
+
+typedef uint32_t BMDDeckControlStatusFlags;
+enum _BMDDeckControlStatusFlags {
+    bmdDeckControlStatusDeckConnected                            = 1 << 0,
+    bmdDeckControlStatusRemoteMode                               = 1 << 1,
+    bmdDeckControlStatusRecordInhibited                          = 1 << 2,
+    bmdDeckControlStatusCassetteOut                              = 1 << 3
+};
+
+/* Enum BMDDeckControlExportModeOpsFlags - Export mode flags */
+
+typedef uint32_t BMDDeckControlExportModeOpsFlags;
+enum _BMDDeckControlExportModeOpsFlags {
+    bmdDeckControlExportModeInsertVideo                          = 1 << 0,
+    bmdDeckControlExportModeInsertAudio1                         = 1 << 1,
+    bmdDeckControlExportModeInsertAudio2                         = 1 << 2,
+    bmdDeckControlExportModeInsertAudio3                         = 1 << 3,
+    bmdDeckControlExportModeInsertAudio4                         = 1 << 4,
+    bmdDeckControlExportModeInsertAudio5                         = 1 << 5,
+    bmdDeckControlExportModeInsertAudio6                         = 1 << 6,
+    bmdDeckControlExportModeInsertAudio7                         = 1 << 7,
+    bmdDeckControlExportModeInsertAudio8                         = 1 << 8,
+    bmdDeckControlExportModeInsertAudio9                         = 1 << 9,
+    bmdDeckControlExportModeInsertAudio10                        = 1 << 10,
+    bmdDeckControlExportModeInsertAudio11                        = 1 << 11,
+    bmdDeckControlExportModeInsertAudio12                        = 1 << 12,
+    bmdDeckControlExportModeInsertTimeCode                       = 1 << 13,
+    bmdDeckControlExportModeInsertAssemble                       = 1 << 14,
+    bmdDeckControlExportModeInsertPreview                        = 1 << 15,
+    bmdDeckControlUseManualExport                                = 1 << 16
+};
+
+/* Enum BMDDeckControlError - Deck Control error */
+
+typedef uint32_t BMDDeckControlError;
+enum _BMDDeckControlError {
+    bmdDeckControlNoError                                        = /* 'noer' */ 0x6E6F6572,
+    bmdDeckControlModeError                                      = /* 'moer' */ 0x6D6F6572,
+    bmdDeckControlMissedInPointError                             = /* 'mier' */ 0x6D696572,
+    bmdDeckControlDeckTimeoutError                               = /* 'dter' */ 0x64746572,
+    bmdDeckControlCommandFailedError                             = /* 'cfer' */ 0x63666572,
+    bmdDeckControlDeviceAlreadyOpenedError                       = /* 'dalo' */ 0x64616C6F,
+    bmdDeckControlFailedToOpenDeviceError                        = /* 'fder' */ 0x66646572,
+    bmdDeckControlInLocalModeError                               = /* 'lmer' */ 0x6C6D6572,
+    bmdDeckControlEndOfTapeError                                 = /* 'eter' */ 0x65746572,
+    bmdDeckControlUserAbortError                                 = /* 'uaer' */ 0x75616572,
+    bmdDeckControlNoTapeInDeckError                              = /* 'nter' */ 0x6E746572,
+    bmdDeckControlNoVideoFromCardError                           = /* 'nvfc' */ 0x6E766663,
+    bmdDeckControlNoCommunicationError                           = /* 'ncom' */ 0x6E636F6D,
+    bmdDeckControlBufferTooSmallError                            = /* 'btsm' */ 0x6274736D,
+    bmdDeckControlBadChecksumError                               = /* 'chks' */ 0x63686B73,
+    bmdDeckControlUnknownError                                   = /* 'uner' */ 0x756E6572
+};
+
+#if defined(__cplusplus)
+
+// Forward Declarations
+
+class IDeckLinkDeckControlStatusCallback;
+class IDeckLinkDeckControl;
+
+/* Interface IDeckLinkDeckControlStatusCallback - Deck control state change callback. */
+
+class BMD_PUBLIC IDeckLinkDeckControlStatusCallback : public IUnknown
+{
+public:
+    virtual HRESULT TimecodeUpdate (/* in */ BMDTimecodeBCD currentTimecode) = 0;
+    virtual HRESULT VTRControlStateChanged (/* in */ BMDDeckControlVTRControlState newState, /* in */ BMDDeckControlError error) = 0;
+    virtual HRESULT DeckControlEventReceived (/* in */ BMDDeckControlEvent event, /* in */ BMDDeckControlError error) = 0;
+    virtual HRESULT DeckControlStatusChanged (/* in */ BMDDeckControlStatusFlags flags, /* in */ uint32_t mask) = 0;
+
+protected:
+    virtual ~IDeckLinkDeckControlStatusCallback () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkDeckControl - Deck Control main interface */
+
+class BMD_PUBLIC IDeckLinkDeckControl : public IUnknown
+{
+public:
+    virtual HRESULT Open (/* in */ BMDTimeScale timeScale, /* in */ BMDTimeValue timeValue, /* in */ bool timecodeIsDropFrame, /* out */ BMDDeckControlError* error) = 0;
+    virtual HRESULT Close (/* in */ bool standbyOn) = 0;
+    virtual HRESULT GetCurrentState (/* out */ BMDDeckControlMode* mode, /* out */ BMDDeckControlVTRControlState* vtrControlState, /* out */ BMDDeckControlStatusFlags* flags) = 0;
+    virtual HRESULT SetStandby (/* in */ bool standbyOn) = 0;
+    virtual HRESULT SendCommand (/* in */ uint8_t* inBuffer, /* in */ uint32_t inBufferSize, /* out */ uint8_t* outBuffer, /* out */ uint32_t* outDataSize, /* in */ uint32_t outBufferSize, /* out */ BMDDeckControlError* error) = 0;
+    virtual HRESULT Play (/* out */ BMDDeckControlError* error) = 0;
+    virtual HRESULT Stop (/* out */ BMDDeckControlError* error) = 0;
+    virtual HRESULT TogglePlayStop (/* out */ BMDDeckControlError* error) = 0;
+    virtual HRESULT Eject (/* out */ BMDDeckControlError* error) = 0;
+    virtual HRESULT GoToTimecode (/* in */ BMDTimecodeBCD timecode, /* out */ BMDDeckControlError* error) = 0;
+    virtual HRESULT FastForward (/* in */ bool viewTape, /* out */ BMDDeckControlError* error) = 0;
+    virtual HRESULT Rewind (/* in */ bool viewTape, /* out */ BMDDeckControlError* error) = 0;
+    virtual HRESULT StepForward (/* out */ BMDDeckControlError* error) = 0;
+    virtual HRESULT StepBack (/* out */ BMDDeckControlError* error) = 0;
+    virtual HRESULT Jog (/* in */ double rate, /* out */ BMDDeckControlError* error) = 0;
+    virtual HRESULT Shuttle (/* in */ double rate, /* out */ BMDDeckControlError* error) = 0;
+    virtual HRESULT GetTimecodeString (/* out */ CFStringRef* currentTimeCode, /* out */ BMDDeckControlError* error) = 0;
+    virtual HRESULT GetTimecode (/* out */ IDeckLinkTimecode** currentTimecode, /* out */ BMDDeckControlError* error) = 0;
+    virtual HRESULT GetTimecodeBCD (/* out */ BMDTimecodeBCD* currentTimecode, /* out */ BMDDeckControlError* error) = 0;
+    virtual HRESULT SetPreroll (/* in */ uint32_t prerollSeconds) = 0;
+    virtual HRESULT GetPreroll (/* out */ uint32_t* prerollSeconds) = 0;
+    virtual HRESULT SetExportOffset (/* in */ int32_t exportOffsetFields) = 0;
+    virtual HRESULT GetExportOffset (/* out */ int32_t* exportOffsetFields) = 0;
+    virtual HRESULT GetManualExportOffset (/* out */ int32_t* deckManualExportOffsetFields) = 0;
+    virtual HRESULT SetCaptureOffset (/* in */ int32_t captureOffsetFields) = 0;
+    virtual HRESULT GetCaptureOffset (/* out */ int32_t* captureOffsetFields) = 0;
+    virtual HRESULT StartExport (/* in */ BMDTimecodeBCD inTimecode, /* in */ BMDTimecodeBCD outTimecode, /* in */ BMDDeckControlExportModeOpsFlags exportModeOps, /* out */ BMDDeckControlError* error) = 0;
+    virtual HRESULT StartCapture (/* in */ bool useVITC, /* in */ BMDTimecodeBCD inTimecode, /* in */ BMDTimecodeBCD outTimecode, /* out */ BMDDeckControlError* error) = 0;
+    virtual HRESULT GetDeviceID (/* out */ uint16_t* deviceId, /* out */ BMDDeckControlError* error) = 0;
+    virtual HRESULT Abort (void) = 0;
+    virtual HRESULT CrashRecordStart (/* out */ BMDDeckControlError* error) = 0;
+    virtual HRESULT CrashRecordStop (/* out */ BMDDeckControlError* error) = 0;
+    virtual HRESULT SetCallback (/* in */ IDeckLinkDeckControlStatusCallback* callback) = 0;
+
+protected:
+    virtual ~IDeckLinkDeckControl () {} // call Release method to drop reference count
+};
+
+/* Functions */
+
+extern "C" {
+
+
+}
+
+
+
+#endif /* defined(__cplusplus) */
+#endif /* defined(BMD_DECKLINKAPIDECKCONTROL_H) */
diff --git a/DeckLinkSDK/Mac/include/DeckLinkAPIDiscovery.h b/DeckLinkSDK/Mac/include/DeckLinkAPIDiscovery.h
new file mode 100644
index 0000000000..d0ac6ddf1f
--- /dev/null
+++ b/DeckLinkSDK/Mac/include/DeckLinkAPIDiscovery.h
@@ -0,0 +1,79 @@
+/* -LICENSE-START-
+** Copyright (c) 2022 Blackmagic Design
+**
+** Permission is hereby granted, free of charge, to any person or organization
+** obtaining a copy of the software and accompanying documentation covered by
+** this license (the "Software") to use, reproduce, display, distribute,
+** execute, and transmit the Software, and to prepare derivative works of the
+** Software, and to permit third-parties to whom the Software is furnished to
+** do so, all subject to the following:
+**
+** The copyright notices in the Software and this entire statement, including
+** the above license grant, this restriction and the following disclaimer,
+** must be included in all copies of the Software, in whole or in part, and
+** all derivative works of the Software, unless such copies or derivative
+** works are solely in the form of machine-executable object code generated by
+** a source language processor.
+**
+** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+** DEALINGS IN THE SOFTWARE.
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPIDISCOVERY_H
+#define BMD_DECKLINKAPIDISCOVERY_H
+
+
+#ifndef BMD_CONST
+    #if defined(_MSC_VER)
+        #define BMD_CONST __declspec(selectany) static const
+    #else
+        #define BMD_CONST static const
+    #endif
+#endif
+
+#ifndef BMD_PUBLIC
+	#define BMD_PUBLIC
+#endif
+
+// Type Declarations
+
+
+// Interface ID Declarations
+
+BMD_CONST REFIID IID_IDeckLink                                    = /* C418FBDD-0587-48ED-8FE5-640F0A14AF91 */ { 0xC4,0x18,0xFB,0xDD,0x05,0x87,0x48,0xED,0x8F,0xE5,0x64,0x0F,0x0A,0x14,0xAF,0x91 };
+
+#if defined(__cplusplus)
+
+// Forward Declarations
+
+class IDeckLink;
+
+/* Interface IDeckLink - Represents a DeckLink device */
+
+class BMD_PUBLIC IDeckLink : public IUnknown
+{
+public:
+    virtual HRESULT GetModelName (/* out */ CFStringRef* modelName) = 0;
+    virtual HRESULT GetDisplayName (/* out */ CFStringRef* displayName) = 0;
+
+protected:
+    virtual ~IDeckLink () {} // call Release method to drop reference count
+};
+
+/* Functions */
+
+extern "C" {
+
+
+}
+
+
+
+#endif /* defined(__cplusplus) */
+#endif /* defined(BMD_DECKLINKAPIDISCOVERY_H) */
diff --git a/DeckLinkSDK/Mac/include/DeckLinkAPIDispatch.cpp b/DeckLinkSDK/Mac/include/DeckLinkAPIDispatch.cpp
new file mode 100644
index 0000000000..abb03ac215
--- /dev/null
+++ b/DeckLinkSDK/Mac/include/DeckLinkAPIDispatch.cpp
@@ -0,0 +1,245 @@
+/* -LICENSE-START-
+** Copyright (c) 2009 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+/* DeckLinkAPIDispatch.cpp */
+
+#include "DeckLinkAPI.h"
+#include <pthread.h>
+
+#if BLACKMAGIC_DECKLINK_API_MAGIC != 1
+	#error The DeckLink API version of DeckLinkAPIDispatch.cpp is not the same version as DeckLinkAPI.h
+#endif
+
+#define kDeckLinkAPI_BundlePath "/Library/Frameworks/DeckLinkAPI.framework"
+
+
+typedef IDeckLinkIterator* (*CreateIteratorFunc)(void);
+typedef IDeckLinkAPIInformation* (*CreateAPIInformationFunc)(void);
+typedef IDeckLinkGLScreenPreviewHelper* (*CreateOpenGLScreenPreviewHelperFunc)(void);
+typedef IDeckLinkGLScreenPreviewHelper* (*CreateOpenGL3ScreenPreviewHelperFunc)(void);
+typedef IDeckLinkMetalScreenPreviewHelper* (*CreateMetalScreenPreviewHelperFunc)(void);
+typedef IDeckLinkCocoaScreenPreviewCallback* (*CreateCocoaScreenPreviewFunc)(void*);
+typedef IDeckLinkVideoConversion* (*CreateVideoConversionInstanceFunc)(void);
+typedef IDeckLinkDiscovery* (*CreateDeckLinkDiscoveryInstanceFunc)(void);
+typedef IDeckLinkVideoFrameAncillaryPackets* (*CreateVideoFrameAncillaryPacketsInstanceFunc)(void);
+
+static pthread_once_t						gDeckLinkOnceControl		= PTHREAD_ONCE_INIT;
+static CFBundleRef							gDeckLinkAPIBundleRef		= NULL;
+static CreateIteratorFunc					gCreateIteratorFunc			= NULL;
+static CreateAPIInformationFunc				gCreateAPIInformationFunc	= NULL;
+static CreateOpenGLScreenPreviewHelperFunc	gCreateOpenGLPreviewFunc	= NULL;
+static CreateOpenGL3ScreenPreviewHelperFunc	gCreateOpenGL3PreviewFunc	= NULL;
+static CreateMetalScreenPreviewHelperFunc	gCreateMetalPreviewFunc		= NULL;
+static CreateCocoaScreenPreviewFunc			gCreateCocoaPreviewFunc		= NULL;
+static CreateVideoConversionInstanceFunc	gCreateVideoConversionFunc	= NULL;
+static CreateDeckLinkDiscoveryInstanceFunc  gCreateDeckLinkDiscoveryFunc= NULL;
+static CreateVideoFrameAncillaryPacketsInstanceFunc	gCreateVideoFrameAncillaryPacketsFunc = NULL;
+
+
+static void	InitDeckLinkAPI (void)
+{
+	CFURLRef		bundleURL;
+
+	bundleURL = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, CFSTR(kDeckLinkAPI_BundlePath), kCFURLPOSIXPathStyle, true);
+	if (bundleURL != NULL)
+	{
+		gDeckLinkAPIBundleRef = CFBundleCreate(kCFAllocatorDefault, bundleURL);
+		if (gDeckLinkAPIBundleRef != NULL)
+		{
+			gCreateIteratorFunc = (CreateIteratorFunc)CFBundleGetFunctionPointerForName(gDeckLinkAPIBundleRef, CFSTR("CreateDeckLinkIteratorInstance_0004"));
+			gCreateAPIInformationFunc = (CreateAPIInformationFunc)CFBundleGetFunctionPointerForName(gDeckLinkAPIBundleRef, CFSTR("CreateDeckLinkAPIInformationInstance_0001"));
+			gCreateOpenGLPreviewFunc = (CreateOpenGLScreenPreviewHelperFunc)CFBundleGetFunctionPointerForName(gDeckLinkAPIBundleRef, CFSTR("CreateOpenGLScreenPreviewHelper_0001"));
+			gCreateOpenGL3PreviewFunc = (CreateOpenGL3ScreenPreviewHelperFunc)CFBundleGetFunctionPointerForName(gDeckLinkAPIBundleRef, CFSTR("CreateOpenGL3ScreenPreviewHelper_0001"));
+			gCreateMetalPreviewFunc = (CreateMetalScreenPreviewHelperFunc)CFBundleGetFunctionPointerForName(gDeckLinkAPIBundleRef, CFSTR("CreateMetalScreenPreviewHelper_0001"));
+			gCreateCocoaPreviewFunc = (CreateCocoaScreenPreviewFunc)CFBundleGetFunctionPointerForName(gDeckLinkAPIBundleRef, CFSTR("CreateCocoaScreenPreview_0001"));
+			gCreateVideoConversionFunc = (CreateVideoConversionInstanceFunc)CFBundleGetFunctionPointerForName(gDeckLinkAPIBundleRef, CFSTR("CreateVideoConversionInstance_0001"));
+            gCreateDeckLinkDiscoveryFunc = (CreateDeckLinkDiscoveryInstanceFunc)CFBundleGetFunctionPointerForName(gDeckLinkAPIBundleRef, CFSTR("CreateDeckLinkDiscoveryInstance_0003"));
+            gCreateVideoFrameAncillaryPacketsFunc = (CreateVideoFrameAncillaryPacketsInstanceFunc)CFBundleGetFunctionPointerForName(gDeckLinkAPIBundleRef, CFSTR("CreateVideoFrameAncillaryPacketsInstance_0001"));
+		}
+		CFRelease(bundleURL);
+	}
+}
+
+bool		IsDeckLinkAPIPresent (void)
+{
+	// If the DeckLink API bundle was successfully loaded, return this knowledge to the caller
+	if (gDeckLinkAPIBundleRef != NULL)
+		return true;
+	
+	return false;
+}
+
+IDeckLinkIterator*		CreateDeckLinkIteratorInstance (void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+	
+	if (gCreateIteratorFunc == NULL)
+		return NULL;
+	
+	return gCreateIteratorFunc();
+}
+
+IDeckLinkAPIInformation*	CreateDeckLinkAPIInformationInstance (void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+	
+	if (gCreateAPIInformationFunc == NULL)
+		return NULL;
+	
+	return gCreateAPIInformationFunc();
+}
+
+IDeckLinkGLScreenPreviewHelper*		CreateOpenGLScreenPreviewHelper (void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+	
+	if (gCreateOpenGLPreviewFunc == NULL)
+		return NULL;
+	
+	return gCreateOpenGLPreviewFunc();
+}
+
+IDeckLinkGLScreenPreviewHelper*		CreateOpenGL3ScreenPreviewHelper (void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+
+	if (gCreateOpenGL3PreviewFunc == NULL)
+		return NULL;
+
+	return gCreateOpenGL3PreviewFunc();
+}
+
+IDeckLinkMetalScreenPreviewHelper*		CreateMetalScreenPreviewHelper (void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+	
+	if (gCreateMetalPreviewFunc == NULL)
+		return NULL;
+	
+	return gCreateMetalPreviewFunc();
+}
+
+IDeckLinkCocoaScreenPreviewCallback*	CreateCocoaScreenPreview (void* parentView)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+	
+	if (gCreateCocoaPreviewFunc == NULL)
+		return NULL;
+	
+	return gCreateCocoaPreviewFunc(parentView);
+}
+
+IDeckLinkVideoConversion* CreateVideoConversionInstance (void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+	
+	if (gCreateVideoConversionFunc == NULL)
+		return NULL;
+	
+	return gCreateVideoConversionFunc();
+}
+
+IDeckLinkDiscovery* CreateDeckLinkDiscoveryInstance (void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+	
+	if (gCreateDeckLinkDiscoveryFunc == NULL)
+		return NULL;
+	
+	return gCreateDeckLinkDiscoveryFunc();
+}
+
+IDeckLinkVideoFrameAncillaryPackets* CreateVideoFrameAncillaryPacketsInstance (void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+	
+	if (gCreateVideoFrameAncillaryPacketsFunc == NULL)
+		return NULL;
+	
+	return gCreateVideoFrameAncillaryPacketsFunc();
+}
+
+
+#define kBMDStreamingAPI_BundlePath "/Library/Application Support/Blackmagic Design/Streaming/BMDStreamingAPI.bundle"
+
+typedef IBMDStreamingDiscovery* (*CreateDiscoveryFunc)(void);
+typedef IBMDStreamingH264NALParser* (*CreateNALParserFunc)(void);
+
+static pthread_once_t      gBMDStreamingOnceControl  = PTHREAD_ONCE_INIT;
+static CFBundleRef         gBMDStreamingAPIBundleRef = NULL;
+static CreateDiscoveryFunc gCreateDiscoveryFunc      = NULL;
+static CreateNALParserFunc gCreateNALParserFunc      = NULL;
+
+static void InitBMDStreamingAPI(void)
+{
+	CFURLRef bundleURL;
+
+	bundleURL = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, CFSTR(kBMDStreamingAPI_BundlePath), kCFURLPOSIXPathStyle, true);
+	if (bundleURL != NULL)
+	{
+		gBMDStreamingAPIBundleRef = CFBundleCreate(kCFAllocatorDefault, bundleURL);
+		if (gBMDStreamingAPIBundleRef != NULL)
+		{
+			gCreateDiscoveryFunc = (CreateDiscoveryFunc)CFBundleGetFunctionPointerForName(gBMDStreamingAPIBundleRef, CFSTR("CreateBMDStreamingDiscoveryInstance_0002"));
+			gCreateNALParserFunc = (CreateNALParserFunc)CFBundleGetFunctionPointerForName(gBMDStreamingAPIBundleRef, CFSTR("CreateBMDStreamingH264NALParser_0001"));
+		}
+
+		CFRelease(bundleURL);
+	}
+}
+
+IBMDStreamingDiscovery* CreateBMDStreamingDiscoveryInstance()
+{
+	pthread_once(&gBMDStreamingOnceControl, InitBMDStreamingAPI);
+
+	if (gCreateDiscoveryFunc == NULL)
+		return NULL;
+
+	return gCreateDiscoveryFunc();
+}
+
+IBMDStreamingH264NALParser* CreateBMDStreamingH264NALParser()
+{
+	pthread_once(&gBMDStreamingOnceControl, InitBMDStreamingAPI);
+
+	if (gCreateNALParserFunc == NULL)
+		return NULL;
+
+	return gCreateNALParserFunc();
+}
diff --git a/DeckLinkSDK/Mac/include/DeckLinkAPIDispatch_v10_11.cpp b/DeckLinkSDK/Mac/include/DeckLinkAPIDispatch_v10_11.cpp
new file mode 100644
index 0000000000..b7afbeb4eb
--- /dev/null
+++ b/DeckLinkSDK/Mac/include/DeckLinkAPIDispatch_v10_11.cpp
@@ -0,0 +1,219 @@
+/* -LICENSE-START-
+** Copyright (c) 2019 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+/* DeckLinkAPIDispatch.cpp */
+
+#include "DeckLinkAPI_v10_11.h"
+#include <pthread.h>
+
+#if BLACKMAGIC_DECKLINK_API_MAGIC != 1
+	#error The DeckLink API version of DeckLinkAPIDispatch.cpp is not the same version as DeckLinkAPI.h
+#endif
+
+#define kDeckLinkAPI_BundlePath "/Library/Frameworks/DeckLinkAPI.framework"
+
+
+typedef IDeckLinkIterator* (*CreateIteratorFunc)(void);
+typedef IDeckLinkAPIInformation* (*CreateAPIInformationFunc)(void);
+typedef IDeckLinkGLScreenPreviewHelper* (*CreateOpenGLScreenPreviewHelperFunc)(void);
+typedef IDeckLinkCocoaScreenPreviewCallback* (*CreateCocoaScreenPreviewFunc)(void*);
+typedef IDeckLinkVideoConversion* (*CreateVideoConversionInstanceFunc)(void);
+typedef IDeckLinkDiscovery* (*CreateDeckLinkDiscoveryInstanceFunc)(void);
+typedef IDeckLinkVideoFrameAncillaryPackets* (*CreateVideoFrameAncillaryPacketsInstanceFunc)(void);
+
+static pthread_once_t						gDeckLinkOnceControl		= PTHREAD_ONCE_INIT;
+static CFBundleRef							gDeckLinkAPIBundleRef		= NULL;
+static CreateIteratorFunc					gCreateIteratorFunc			= NULL;
+static CreateAPIInformationFunc				gCreateAPIInformationFunc	= NULL;
+static CreateOpenGLScreenPreviewHelperFunc	gCreateOpenGLPreviewFunc	= NULL;
+static CreateCocoaScreenPreviewFunc			gCreateCocoaPreviewFunc		= NULL;
+static CreateVideoConversionInstanceFunc	gCreateVideoConversionFunc	= NULL;
+static CreateDeckLinkDiscoveryInstanceFunc  gCreateDeckLinkDiscoveryFunc= NULL;
+static CreateVideoFrameAncillaryPacketsInstanceFunc	gCreateVideoFrameAncillaryPacketsFunc = NULL;
+
+
+static void	InitDeckLinkAPI (void)
+{
+	CFURLRef		bundleURL;
+
+	bundleURL = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, CFSTR(kDeckLinkAPI_BundlePath), kCFURLPOSIXPathStyle, true);
+	if (bundleURL != NULL)
+	{
+		gDeckLinkAPIBundleRef = CFBundleCreate(kCFAllocatorDefault, bundleURL);
+		if (gDeckLinkAPIBundleRef != NULL)
+		{
+			gCreateIteratorFunc = (CreateIteratorFunc)CFBundleGetFunctionPointerForName(gDeckLinkAPIBundleRef, CFSTR("CreateDeckLinkIteratorInstance_0003"));
+			gCreateAPIInformationFunc = (CreateAPIInformationFunc)CFBundleGetFunctionPointerForName(gDeckLinkAPIBundleRef, CFSTR("CreateDeckLinkAPIInformationInstance_0001"));
+			gCreateOpenGLPreviewFunc = (CreateOpenGLScreenPreviewHelperFunc)CFBundleGetFunctionPointerForName(gDeckLinkAPIBundleRef, CFSTR("CreateOpenGLScreenPreviewHelper_0001"));
+			gCreateCocoaPreviewFunc = (CreateCocoaScreenPreviewFunc)CFBundleGetFunctionPointerForName(gDeckLinkAPIBundleRef, CFSTR("CreateCocoaScreenPreview_0001"));
+			gCreateVideoConversionFunc = (CreateVideoConversionInstanceFunc)CFBundleGetFunctionPointerForName(gDeckLinkAPIBundleRef, CFSTR("CreateVideoConversionInstance_0001"));
+            gCreateDeckLinkDiscoveryFunc = (CreateDeckLinkDiscoveryInstanceFunc)CFBundleGetFunctionPointerForName(gDeckLinkAPIBundleRef, CFSTR("CreateDeckLinkDiscoveryInstance_0002"));
+            gCreateVideoFrameAncillaryPacketsFunc = (CreateVideoFrameAncillaryPacketsInstanceFunc)CFBundleGetFunctionPointerForName(gDeckLinkAPIBundleRef, CFSTR("CreateVideoFrameAncillaryPacketsInstance_0001"));
+		}
+		CFRelease(bundleURL);
+	}
+}
+
+bool		IsDeckLinkAPIPresent_v10_11 (void)
+{
+	// If the DeckLink API bundle was successfully loaded, return this knowledge to the caller
+	if (gDeckLinkAPIBundleRef != NULL)
+		return true;
+	
+	return false;
+}
+
+IDeckLinkIterator*		CreateDeckLinkIteratorInstance_v10_11 (void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+	
+	if (gCreateIteratorFunc == NULL)
+		return NULL;
+	
+	return gCreateIteratorFunc();
+}
+
+IDeckLinkAPIInformation*	CreateDeckLinkAPIInformationInstance_v10_11 (void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+	
+	if (gCreateAPIInformationFunc == NULL)
+		return NULL;
+	
+	return gCreateAPIInformationFunc();
+}
+
+IDeckLinkGLScreenPreviewHelper*		CreateOpenGLScreenPreviewHelper_v10_11 (void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+	
+	if (gCreateOpenGLPreviewFunc == NULL)
+		return NULL;
+	
+	return gCreateOpenGLPreviewFunc();
+}
+
+IDeckLinkCocoaScreenPreviewCallback*	CreateCocoaScreenPreview_v10_11 (void* parentView)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+	
+	if (gCreateCocoaPreviewFunc == NULL)
+		return NULL;
+	
+	return gCreateCocoaPreviewFunc(parentView);
+}
+
+IDeckLinkVideoConversion* CreateVideoConversionInstance_v10_11 (void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+	
+	if (gCreateVideoConversionFunc == NULL)
+		return NULL;
+	
+	return gCreateVideoConversionFunc();
+}
+
+IDeckLinkDiscovery* CreateDeckLinkDiscoveryInstance_v10_11 (void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+	
+	if (gCreateDeckLinkDiscoveryFunc == NULL)
+		return NULL;
+	
+	return gCreateDeckLinkDiscoveryFunc();
+}
+
+IDeckLinkVideoFrameAncillaryPackets* CreateVideoFrameAncillaryPacketsInstance_v10_11 (void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+	
+	if (gCreateVideoFrameAncillaryPacketsFunc == NULL)
+		return NULL;
+	
+	return gCreateVideoFrameAncillaryPacketsFunc();
+}
+
+
+#define kBMDStreamingAPI_BundlePath "/Library/Application Support/Blackmagic Design/Streaming/BMDStreamingAPI.bundle"
+
+typedef IBMDStreamingDiscovery* (*CreateDiscoveryFunc)(void);
+typedef IBMDStreamingH264NALParser* (*CreateNALParserFunc)(void);
+
+static pthread_once_t      gBMDStreamingOnceControl  = PTHREAD_ONCE_INIT;
+static CFBundleRef         gBMDStreamingAPIBundleRef = NULL;
+static CreateDiscoveryFunc gCreateDiscoveryFunc      = NULL;
+static CreateNALParserFunc gCreateNALParserFunc      = NULL;
+
+static void InitBMDStreamingAPI(void)
+{
+	CFURLRef bundleURL;
+
+	bundleURL = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, CFSTR(kBMDStreamingAPI_BundlePath), kCFURLPOSIXPathStyle, true);
+	if (bundleURL != NULL)
+	{
+		gBMDStreamingAPIBundleRef = CFBundleCreate(kCFAllocatorDefault, bundleURL);
+		if (gBMDStreamingAPIBundleRef != NULL)
+		{
+			gCreateDiscoveryFunc = (CreateDiscoveryFunc)CFBundleGetFunctionPointerForName(gBMDStreamingAPIBundleRef, CFSTR("CreateBMDStreamingDiscoveryInstance_0002"));
+			gCreateNALParserFunc = (CreateNALParserFunc)CFBundleGetFunctionPointerForName(gBMDStreamingAPIBundleRef, CFSTR("CreateBMDStreamingH264NALParser_0001"));
+		}
+
+		CFRelease(bundleURL);
+	}
+}
+
+IBMDStreamingDiscovery* CreateBMDStreamingDiscoveryInstance_v10_11()
+{
+	pthread_once(&gBMDStreamingOnceControl, InitBMDStreamingAPI);
+
+	if (gCreateDiscoveryFunc == NULL)
+		return NULL;
+
+	return gCreateDiscoveryFunc();
+}
+
+IBMDStreamingH264NALParser* CreateBMDStreamingH264NALParser_v10_11()
+{
+	pthread_once(&gBMDStreamingOnceControl, InitBMDStreamingAPI);
+
+	if (gCreateNALParserFunc == NULL)
+		return NULL;
+
+	return gCreateNALParserFunc();
+}
diff --git a/DeckLinkSDK/Mac/include/DeckLinkAPIDispatch_v10_8.cpp b/DeckLinkSDK/Mac/include/DeckLinkAPIDispatch_v10_8.cpp
new file mode 100644
index 0000000000..2da795ad41
--- /dev/null
+++ b/DeckLinkSDK/Mac/include/DeckLinkAPIDispatch_v10_8.cpp
@@ -0,0 +1,206 @@
+/* -LICENSE-START-
+** Copyright (c) 2009 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+/* DeckLinkAPIDispatch.cpp */
+
+#include "DeckLinkAPI.h"
+#include <pthread.h>
+
+#if BLACKMAGIC_DECKLINK_API_MAGIC != 1
+#error The DeckLink API version of DeckLinkAPIDispatch.cpp is not the same version as DeckLinkAPI.h
+#endif
+
+#define kDeckLinkAPI_BundlePath "/Library/Frameworks/DeckLinkAPI.framework"
+
+
+typedef IDeckLinkIterator* (*CreateIteratorFunc)(void);
+typedef IDeckLinkAPIInformation* (*CreateAPIInformationFunc)(void);
+typedef IDeckLinkGLScreenPreviewHelper* (*CreateOpenGLScreenPreviewHelperFunc)(void);
+typedef IDeckLinkCocoaScreenPreviewCallback* (*CreateCocoaScreenPreviewFunc)(void*);
+typedef IDeckLinkVideoConversion* (*CreateVideoConversionInstanceFunc)(void);
+typedef IDeckLinkDiscovery* (*CreateDeckLinkDiscoveryInstanceFunc)(void);
+
+static pthread_once_t						gDeckLinkOnceControl = PTHREAD_ONCE_INIT;
+static CFBundleRef							gDeckLinkAPIBundleRef = NULL;
+static CreateIteratorFunc					gCreateIteratorFunc = NULL;
+static CreateAPIInformationFunc				gCreateAPIInformationFunc = NULL;
+static CreateOpenGLScreenPreviewHelperFunc	gCreateOpenGLPreviewFunc = NULL;
+static CreateCocoaScreenPreviewFunc			gCreateCocoaPreviewFunc = NULL;
+static CreateVideoConversionInstanceFunc	gCreateVideoConversionFunc = NULL;
+static CreateDeckLinkDiscoveryInstanceFunc  gCreateDeckLinkDiscoveryFunc = NULL;
+
+
+static void	InitDeckLinkAPI(void)
+{
+	CFURLRef		bundleURL;
+
+	bundleURL = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, CFSTR(kDeckLinkAPI_BundlePath), kCFURLPOSIXPathStyle, true);
+	if (bundleURL != NULL)
+	{
+		gDeckLinkAPIBundleRef = CFBundleCreate(kCFAllocatorDefault, bundleURL);
+		if (gDeckLinkAPIBundleRef != NULL)
+		{
+			gCreateIteratorFunc = (CreateIteratorFunc)CFBundleGetFunctionPointerForName(gDeckLinkAPIBundleRef, CFSTR("CreateDeckLinkIteratorInstance_0002"));
+			gCreateAPIInformationFunc = (CreateAPIInformationFunc)CFBundleGetFunctionPointerForName(gDeckLinkAPIBundleRef, CFSTR("CreateDeckLinkAPIInformationInstance_0001"));
+			gCreateOpenGLPreviewFunc = (CreateOpenGLScreenPreviewHelperFunc)CFBundleGetFunctionPointerForName(gDeckLinkAPIBundleRef, CFSTR("CreateOpenGLScreenPreviewHelper_0001"));
+			gCreateCocoaPreviewFunc = (CreateCocoaScreenPreviewFunc)CFBundleGetFunctionPointerForName(gDeckLinkAPIBundleRef, CFSTR("CreateCocoaScreenPreview_0001"));
+			gCreateVideoConversionFunc = (CreateVideoConversionInstanceFunc)CFBundleGetFunctionPointerForName(gDeckLinkAPIBundleRef, CFSTR("CreateVideoConversionInstance_0001"));
+			gCreateDeckLinkDiscoveryFunc = (CreateDeckLinkDiscoveryInstanceFunc)CFBundleGetFunctionPointerForName(gDeckLinkAPIBundleRef, CFSTR("CreateDeckLinkDiscoveryInstance_0001"));
+		}
+		CFRelease(bundleURL);
+	}
+}
+
+bool		IsDeckLinkAPIPresent(void)
+{
+	// If the DeckLink API bundle was successfully loaded, return this knowledge to the caller
+	if (gDeckLinkAPIBundleRef != NULL)
+		return true;
+
+	return false;
+}
+
+IDeckLinkIterator*		CreateDeckLinkIteratorInstance(void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+
+	if (gCreateIteratorFunc == NULL)
+		return NULL;
+
+	return gCreateIteratorFunc();
+}
+
+IDeckLinkAPIInformation*	CreateDeckLinkAPIInformationInstance(void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+
+	if (gCreateAPIInformationFunc == NULL)
+		return NULL;
+
+	return gCreateAPIInformationFunc();
+}
+
+IDeckLinkGLScreenPreviewHelper*		CreateOpenGLScreenPreviewHelper(void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+
+	if (gCreateOpenGLPreviewFunc == NULL)
+		return NULL;
+
+	return gCreateOpenGLPreviewFunc();
+}
+
+IDeckLinkCocoaScreenPreviewCallback*	CreateCocoaScreenPreview(void* parentView)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+
+	if (gCreateCocoaPreviewFunc == NULL)
+		return NULL;
+
+	return gCreateCocoaPreviewFunc(parentView);
+}
+
+IDeckLinkVideoConversion* CreateVideoConversionInstance(void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+
+	if (gCreateVideoConversionFunc == NULL)
+		return NULL;
+
+	return gCreateVideoConversionFunc();
+}
+
+IDeckLinkDiscovery* CreateDeckLinkDiscoveryInstance(void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+
+	if (gCreateDeckLinkDiscoveryFunc == NULL)
+		return NULL;
+
+	return gCreateDeckLinkDiscoveryFunc();
+}
+
+
+#define kBMDStreamingAPI_BundlePath "/Library/Application Support/Blackmagic Design/Streaming/BMDStreamingAPI.bundle"
+
+typedef IBMDStreamingDiscovery* (*CreateDiscoveryFunc)(void);
+typedef IBMDStreamingH264NALParser* (*CreateNALParserFunc)(void);
+
+static pthread_once_t      gBMDStreamingOnceControl = PTHREAD_ONCE_INIT;
+static CFBundleRef         gBMDStreamingAPIBundleRef = NULL;
+static CreateDiscoveryFunc gCreateDiscoveryFunc = NULL;
+static CreateNALParserFunc gCreateNALParserFunc = NULL;
+
+static void InitBMDStreamingAPI(void)
+{
+	CFURLRef bundleURL;
+
+	bundleURL = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, CFSTR(kBMDStreamingAPI_BundlePath), kCFURLPOSIXPathStyle, true);
+	if (bundleURL != NULL)
+	{
+		gBMDStreamingAPIBundleRef = CFBundleCreate(kCFAllocatorDefault, bundleURL);
+		if (gBMDStreamingAPIBundleRef != NULL)
+		{
+			gCreateDiscoveryFunc = (CreateDiscoveryFunc)CFBundleGetFunctionPointerForName(gBMDStreamingAPIBundleRef, CFSTR("CreateBMDStreamingDiscoveryInstance_0001"));
+			gCreateNALParserFunc = (CreateNALParserFunc)CFBundleGetFunctionPointerForName(gBMDStreamingAPIBundleRef, CFSTR("CreateBMDStreamingH264NALParser_0001"));
+		}
+
+		CFRelease(bundleURL);
+	}
+}
+
+IBMDStreamingDiscovery* CreateBMDStreamingDiscoveryInstance()
+{
+	pthread_once(&gBMDStreamingOnceControl, InitBMDStreamingAPI);
+
+	if (gCreateDiscoveryFunc == NULL)
+		return NULL;
+
+	return gCreateDiscoveryFunc();
+}
+
+IBMDStreamingH264NALParser* CreateBMDStreamingH264NALParser()
+{
+	pthread_once(&gBMDStreamingOnceControl, InitBMDStreamingAPI);
+
+	if (gCreateNALParserFunc == NULL)
+		return NULL;
+
+	return gCreateNALParserFunc();
+}
diff --git a/DeckLinkSDK/Mac/include/DeckLinkAPIDispatch_v7_6.cpp b/DeckLinkSDK/Mac/include/DeckLinkAPIDispatch_v7_6.cpp
new file mode 100644
index 0000000000..0ee2d73ceb
--- /dev/null
+++ b/DeckLinkSDK/Mac/include/DeckLinkAPIDispatch_v7_6.cpp
@@ -0,0 +1,118 @@
+/* -LICENSE-START-
+** Copyright (c) 2009 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+/* DeckLinkAPIDispatch_v7_6.cpp */
+
+#include "DeckLinkAPI_v7_6.h"
+#include <pthread.h>
+
+#define kDeckLinkAPI_BundlePath "/Library/Frameworks/DeckLinkAPI.framework"
+
+typedef IDeckLinkIterator* (*CreateIteratorFunc_v7_6)(void);
+typedef IDeckLinkGLScreenPreviewHelper_v7_6* (*CreateOpenGLScreenPreviewHelperFunc_v7_6)(void);
+typedef IDeckLinkCocoaScreenPreviewCallback_v7_6* (*CreateCocoaScreenPreviewFunc_v7_6)(void*);
+typedef IDeckLinkVideoConversion_v7_6* (*CreateVideoConversionInstanceFunc_v7_6)(void);
+
+static pthread_once_t								gDeckLinkOnceControl		= PTHREAD_ONCE_INIT;
+static CFBundleRef									gBundleRef					= NULL;
+static CreateIteratorFunc_v7_6						gCreateIteratorFunc			= NULL;
+static CreateOpenGLScreenPreviewHelperFunc_v7_6		gCreateOpenGLPreviewFunc	= NULL;
+static CreateCocoaScreenPreviewFunc_v7_6			gCreateCocoaPreviewFunc		= NULL;
+static CreateVideoConversionInstanceFunc_v7_6		gCreateVideoConversionFunc	= NULL;
+
+
+static void	InitDeckLinkAPI_v7_6 (void)
+{
+	CFURLRef		bundleURL;
+
+	bundleURL = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, CFSTR(kDeckLinkAPI_BundlePath), kCFURLPOSIXPathStyle, true);
+	if (bundleURL != NULL)
+	{
+		gBundleRef = CFBundleCreate(kCFAllocatorDefault, bundleURL);
+		if (gBundleRef != NULL)
+		{
+			gCreateIteratorFunc = (CreateIteratorFunc_v7_6)CFBundleGetFunctionPointerForName(gBundleRef, CFSTR("CreateDeckLinkIteratorInstance"));
+			gCreateOpenGLPreviewFunc = (CreateOpenGLScreenPreviewHelperFunc_v7_6)CFBundleGetFunctionPointerForName(gBundleRef, CFSTR("CreateOpenGLScreenPreviewHelper"));
+			gCreateCocoaPreviewFunc = (CreateCocoaScreenPreviewFunc_v7_6)CFBundleGetFunctionPointerForName(gBundleRef, CFSTR("CreateCocoaScreenPreview"));
+			gCreateVideoConversionFunc = (CreateVideoConversionInstanceFunc_v7_6)CFBundleGetFunctionPointerForName(gBundleRef, CFSTR("CreateVideoConversionInstance"));
+		}
+		CFRelease(bundleURL);
+	}
+}
+
+IDeckLinkIterator*		CreateDeckLinkIteratorInstance_v7_6 (void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI_v7_6);
+	
+	if (gCreateIteratorFunc == NULL)
+		return NULL;
+	
+	return gCreateIteratorFunc();
+}
+
+IDeckLinkGLScreenPreviewHelper_v7_6*		CreateOpenGLScreenPreviewHelper_v7_6 (void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI_v7_6);
+	
+	if (gCreateOpenGLPreviewFunc == NULL)
+		return NULL;
+	
+	return gCreateOpenGLPreviewFunc();
+}
+
+IDeckLinkCocoaScreenPreviewCallback_v7_6*	CreateCocoaScreenPreview_v7_6 (void* parentView)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI_v7_6);
+	
+	if (gCreateCocoaPreviewFunc == NULL)
+		return NULL;
+	
+	return gCreateCocoaPreviewFunc(parentView);
+}
+
+IDeckLinkVideoConversion_v7_6* CreateVideoConversionInstance_v7_6 (void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI_v7_6);
+	
+	if (gCreateVideoConversionFunc == NULL)
+		return NULL;
+	
+	return gCreateVideoConversionFunc();
+}
+
diff --git a/DeckLinkSDK/Mac/include/DeckLinkAPIDispatch_v8_0.cpp b/DeckLinkSDK/Mac/include/DeckLinkAPIDispatch_v8_0.cpp
new file mode 100644
index 0000000000..af16c219ae
--- /dev/null
+++ b/DeckLinkSDK/Mac/include/DeckLinkAPIDispatch_v8_0.cpp
@@ -0,0 +1,144 @@
+/* -LICENSE-START-
+** Copyright (c) 2011 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+/* DeckLinkAPIDispatch.cpp */
+
+#include "DeckLinkAPI_v8_0.h"
+#include <pthread.h>
+
+#if BLACKMAGIC_DECKLINK_API_MAGIC != 1
+	#error The DeckLink API version of DeckLinkAPIDispatch.cpp is not the same version as DeckLinkAPI.h
+#endif
+
+#define kDeckLinkAPI_BundlePath "/Library/Frameworks/DeckLinkAPI.framework"
+
+typedef IDeckLinkIterator_v8_0* (*CreateIteratorFunc)(void);
+typedef IDeckLinkAPIInformation* (*CreateAPIInformationFunc)(void);
+typedef IDeckLinkGLScreenPreviewHelper* (*CreateOpenGLScreenPreviewHelperFunc)(void);
+typedef IDeckLinkCocoaScreenPreviewCallback* (*CreateCocoaScreenPreviewFunc)(void*);
+typedef IDeckLinkVideoConversion* (*CreateVideoConversionInstanceFunc)(void);
+
+static pthread_once_t						gDeckLinkOnceControl		= PTHREAD_ONCE_INIT;
+static CFBundleRef							gDeckLinkAPIBundleRef		= NULL;
+static CreateIteratorFunc					gCreateIteratorFunc			= NULL;
+static CreateAPIInformationFunc				gCreateAPIInformationFunc	= NULL;
+static CreateOpenGLScreenPreviewHelperFunc	gCreateOpenGLPreviewFunc	= NULL;
+static CreateCocoaScreenPreviewFunc			gCreateCocoaPreviewFunc		= NULL;
+static CreateVideoConversionInstanceFunc	gCreateVideoConversionFunc	= NULL;
+
+
+static void	InitDeckLinkAPI (void)
+{
+	CFURLRef		bundleURL;
+
+	bundleURL = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, CFSTR(kDeckLinkAPI_BundlePath), kCFURLPOSIXPathStyle, true);
+	if (bundleURL != NULL)
+	{
+		gDeckLinkAPIBundleRef = CFBundleCreate(kCFAllocatorDefault, bundleURL);
+		if (gDeckLinkAPIBundleRef != NULL)
+		{
+			gCreateIteratorFunc = (CreateIteratorFunc)CFBundleGetFunctionPointerForName(gDeckLinkAPIBundleRef, CFSTR("CreateDeckLinkIteratorInstance_0001"));
+			gCreateAPIInformationFunc = (CreateAPIInformationFunc)CFBundleGetFunctionPointerForName(gDeckLinkAPIBundleRef, CFSTR("CreateDeckLinkAPIInformationInstance_0001"));
+			gCreateOpenGLPreviewFunc = (CreateOpenGLScreenPreviewHelperFunc)CFBundleGetFunctionPointerForName(gDeckLinkAPIBundleRef, CFSTR("CreateOpenGLScreenPreviewHelper_0001"));
+			gCreateCocoaPreviewFunc = (CreateCocoaScreenPreviewFunc)CFBundleGetFunctionPointerForName(gDeckLinkAPIBundleRef, CFSTR("CreateCocoaScreenPreview_0001"));
+			gCreateVideoConversionFunc = (CreateVideoConversionInstanceFunc)CFBundleGetFunctionPointerForName(gDeckLinkAPIBundleRef, CFSTR("CreateVideoConversionInstance_0001"));
+		}
+		CFRelease(bundleURL);
+	}
+}
+
+bool		IsDeckLinkAPIPresent (void)
+{
+	// If the DeckLink API bundle was successfully loaded, return this knowledge to the caller
+	if (gDeckLinkAPIBundleRef != NULL)
+		return true;
+	
+	return false;
+}
+
+IDeckLinkIterator_v8_0*		CreateDeckLinkIteratorInstance (void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+	
+	if (gCreateIteratorFunc == NULL)
+		return NULL;
+	
+	return gCreateIteratorFunc();
+}
+
+IDeckLinkAPIInformation*	CreateDeckLinkAPIInformationInstance (void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+	
+	if (gCreateAPIInformationFunc == NULL)
+		return NULL;
+	
+	return gCreateAPIInformationFunc();
+}
+
+IDeckLinkGLScreenPreviewHelper*		CreateOpenGLScreenPreviewHelper (void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+	
+	if (gCreateOpenGLPreviewFunc == NULL)
+		return NULL;
+	
+	return gCreateOpenGLPreviewFunc();
+}
+
+IDeckLinkCocoaScreenPreviewCallback*	CreateCocoaScreenPreview (void* parentView)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+	
+	if (gCreateCocoaPreviewFunc == NULL)
+		return NULL;
+	
+	return gCreateCocoaPreviewFunc(parentView);
+}
+
+IDeckLinkVideoConversion* CreateVideoConversionInstance (void)
+{
+	pthread_once(&gDeckLinkOnceControl, InitDeckLinkAPI);
+	
+	if (gCreateVideoConversionFunc == NULL)
+		return NULL;
+	
+	return gCreateVideoConversionFunc();
+}
+
diff --git a/DeckLinkSDK/Mac/include/DeckLinkAPIModes.h b/DeckLinkSDK/Mac/include/DeckLinkAPIModes.h
new file mode 100644
index 0000000000..4b0fb1ae1a
--- /dev/null
+++ b/DeckLinkSDK/Mac/include/DeckLinkAPIModes.h
@@ -0,0 +1,289 @@
+/* -LICENSE-START-
+** Copyright (c) 2022 Blackmagic Design
+**
+** Permission is hereby granted, free of charge, to any person or organization
+** obtaining a copy of the software and accompanying documentation covered by
+** this license (the "Software") to use, reproduce, display, distribute,
+** execute, and transmit the Software, and to prepare derivative works of the
+** Software, and to permit third-parties to whom the Software is furnished to
+** do so, all subject to the following:
+**
+** The copyright notices in the Software and this entire statement, including
+** the above license grant, this restriction and the following disclaimer,
+** must be included in all copies of the Software, in whole or in part, and
+** all derivative works of the Software, unless such copies or derivative
+** works are solely in the form of machine-executable object code generated by
+** a source language processor.
+**
+** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+** DEALINGS IN THE SOFTWARE.
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPIMODES_H
+#define BMD_DECKLINKAPIMODES_H
+
+
+#ifndef BMD_CONST
+    #if defined(_MSC_VER)
+        #define BMD_CONST __declspec(selectany) static const
+    #else
+        #define BMD_CONST static const
+    #endif
+#endif
+
+#ifndef BMD_PUBLIC
+	#define BMD_PUBLIC
+#endif
+
+// Type Declarations
+
+
+// Interface ID Declarations
+
+BMD_CONST REFIID IID_IDeckLinkDisplayModeIterator                 = /* 9C88499F-F601-4021-B80B-032E4EB41C35 */ { 0x9C,0x88,0x49,0x9F,0xF6,0x01,0x40,0x21,0xB8,0x0B,0x03,0x2E,0x4E,0xB4,0x1C,0x35 };
+BMD_CONST REFIID IID_IDeckLinkDisplayMode                         = /* 3EB2C1AB-0A3D-4523-A3AD-F40D7FB14E78 */ { 0x3E,0xB2,0xC1,0xAB,0x0A,0x3D,0x45,0x23,0xA3,0xAD,0xF4,0x0D,0x7F,0xB1,0x4E,0x78 };
+
+/* Enum BMDDisplayMode - BMDDisplayMode enumerates the video modes supported. */
+
+typedef uint32_t BMDDisplayMode;
+enum _BMDDisplayMode {
+
+    /* SD Modes */
+
+    bmdModeNTSC                                                  = /* 'ntsc' */ 0x6E747363,
+    bmdModeNTSC2398                                              = /* 'nt23' */ 0x6E743233,	// 3:2 pulldown
+    bmdModePAL                                                   = /* 'pal ' */ 0x70616C20,
+    bmdModeNTSCp                                                 = /* 'ntsp' */ 0x6E747370,
+    bmdModePALp                                                  = /* 'palp' */ 0x70616C70,
+
+    /* HD 1080 Modes */
+
+    bmdModeHD1080p2398                                           = /* '23ps' */ 0x32337073,
+    bmdModeHD1080p24                                             = /* '24ps' */ 0x32347073,
+    bmdModeHD1080p25                                             = /* 'Hp25' */ 0x48703235,
+    bmdModeHD1080p2997                                           = /* 'Hp29' */ 0x48703239,
+    bmdModeHD1080p30                                             = /* 'Hp30' */ 0x48703330,
+    bmdModeHD1080p4795                                           = /* 'Hp47' */ 0x48703437,
+    bmdModeHD1080p48                                             = /* 'Hp48' */ 0x48703438,
+    bmdModeHD1080p50                                             = /* 'Hp50' */ 0x48703530,
+    bmdModeHD1080p5994                                           = /* 'Hp59' */ 0x48703539,
+    bmdModeHD1080p6000                                           = /* 'Hp60' */ 0x48703630,	// N.B. This _really_ is 60.00 Hz.
+    bmdModeHD1080p9590                                           = /* 'Hp95' */ 0x48703935,
+    bmdModeHD1080p96                                             = /* 'Hp96' */ 0x48703936,
+    bmdModeHD1080p100                                            = /* 'Hp10' */ 0x48703130,
+    bmdModeHD1080p11988                                          = /* 'Hp11' */ 0x48703131,
+    bmdModeHD1080p120                                            = /* 'Hp12' */ 0x48703132,
+    bmdModeHD1080i50                                             = /* 'Hi50' */ 0x48693530,
+    bmdModeHD1080i5994                                           = /* 'Hi59' */ 0x48693539,
+    bmdModeHD1080i6000                                           = /* 'Hi60' */ 0x48693630,	// N.B. This _really_ is 60.00 Hz.
+
+    /* HD 720 Modes */
+
+    bmdModeHD720p50                                              = /* 'hp50' */ 0x68703530,
+    bmdModeHD720p5994                                            = /* 'hp59' */ 0x68703539,
+    bmdModeHD720p60                                              = /* 'hp60' */ 0x68703630,
+
+    /* 2K Modes */
+
+    bmdMode2k2398                                                = /* '2k23' */ 0x326B3233,
+    bmdMode2k24                                                  = /* '2k24' */ 0x326B3234,
+    bmdMode2k25                                                  = /* '2k25' */ 0x326B3235,
+
+    /* 2K DCI Modes */
+
+    bmdMode2kDCI2398                                             = /* '2d23' */ 0x32643233,
+    bmdMode2kDCI24                                               = /* '2d24' */ 0x32643234,
+    bmdMode2kDCI25                                               = /* '2d25' */ 0x32643235,
+    bmdMode2kDCI2997                                             = /* '2d29' */ 0x32643239,
+    bmdMode2kDCI30                                               = /* '2d30' */ 0x32643330,
+    bmdMode2kDCI4795                                             = /* '2d47' */ 0x32643437,
+    bmdMode2kDCI48                                               = /* '2d48' */ 0x32643438,
+    bmdMode2kDCI50                                               = /* '2d50' */ 0x32643530,
+    bmdMode2kDCI5994                                             = /* '2d59' */ 0x32643539,
+    bmdMode2kDCI60                                               = /* '2d60' */ 0x32643630,
+    bmdMode2kDCI9590                                             = /* '2d95' */ 0x32643935,
+    bmdMode2kDCI96                                               = /* '2d96' */ 0x32643936,
+    bmdMode2kDCI100                                              = /* '2d10' */ 0x32643130,
+    bmdMode2kDCI11988                                            = /* '2d11' */ 0x32643131,
+    bmdMode2kDCI120                                              = /* '2d12' */ 0x32643132,
+
+    /* 4K UHD Modes */
+
+    bmdMode4K2160p2398                                           = /* '4k23' */ 0x346B3233,
+    bmdMode4K2160p24                                             = /* '4k24' */ 0x346B3234,
+    bmdMode4K2160p25                                             = /* '4k25' */ 0x346B3235,
+    bmdMode4K2160p2997                                           = /* '4k29' */ 0x346B3239,
+    bmdMode4K2160p30                                             = /* '4k30' */ 0x346B3330,
+    bmdMode4K2160p4795                                           = /* '4k47' */ 0x346B3437,
+    bmdMode4K2160p48                                             = /* '4k48' */ 0x346B3438,
+    bmdMode4K2160p50                                             = /* '4k50' */ 0x346B3530,
+    bmdMode4K2160p5994                                           = /* '4k59' */ 0x346B3539,
+    bmdMode4K2160p60                                             = /* '4k60' */ 0x346B3630,
+    bmdMode4K2160p9590                                           = /* '4k95' */ 0x346B3935,
+    bmdMode4K2160p96                                             = /* '4k96' */ 0x346B3936,
+    bmdMode4K2160p100                                            = /* '4k10' */ 0x346B3130,
+    bmdMode4K2160p11988                                          = /* '4k11' */ 0x346B3131,
+    bmdMode4K2160p120                                            = /* '4k12' */ 0x346B3132,
+
+    /* 4K DCI Modes */
+
+    bmdMode4kDCI2398                                             = /* '4d23' */ 0x34643233,
+    bmdMode4kDCI24                                               = /* '4d24' */ 0x34643234,
+    bmdMode4kDCI25                                               = /* '4d25' */ 0x34643235,
+    bmdMode4kDCI2997                                             = /* '4d29' */ 0x34643239,
+    bmdMode4kDCI30                                               = /* '4d30' */ 0x34643330,
+    bmdMode4kDCI4795                                             = /* '4d47' */ 0x34643437,
+    bmdMode4kDCI48                                               = /* '4d48' */ 0x34643438,
+    bmdMode4kDCI50                                               = /* '4d50' */ 0x34643530,
+    bmdMode4kDCI5994                                             = /* '4d59' */ 0x34643539,
+    bmdMode4kDCI60                                               = /* '4d60' */ 0x34643630,
+    bmdMode4kDCI9590                                             = /* '4d95' */ 0x34643935,
+    bmdMode4kDCI96                                               = /* '4d96' */ 0x34643936,
+    bmdMode4kDCI100                                              = /* '4d10' */ 0x34643130,
+    bmdMode4kDCI11988                                            = /* '4d11' */ 0x34643131,
+    bmdMode4kDCI120                                              = /* '4d12' */ 0x34643132,
+
+    /* 8K UHD Modes */
+
+    bmdMode8K4320p2398                                           = /* '8k23' */ 0x386B3233,
+    bmdMode8K4320p24                                             = /* '8k24' */ 0x386B3234,
+    bmdMode8K4320p25                                             = /* '8k25' */ 0x386B3235,
+    bmdMode8K4320p2997                                           = /* '8k29' */ 0x386B3239,
+    bmdMode8K4320p30                                             = /* '8k30' */ 0x386B3330,
+    bmdMode8K4320p4795                                           = /* '8k47' */ 0x386B3437,
+    bmdMode8K4320p48                                             = /* '8k48' */ 0x386B3438,
+    bmdMode8K4320p50                                             = /* '8k50' */ 0x386B3530,
+    bmdMode8K4320p5994                                           = /* '8k59' */ 0x386B3539,
+    bmdMode8K4320p60                                             = /* '8k60' */ 0x386B3630,
+
+    /* 8K DCI Modes */
+
+    bmdMode8kDCI2398                                             = /* '8d23' */ 0x38643233,
+    bmdMode8kDCI24                                               = /* '8d24' */ 0x38643234,
+    bmdMode8kDCI25                                               = /* '8d25' */ 0x38643235,
+    bmdMode8kDCI2997                                             = /* '8d29' */ 0x38643239,
+    bmdMode8kDCI30                                               = /* '8d30' */ 0x38643330,
+    bmdMode8kDCI4795                                             = /* '8d47' */ 0x38643437,
+    bmdMode8kDCI48                                               = /* '8d48' */ 0x38643438,
+    bmdMode8kDCI50                                               = /* '8d50' */ 0x38643530,
+    bmdMode8kDCI5994                                             = /* '8d59' */ 0x38643539,
+    bmdMode8kDCI60                                               = /* '8d60' */ 0x38643630,
+
+    /* PC Modes */
+
+    bmdMode640x480p60                                            = /* 'vga6' */ 0x76676136,
+    bmdMode800x600p60                                            = /* 'svg6' */ 0x73766736,
+    bmdMode1440x900p50                                           = /* 'wxg5' */ 0x77786735,
+    bmdMode1440x900p60                                           = /* 'wxg6' */ 0x77786736,
+    bmdMode1440x1080p50                                          = /* 'sxg5' */ 0x73786735,
+    bmdMode1440x1080p60                                          = /* 'sxg6' */ 0x73786736,
+    bmdMode1600x1200p50                                          = /* 'uxg5' */ 0x75786735,
+    bmdMode1600x1200p60                                          = /* 'uxg6' */ 0x75786736,
+    bmdMode1920x1200p50                                          = /* 'wux5' */ 0x77757835,
+    bmdMode1920x1200p60                                          = /* 'wux6' */ 0x77757836,
+    bmdMode1920x1440p50                                          = /* '1945' */ 0x31393435,
+    bmdMode1920x1440p60                                          = /* '1946' */ 0x31393436,
+    bmdMode2560x1440p50                                          = /* 'wqh5' */ 0x77716835,
+    bmdMode2560x1440p60                                          = /* 'wqh6' */ 0x77716836,
+    bmdMode2560x1600p50                                          = /* 'wqx5' */ 0x77717835,
+    bmdMode2560x1600p60                                          = /* 'wqx6' */ 0x77717836,
+
+    /* Special Modes */
+
+    bmdModeUnknown                                               = /* 'iunk' */ 0x69756E6B
+};
+
+/* Enum BMDFieldDominance - BMDFieldDominance enumerates settings applicable to video fields. */
+
+typedef uint32_t BMDFieldDominance;
+enum _BMDFieldDominance {
+    bmdUnknownFieldDominance                                     = 0,
+    bmdLowerFieldFirst                                           = /* 'lowr' */ 0x6C6F7772,
+    bmdUpperFieldFirst                                           = /* 'uppr' */ 0x75707072,
+    bmdProgressiveFrame                                          = /* 'prog' */ 0x70726F67,
+    bmdProgressiveSegmentedFrame                                 = /* 'psf ' */ 0x70736620
+};
+
+/* Enum BMDPixelFormat - Video pixel formats supported for output/input */
+
+typedef uint32_t BMDPixelFormat;
+enum _BMDPixelFormat {
+    bmdFormatUnspecified                                         = 0,
+    bmdFormat8BitYUV                                             = /* '2vuy' */ 0x32767579,
+    bmdFormat10BitYUV                                            = /* 'v210' */ 0x76323130,
+    bmdFormat8BitARGB                                            = 32,
+    bmdFormat8BitBGRA                                            = /* 'BGRA' */ 0x42475241,
+    bmdFormat10BitRGB                                            = /* 'r210' */ 0x72323130,	// Big-endian RGB 10-bit per component with SMPTE video levels (64-960). Packed as 2:10:10:10
+    bmdFormat12BitRGB                                            = /* 'R12B' */ 0x52313242,	// Big-endian RGB 12-bit per component with full range (0-4095). Packed as 12-bit per component
+    bmdFormat12BitRGBLE                                          = /* 'R12L' */ 0x5231324C,	// Little-endian RGB 12-bit per component with full range (0-4095). Packed as 12-bit per component
+    bmdFormat10BitRGBXLE                                         = /* 'R10l' */ 0x5231306C,	// Little-endian 10-bit RGB with SMPTE video levels (64-940)
+    bmdFormat10BitRGBX                                           = /* 'R10b' */ 0x52313062,	// Big-endian 10-bit RGB with SMPTE video levels (64-940)
+    bmdFormatH265                                                = /* 'hev1' */ 0x68657631,	// High Efficiency Video Coding (HEVC/h.265)
+
+    /* AVID DNxHR */
+
+    bmdFormatDNxHR                                               = /* 'AVdh' */ 0x41566468
+};
+
+/* Enum BMDDisplayModeFlags - Flags to describe the characteristics of an IDeckLinkDisplayMode. */
+
+typedef uint32_t BMDDisplayModeFlags;
+enum _BMDDisplayModeFlags {
+    bmdDisplayModeSupports3D                                     = 1 << 0,
+    bmdDisplayModeColorspaceRec601                               = 1 << 1,
+    bmdDisplayModeColorspaceRec709                               = 1 << 2,
+    bmdDisplayModeColorspaceRec2020                              = 1 << 3
+};
+
+#if defined(__cplusplus)
+
+// Forward Declarations
+
+class IDeckLinkDisplayModeIterator;
+class IDeckLinkDisplayMode;
+
+/* Interface IDeckLinkDisplayModeIterator - Enumerates over supported input/output display modes. */
+
+class BMD_PUBLIC IDeckLinkDisplayModeIterator : public IUnknown
+{
+public:
+    virtual HRESULT Next (/* out */ IDeckLinkDisplayMode** deckLinkDisplayMode) = 0;
+
+protected:
+    virtual ~IDeckLinkDisplayModeIterator () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkDisplayMode - Represents a display mode */
+
+class BMD_PUBLIC IDeckLinkDisplayMode : public IUnknown
+{
+public:
+    virtual HRESULT GetName (/* out */ CFStringRef* name) = 0;
+    virtual BMDDisplayMode GetDisplayMode (void) = 0;
+    virtual long GetWidth (void) = 0;
+    virtual long GetHeight (void) = 0;
+    virtual HRESULT GetFrameRate (/* out */ BMDTimeValue* frameDuration, /* out */ BMDTimeScale* timeScale) = 0;
+    virtual BMDFieldDominance GetFieldDominance (void) = 0;
+    virtual BMDDisplayModeFlags GetFlags (void) = 0;
+
+protected:
+    virtual ~IDeckLinkDisplayMode () {} // call Release method to drop reference count
+};
+
+/* Functions */
+
+extern "C" {
+
+
+}
+
+
+
+#endif /* defined(__cplusplus) */
+#endif /* defined(BMD_DECKLINKAPIMODES_H) */
diff --git a/DeckLinkSDK/Mac/include/DeckLinkAPIStreaming.h b/DeckLinkSDK/Mac/include/DeckLinkAPIStreaming.h
new file mode 100644
index 0000000000..5ef156e7d5
--- /dev/null
+++ b/DeckLinkSDK/Mac/include/DeckLinkAPIStreaming.h
@@ -0,0 +1,383 @@
+/* -LICENSE-START-
+** Copyright (c) 2022 Blackmagic Design
+**
+** Permission is hereby granted, free of charge, to any person or organization
+** obtaining a copy of the software and accompanying documentation covered by
+** this license (the "Software") to use, reproduce, display, distribute,
+** execute, and transmit the Software, and to prepare derivative works of the
+** Software, and to permit third-parties to whom the Software is furnished to
+** do so, all subject to the following:
+**
+** The copyright notices in the Software and this entire statement, including
+** the above license grant, this restriction and the following disclaimer,
+** must be included in all copies of the Software, in whole or in part, and
+** all derivative works of the Software, unless such copies or derivative
+** works are solely in the form of machine-executable object code generated by
+** a source language processor.
+**
+** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+** DEALINGS IN THE SOFTWARE.
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPISTREAMING_H
+#define BMD_DECKLINKAPISTREAMING_H
+
+
+#ifndef BMD_CONST
+    #if defined(_MSC_VER)
+        #define BMD_CONST __declspec(selectany) static const
+    #else
+        #define BMD_CONST static const
+    #endif
+#endif
+
+#ifndef BMD_PUBLIC
+	#define BMD_PUBLIC
+#endif
+
+// Type Declarations
+
+
+// Interface ID Declarations
+
+BMD_CONST REFIID IID_IBMDStreamingDeviceNotificationCallback      = /* F9531D64-3305-4B29-A387-7F74BB0D0E84 */ { 0xF9,0x53,0x1D,0x64,0x33,0x05,0x4B,0x29,0xA3,0x87,0x7F,0x74,0xBB,0x0D,0x0E,0x84 };
+BMD_CONST REFIID IID_IBMDStreamingH264InputCallback               = /* 823C475F-55AE-46F9-890C-537CC5CEDCCA */ { 0x82,0x3C,0x47,0x5F,0x55,0xAE,0x46,0xF9,0x89,0x0C,0x53,0x7C,0xC5,0xCE,0xDC,0xCA };
+BMD_CONST REFIID IID_IBMDStreamingDiscovery                       = /* 2C837444-F989-4D87-901A-47C8A36D096D */ { 0x2C,0x83,0x74,0x44,0xF9,0x89,0x4D,0x87,0x90,0x1A,0x47,0xC8,0xA3,0x6D,0x09,0x6D };
+BMD_CONST REFIID IID_IBMDStreamingVideoEncodingMode               = /* 1AB8035B-CD13-458D-B6DF-5E8F7C2141D9 */ { 0x1A,0xB8,0x03,0x5B,0xCD,0x13,0x45,0x8D,0xB6,0xDF,0x5E,0x8F,0x7C,0x21,0x41,0xD9 };
+BMD_CONST REFIID IID_IBMDStreamingMutableVideoEncodingMode        = /* 19BF7D90-1E0A-400D-B2C6-FFC4E78AD49D */ { 0x19,0xBF,0x7D,0x90,0x1E,0x0A,0x40,0x0D,0xB2,0xC6,0xFF,0xC4,0xE7,0x8A,0xD4,0x9D };
+BMD_CONST REFIID IID_IBMDStreamingVideoEncodingModePresetIterator = /* 7AC731A3-C950-4AD0-804A-8377AA51C6C4 */ { 0x7A,0xC7,0x31,0xA3,0xC9,0x50,0x4A,0xD0,0x80,0x4A,0x83,0x77,0xAA,0x51,0xC6,0xC4 };
+BMD_CONST REFIID IID_IBMDStreamingDeviceInput                     = /* 24B6B6EC-1727-44BB-9818-34FF086ACF98 */ { 0x24,0xB6,0xB6,0xEC,0x17,0x27,0x44,0xBB,0x98,0x18,0x34,0xFF,0x08,0x6A,0xCF,0x98 };
+BMD_CONST REFIID IID_IBMDStreamingH264NALPacket                   = /* E260E955-14BE-4395-9775-9F02CC0A9D89 */ { 0xE2,0x60,0xE9,0x55,0x14,0xBE,0x43,0x95,0x97,0x75,0x9F,0x02,0xCC,0x0A,0x9D,0x89 };
+BMD_CONST REFIID IID_IBMDStreamingAudioPacket                     = /* D9EB5902-1AD2-43F4-9E2C-3CFA50B5EE19 */ { 0xD9,0xEB,0x59,0x02,0x1A,0xD2,0x43,0xF4,0x9E,0x2C,0x3C,0xFA,0x50,0xB5,0xEE,0x19 };
+BMD_CONST REFIID IID_IBMDStreamingMPEG2TSPacket                   = /* 91810D1C-4FB3-4AAA-AE56-FA301D3DFA4C */ { 0x91,0x81,0x0D,0x1C,0x4F,0xB3,0x4A,0xAA,0xAE,0x56,0xFA,0x30,0x1D,0x3D,0xFA,0x4C };
+BMD_CONST REFIID IID_IBMDStreamingH264NALParser                   = /* 5867F18C-5BFA-4CCC-B2A7-9DFD140417D2 */ { 0x58,0x67,0xF1,0x8C,0x5B,0xFA,0x4C,0xCC,0xB2,0xA7,0x9D,0xFD,0x14,0x04,0x17,0xD2 };
+
+/* Enum BMDStreamingDeviceMode - Device modes */
+
+typedef uint32_t BMDStreamingDeviceMode;
+enum _BMDStreamingDeviceMode {
+    bmdStreamingDeviceIdle                                       = /* 'idle' */ 0x69646C65,
+    bmdStreamingDeviceEncoding                                   = /* 'enco' */ 0x656E636F,
+    bmdStreamingDeviceStopping                                   = /* 'stop' */ 0x73746F70,
+    bmdStreamingDeviceUnknown                                    = /* 'munk' */ 0x6D756E6B
+};
+
+/* Enum BMDStreamingEncodingFrameRate - Encoded frame rates */
+
+typedef uint32_t BMDStreamingEncodingFrameRate;
+enum _BMDStreamingEncodingFrameRate {
+
+    /* Interlaced rates */
+
+    bmdStreamingEncodedFrameRate50i                              = /* 'e50i' */ 0x65353069,
+    bmdStreamingEncodedFrameRate5994i                            = /* 'e59i' */ 0x65353969,
+    bmdStreamingEncodedFrameRate60i                              = /* 'e60i' */ 0x65363069,
+
+    /* Progressive rates */
+
+    bmdStreamingEncodedFrameRate2398p                            = /* 'e23p' */ 0x65323370,
+    bmdStreamingEncodedFrameRate24p                              = /* 'e24p' */ 0x65323470,
+    bmdStreamingEncodedFrameRate25p                              = /* 'e25p' */ 0x65323570,
+    bmdStreamingEncodedFrameRate2997p                            = /* 'e29p' */ 0x65323970,
+    bmdStreamingEncodedFrameRate30p                              = /* 'e30p' */ 0x65333070,
+    bmdStreamingEncodedFrameRate50p                              = /* 'e50p' */ 0x65353070,
+    bmdStreamingEncodedFrameRate5994p                            = /* 'e59p' */ 0x65353970,
+    bmdStreamingEncodedFrameRate60p                              = /* 'e60p' */ 0x65363070
+};
+
+/* Enum BMDStreamingEncodingSupport - Output encoding mode supported flag */
+
+typedef uint32_t BMDStreamingEncodingSupport;
+enum _BMDStreamingEncodingSupport {
+    bmdStreamingEncodingModeNotSupported                         = 0,
+    bmdStreamingEncodingModeSupported,
+    bmdStreamingEncodingModeSupportedWithChanges
+};
+
+/* Enum BMDStreamingVideoCodec - Video codecs */
+
+typedef uint32_t BMDStreamingVideoCodec;
+enum _BMDStreamingVideoCodec {
+    bmdStreamingVideoCodecH264                                   = /* 'H264' */ 0x48323634
+};
+
+/* Enum BMDStreamingH264Profile - H264 encoding profile */
+
+typedef uint32_t BMDStreamingH264Profile;
+enum _BMDStreamingH264Profile {
+    bmdStreamingH264ProfileHigh                                  = /* 'high' */ 0x68696768,
+    bmdStreamingH264ProfileMain                                  = /* 'main' */ 0x6D61696E,
+    bmdStreamingH264ProfileBaseline                              = /* 'base' */ 0x62617365
+};
+
+/* Enum BMDStreamingH264Level - H264 encoding level */
+
+typedef uint32_t BMDStreamingH264Level;
+enum _BMDStreamingH264Level {
+    bmdStreamingH264Level12                                      = /* 'lv12' */ 0x6C763132,
+    bmdStreamingH264Level13                                      = /* 'lv13' */ 0x6C763133,
+    bmdStreamingH264Level2                                       = /* 'lv2 ' */ 0x6C763220,
+    bmdStreamingH264Level21                                      = /* 'lv21' */ 0x6C763231,
+    bmdStreamingH264Level22                                      = /* 'lv22' */ 0x6C763232,
+    bmdStreamingH264Level3                                       = /* 'lv3 ' */ 0x6C763320,
+    bmdStreamingH264Level31                                      = /* 'lv31' */ 0x6C763331,
+    bmdStreamingH264Level32                                      = /* 'lv32' */ 0x6C763332,
+    bmdStreamingH264Level4                                       = /* 'lv4 ' */ 0x6C763420,
+    bmdStreamingH264Level41                                      = /* 'lv41' */ 0x6C763431,
+    bmdStreamingH264Level42                                      = /* 'lv42' */ 0x6C763432
+};
+
+/* Enum BMDStreamingH264EntropyCoding - H264 entropy coding */
+
+typedef uint32_t BMDStreamingH264EntropyCoding;
+enum _BMDStreamingH264EntropyCoding {
+    bmdStreamingH264EntropyCodingCAVLC                           = /* 'EVLC' */ 0x45564C43,
+    bmdStreamingH264EntropyCodingCABAC                           = /* 'EBAC' */ 0x45424143
+};
+
+/* Enum BMDStreamingAudioCodec - Audio codecs */
+
+typedef uint32_t BMDStreamingAudioCodec;
+enum _BMDStreamingAudioCodec {
+    bmdStreamingAudioCodecAAC                                    = /* 'AAC ' */ 0x41414320
+};
+
+/* Enum BMDStreamingEncodingModePropertyID - Encoding mode properties */
+
+typedef uint32_t BMDStreamingEncodingModePropertyID;
+enum _BMDStreamingEncodingModePropertyID {
+
+    /* Integers, Video Properties */
+
+    bmdStreamingEncodingPropertyVideoFrameRate                   = /* 'vfrt' */ 0x76667274,	// Uses values of type BMDStreamingEncodingFrameRate
+    bmdStreamingEncodingPropertyVideoBitRateKbps                 = /* 'vbrt' */ 0x76627274,
+
+    /* Integers, H264 Properties */
+
+    bmdStreamingEncodingPropertyH264Profile                      = /* 'hprf' */ 0x68707266,
+    bmdStreamingEncodingPropertyH264Level                        = /* 'hlvl' */ 0x686C766C,
+    bmdStreamingEncodingPropertyH264EntropyCoding                = /* 'hent' */ 0x68656E74,
+
+    /* Flags, H264 Properties */
+
+    bmdStreamingEncodingPropertyH264HasBFrames                   = /* 'hBfr' */ 0x68426672,
+
+    /* Integers, Audio Properties */
+
+    bmdStreamingEncodingPropertyAudioCodec                       = /* 'acdc' */ 0x61636463,
+    bmdStreamingEncodingPropertyAudioSampleRate                  = /* 'asrt' */ 0x61737274,
+    bmdStreamingEncodingPropertyAudioChannelCount                = /* 'achc' */ 0x61636863,
+    bmdStreamingEncodingPropertyAudioBitRateKbps                 = /* 'abrt' */ 0x61627274
+};
+
+#if defined(__cplusplus)
+
+// Forward Declarations
+
+class IBMDStreamingDeviceNotificationCallback;
+class IBMDStreamingH264InputCallback;
+class IBMDStreamingDiscovery;
+class IBMDStreamingVideoEncodingMode;
+class IBMDStreamingMutableVideoEncodingMode;
+class IBMDStreamingVideoEncodingModePresetIterator;
+class IBMDStreamingDeviceInput;
+class IBMDStreamingH264NALPacket;
+class IBMDStreamingAudioPacket;
+class IBMDStreamingMPEG2TSPacket;
+class IBMDStreamingH264NALParser;
+
+/* Interface IBMDStreamingDeviceNotificationCallback - Device notification callbacks. */
+
+class BMD_PUBLIC IBMDStreamingDeviceNotificationCallback : public IUnknown
+{
+public:
+    virtual HRESULT StreamingDeviceArrived (/* in */ IDeckLink* device) = 0;
+    virtual HRESULT StreamingDeviceRemoved (/* in */ IDeckLink* device) = 0;
+    virtual HRESULT StreamingDeviceModeChanged (/* in */ IDeckLink* device, /* in */ BMDStreamingDeviceMode mode) = 0;
+
+protected:
+    virtual ~IBMDStreamingDeviceNotificationCallback () {} // call Release method to drop reference count
+};
+
+/* Interface IBMDStreamingH264InputCallback - H264 input callbacks. */
+
+class BMD_PUBLIC IBMDStreamingH264InputCallback : public IUnknown
+{
+public:
+    virtual HRESULT H264NALPacketArrived (/* in */ IBMDStreamingH264NALPacket* nalPacket) = 0;
+    virtual HRESULT H264AudioPacketArrived (/* in */ IBMDStreamingAudioPacket* audioPacket) = 0;
+    virtual HRESULT MPEG2TSPacketArrived (/* in */ IBMDStreamingMPEG2TSPacket* tsPacket) = 0;
+    virtual HRESULT H264VideoInputConnectorScanningChanged (void) = 0;
+    virtual HRESULT H264VideoInputConnectorChanged (void) = 0;
+    virtual HRESULT H264VideoInputModeChanged (void) = 0;
+
+protected:
+    virtual ~IBMDStreamingH264InputCallback () {} // call Release method to drop reference count
+};
+
+/* Interface IBMDStreamingDiscovery - Installs device notifications */
+
+class BMD_PUBLIC IBMDStreamingDiscovery : public IUnknown
+{
+public:
+    virtual HRESULT InstallDeviceNotifications (/* in */ IBMDStreamingDeviceNotificationCallback* theCallback) = 0;
+    virtual HRESULT UninstallDeviceNotifications (void) = 0;
+
+protected:
+    virtual ~IBMDStreamingDiscovery () {} // call Release method to drop reference count
+};
+
+/* Interface IBMDStreamingVideoEncodingMode - Represents an encoded video mode. */
+
+class BMD_PUBLIC IBMDStreamingVideoEncodingMode : public IUnknown
+{
+public:
+    virtual HRESULT GetName (/* out */ CFStringRef* name) = 0;
+    virtual unsigned int GetPresetID (void) = 0;
+    virtual unsigned int GetSourcePositionX (void) = 0;
+    virtual unsigned int GetSourcePositionY (void) = 0;
+    virtual unsigned int GetSourceWidth (void) = 0;
+    virtual unsigned int GetSourceHeight (void) = 0;
+    virtual unsigned int GetDestWidth (void) = 0;
+    virtual unsigned int GetDestHeight (void) = 0;
+    virtual HRESULT GetFlag (/* in */ BMDStreamingEncodingModePropertyID cfgID, /* out */ bool* value) = 0;
+    virtual HRESULT GetInt (/* in */ BMDStreamingEncodingModePropertyID cfgID, /* out */ int64_t* value) = 0;
+    virtual HRESULT GetFloat (/* in */ BMDStreamingEncodingModePropertyID cfgID, /* out */ double* value) = 0;
+    virtual HRESULT GetString (/* in */ BMDStreamingEncodingModePropertyID cfgID, /* out */ CFStringRef* value) = 0;
+    virtual HRESULT CreateMutableVideoEncodingMode (/* out */ IBMDStreamingMutableVideoEncodingMode** newEncodingMode) = 0;	// Creates a mutable copy of the encoding mode
+
+protected:
+    virtual ~IBMDStreamingVideoEncodingMode () {} // call Release method to drop reference count
+};
+
+/* Interface IBMDStreamingMutableVideoEncodingMode - Represents a mutable encoded video mode. */
+
+class BMD_PUBLIC IBMDStreamingMutableVideoEncodingMode : public IBMDStreamingVideoEncodingMode
+{
+public:
+    virtual HRESULT SetSourceRect (/* in */ uint32_t posX, /* in */ uint32_t posY, /* in */ uint32_t width, /* in */ uint32_t height) = 0;
+    virtual HRESULT SetDestSize (/* in */ uint32_t width, /* in */ uint32_t height) = 0;
+    virtual HRESULT SetFlag (/* in */ BMDStreamingEncodingModePropertyID cfgID, /* in */ bool value) = 0;
+    virtual HRESULT SetInt (/* in */ BMDStreamingEncodingModePropertyID cfgID, /* in */ int64_t value) = 0;
+    virtual HRESULT SetFloat (/* in */ BMDStreamingEncodingModePropertyID cfgID, /* in */ double value) = 0;
+    virtual HRESULT SetString (/* in */ BMDStreamingEncodingModePropertyID cfgID, /* in */ CFStringRef value) = 0;
+
+protected:
+    virtual ~IBMDStreamingMutableVideoEncodingMode () {} // call Release method to drop reference count
+};
+
+/* Interface IBMDStreamingVideoEncodingModePresetIterator - Enumerates encoding mode presets */
+
+class BMD_PUBLIC IBMDStreamingVideoEncodingModePresetIterator : public IUnknown
+{
+public:
+    virtual HRESULT Next (/* out */ IBMDStreamingVideoEncodingMode** videoEncodingMode) = 0;
+
+protected:
+    virtual ~IBMDStreamingVideoEncodingModePresetIterator () {} // call Release method to drop reference count
+};
+
+/* Interface IBMDStreamingDeviceInput - Created by QueryInterface from IDeckLink */
+
+class BMD_PUBLIC IBMDStreamingDeviceInput : public IUnknown
+{
+public:
+
+    /* Input modes */
+
+    virtual HRESULT DoesSupportVideoInputMode (/* in */ BMDDisplayMode inputMode, /* out */ bool* result) = 0;
+    virtual HRESULT GetVideoInputModeIterator (/* out */ IDeckLinkDisplayModeIterator** iterator) = 0;
+    virtual HRESULT SetVideoInputMode (/* in */ BMDDisplayMode inputMode) = 0;
+    virtual HRESULT GetCurrentDetectedVideoInputMode (/* out */ BMDDisplayMode* detectedMode) = 0;
+
+    /* Capture modes */
+
+    virtual HRESULT GetVideoEncodingMode (/* out */ IBMDStreamingVideoEncodingMode** encodingMode) = 0;
+    virtual HRESULT GetVideoEncodingModePresetIterator (/* in */ BMDDisplayMode inputMode, /* out */ IBMDStreamingVideoEncodingModePresetIterator** iterator) = 0;
+    virtual HRESULT DoesSupportVideoEncodingMode (/* in */ BMDDisplayMode inputMode, /* in */ IBMDStreamingVideoEncodingMode* encodingMode, /* out */ BMDStreamingEncodingSupport* result, /* out */ IBMDStreamingVideoEncodingMode** changedEncodingMode) = 0;
+    virtual HRESULT SetVideoEncodingMode (/* in */ IBMDStreamingVideoEncodingMode* encodingMode) = 0;
+
+    /* Input control */
+
+    virtual HRESULT StartCapture (void) = 0;
+    virtual HRESULT StopCapture (void) = 0;
+    virtual HRESULT SetCallback (/* in */ IUnknown* theCallback) = 0;
+
+protected:
+    virtual ~IBMDStreamingDeviceInput () {} // call Release method to drop reference count
+};
+
+/* Interface IBMDStreamingH264NALPacket - Represent an H.264 NAL packet */
+
+class BMD_PUBLIC IBMDStreamingH264NALPacket : public IUnknown
+{
+public:
+    virtual long GetPayloadSize (void) = 0;
+    virtual HRESULT GetBytes (/* out */ void** buffer) = 0;
+    virtual HRESULT GetBytesWithSizePrefix (/* out */ void** buffer) = 0;	// Contains a 32-bit unsigned big endian size prefix
+    virtual HRESULT GetDisplayTime (/* in */ uint64_t requestedTimeScale, /* out */ uint64_t* displayTime) = 0;
+    virtual HRESULT GetPacketIndex (/* out */ uint32_t* packetIndex) = 0;	// Deprecated
+
+protected:
+    virtual ~IBMDStreamingH264NALPacket () {} // call Release method to drop reference count
+};
+
+/* Interface IBMDStreamingAudioPacket - Represents a chunk of audio data */
+
+class BMD_PUBLIC IBMDStreamingAudioPacket : public IUnknown
+{
+public:
+    virtual BMDStreamingAudioCodec GetCodec (void) = 0;
+    virtual long GetPayloadSize (void) = 0;
+    virtual HRESULT GetBytes (/* out */ void** buffer) = 0;
+    virtual HRESULT GetPlayTime (/* in */ uint64_t requestedTimeScale, /* out */ uint64_t* playTime) = 0;
+    virtual HRESULT GetPacketIndex (/* out */ uint32_t* packetIndex) = 0;	// Deprecated
+
+protected:
+    virtual ~IBMDStreamingAudioPacket () {} // call Release method to drop reference count
+};
+
+/* Interface IBMDStreamingMPEG2TSPacket - Represent an MPEG2 Transport Stream packet */
+
+class BMD_PUBLIC IBMDStreamingMPEG2TSPacket : public IUnknown
+{
+public:
+    virtual long GetPayloadSize (void) = 0;
+    virtual HRESULT GetBytes (/* out */ void** buffer) = 0;
+
+protected:
+    virtual ~IBMDStreamingMPEG2TSPacket () {} // call Release method to drop reference count
+};
+
+/* Interface IBMDStreamingH264NALParser - For basic NAL parsing */
+
+class BMD_PUBLIC IBMDStreamingH264NALParser : public IUnknown
+{
+public:
+    virtual HRESULT IsNALSequenceParameterSet (/* in */ IBMDStreamingH264NALPacket* nal) = 0;
+    virtual HRESULT IsNALPictureParameterSet (/* in */ IBMDStreamingH264NALPacket* nal) = 0;
+    virtual HRESULT GetProfileAndLevelFromSPS (/* in */ IBMDStreamingH264NALPacket* nal, /* out */ uint32_t* profileIdc, /* out */ uint32_t* profileCompatability, /* out */ uint32_t* levelIdc) = 0;
+
+protected:
+    virtual ~IBMDStreamingH264NALParser () {} // call Release method to drop reference count
+};
+
+/* Functions */
+
+extern "C" {
+
+    BMD_PUBLIC IBMDStreamingDiscovery* CreateBMDStreamingDiscoveryInstance(void);
+    BMD_PUBLIC IBMDStreamingH264NALParser* CreateBMDStreamingH264NALParser(void);
+
+}
+
+
+
+#endif /* defined(__cplusplus) */
+#endif /* defined(BMD_DECKLINKAPISTREAMING_H) */
diff --git a/DeckLinkSDK/Mac/include/DeckLinkAPIStreaming_v10_11.h b/DeckLinkSDK/Mac/include/DeckLinkAPIStreaming_v10_11.h
new file mode 100644
index 0000000000..9ac9e499d9
--- /dev/null
+++ b/DeckLinkSDK/Mac/include/DeckLinkAPIStreaming_v10_11.h
@@ -0,0 +1,59 @@
+/* -LICENSE-START-
+** Copyright (c) 2018 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPISTREAMING_H
+#define BMD_DECKLINKAPISTREAMING_H
+
+#ifndef BMD_PUBLIC
+	#define BMD_PUBLIC
+#endif
+
+
+/* Functions */
+
+extern "C" {
+
+    IBMDStreamingDiscovery* BMD_PUBLIC CreateBMDStreamingDiscoveryInstance_v10_11 (void);
+    IBMDStreamingH264NALParser* BMD_PUBLIC CreateBMDStreamingH264NALParser_v10_11 (void);
+
+}
+
+
+#endif /* defined(BMD_DECKLINKAPISTREAMING_H) */
diff --git a/DeckLinkSDK/Mac/include/DeckLinkAPITypes.h b/DeckLinkSDK/Mac/include/DeckLinkAPITypes.h
new file mode 100644
index 0000000000..8437eb4c2a
--- /dev/null
+++ b/DeckLinkSDK/Mac/include/DeckLinkAPITypes.h
@@ -0,0 +1,132 @@
+/* -LICENSE-START-
+** Copyright (c) 2022 Blackmagic Design
+**
+** Permission is hereby granted, free of charge, to any person or organization
+** obtaining a copy of the software and accompanying documentation covered by
+** this license (the "Software") to use, reproduce, display, distribute,
+** execute, and transmit the Software, and to prepare derivative works of the
+** Software, and to permit third-parties to whom the Software is furnished to
+** do so, all subject to the following:
+**
+** The copyright notices in the Software and this entire statement, including
+** the above license grant, this restriction and the following disclaimer,
+** must be included in all copies of the Software, in whole or in part, and
+** all derivative works of the Software, unless such copies or derivative
+** works are solely in the form of machine-executable object code generated by
+** a source language processor.
+**
+** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+** DEALINGS IN THE SOFTWARE.
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPITYPES_H
+#define BMD_DECKLINKAPITYPES_H
+
+
+#ifndef BMD_CONST
+    #if defined(_MSC_VER)
+        #define BMD_CONST __declspec(selectany) static const
+    #else
+        #define BMD_CONST static const
+    #endif
+#endif
+
+#ifndef BMD_PUBLIC
+	#define BMD_PUBLIC
+#endif
+
+// Type Declarations
+
+typedef int64_t BMDTimeValue;
+typedef int64_t BMDTimeScale;
+typedef uint32_t BMDTimecodeBCD;
+typedef uint32_t BMDTimecodeUserBits;
+
+// Interface ID Declarations
+
+BMD_CONST REFIID IID_IDeckLinkTimecode                            = /* BC6CFBD3-8317-4325-AC1C-1216391E9340 */ { 0xBC,0x6C,0xFB,0xD3,0x83,0x17,0x43,0x25,0xAC,0x1C,0x12,0x16,0x39,0x1E,0x93,0x40 };
+
+/* Enum BMDTimecodeFlags - Timecode flags */
+
+typedef uint32_t BMDTimecodeFlags;
+enum _BMDTimecodeFlags {
+    bmdTimecodeFlagDefault                                       = 0,
+    bmdTimecodeIsDropFrame                                       = 1 << 0,
+    bmdTimecodeFieldMark                                         = 1 << 1,
+    bmdTimecodeColorFrame                                        = 1 << 2,
+    bmdTimecodeEmbedRecordingTrigger                             = 1 << 3,	// On SDI recording trigger utilises a user-bit.
+    bmdTimecodeRecordingTriggered                                = 1 << 4
+};
+
+/* Enum BMDVideoConnection - Video connection types */
+
+typedef uint32_t BMDVideoConnection;
+enum _BMDVideoConnection {
+    bmdVideoConnectionUnspecified                                = 0,
+    bmdVideoConnectionSDI                                        = 1 << 0,
+    bmdVideoConnectionHDMI                                       = 1 << 1,
+    bmdVideoConnectionOpticalSDI                                 = 1 << 2,
+    bmdVideoConnectionComponent                                  = 1 << 3,
+    bmdVideoConnectionComposite                                  = 1 << 4,
+    bmdVideoConnectionSVideo                                     = 1 << 5
+};
+
+/* Enum BMDAudioConnection - Audio connection types */
+
+typedef uint32_t BMDAudioConnection;
+enum _BMDAudioConnection {
+    bmdAudioConnectionEmbedded                                   = 1 << 0,
+    bmdAudioConnectionAESEBU                                     = 1 << 1,
+    bmdAudioConnectionAnalog                                     = 1 << 2,
+    bmdAudioConnectionAnalogXLR                                  = 1 << 3,
+    bmdAudioConnectionAnalogRCA                                  = 1 << 4,
+    bmdAudioConnectionMicrophone                                 = 1 << 5,
+    bmdAudioConnectionHeadphones                                 = 1 << 6
+};
+
+/* Enum BMDDeckControlConnection - Deck control connections */
+
+typedef uint32_t BMDDeckControlConnection;
+enum _BMDDeckControlConnection {
+    bmdDeckControlConnectionRS422Remote1                         = 1 << 0,
+    bmdDeckControlConnectionRS422Remote2                         = 1 << 1
+};
+
+#if defined(__cplusplus)
+
+// Forward Declarations
+
+class IDeckLinkTimecode;
+
+/* Interface IDeckLinkTimecode - Used for video frame timecode representation. */
+
+class BMD_PUBLIC IDeckLinkTimecode : public IUnknown
+{
+public:
+    virtual BMDTimecodeBCD GetBCD (void) = 0;
+    virtual HRESULT GetComponents (/* out */ uint8_t* hours, /* out */ uint8_t* minutes, /* out */ uint8_t* seconds, /* out */ uint8_t* frames) = 0;
+    virtual HRESULT GetString (/* out */ CFStringRef* timecode) = 0;
+    virtual BMDTimecodeFlags GetFlags (void) = 0;
+    virtual HRESULT GetTimecodeUserBits (/* out */ BMDTimecodeUserBits* userBits) = 0;
+
+protected:
+    virtual ~IDeckLinkTimecode () {} // call Release method to drop reference count
+};
+
+/* Functions */
+
+extern "C" {
+
+
+}
+
+
+
+#endif /* defined(__cplusplus) */
+#endif /* defined(BMD_DECKLINKAPITYPES_H) */
diff --git a/DeckLinkSDK/Mac/include/DeckLinkAPIVersion.h b/DeckLinkSDK/Mac/include/DeckLinkAPIVersion.h
new file mode 100644
index 0000000000..679ef92584
--- /dev/null
+++ b/DeckLinkSDK/Mac/include/DeckLinkAPIVersion.h
@@ -0,0 +1,50 @@
+/* -LICENSE-START-
+ * ** Copyright (c) 2014 Blackmagic Design
+ * **  
+ * ** Permission is hereby granted, free of charge, to any person or organization 
+ * ** obtaining a copy of the software and accompanying documentation (the 
+ * ** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+ * ** and transmit the Software, and to prepare derivative works of the Software, 
+ * ** and to permit third-parties to whom the Software is furnished to do so, in 
+ * ** accordance with:
+ * ** 
+ * ** (1) if the Software is obtained from Blackmagic Design, the End User License 
+ * ** Agreement for the Software Development Kit (“EULA”) available at 
+ * ** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+ * ** 
+ * ** (2) if the Software is obtained from any third party, such licensing terms 
+ * ** as notified by that third party,
+ * ** 
+ * ** and all subject to the following:
+ * ** 
+ * ** (3) the copyright notices in the Software and this entire statement, 
+ * ** including the above license grant, this restriction and the following 
+ * ** disclaimer, must be included in all copies of the Software, in whole or in 
+ * ** part, and all derivative works of the Software, unless such copies or 
+ * ** derivative works are solely in the form of machine-executable object code 
+ * ** generated by a source language processor.
+ * ** 
+ * ** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+ * ** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+ * ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+ * ** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+ * ** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+ * ** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+ * ** DEALINGS IN THE SOFTWARE.
+ * ** 
+ * ** A copy of the Software is available free of charge at 
+ * ** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+ * ** 
+ * ** -LICENSE-END-
+ * */
+
+/* DeckLinkAPIVersion.h */
+
+#ifndef __DeckLink_API_Version_h__
+#define __DeckLink_API_Version_h__
+
+#define BLACKMAGIC_DECKLINK_API_VERSION					0x0c040200
+#define BLACKMAGIC_DECKLINK_API_VERSION_STRING			"12.4.2"
+
+#endif	// __DeckLink_API_Version_h__
+
diff --git a/DeckLinkSDK/Mac/include/DeckLinkAPIVideoEncoderInput_v10_11.h b/DeckLinkSDK/Mac/include/DeckLinkAPIVideoEncoderInput_v10_11.h
new file mode 100644
index 0000000000..8921b35333
--- /dev/null
+++ b/DeckLinkSDK/Mac/include/DeckLinkAPIVideoEncoderInput_v10_11.h
@@ -0,0 +1,88 @@
+/* -LICENSE-START-
+** Copyright (c) 2017 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPIVIDEOENCODERINPUT_v10_11_H
+#define BMD_DECKLINKAPIVIDEOENCODERINPUT_v10_11_H
+
+#include "DeckLinkAPI.h"
+#include "DeckLinkAPI_v10_11.h"
+
+// Type Declarations
+
+BMD_CONST REFIID IID_IDeckLinkEncoderInput_v10_11                        = /* 270587DA-6B7D-42E7-A1F0-6D853F581185 */ {0x27,0x05,0x87,0xDA,0x6B,0x7D,0x42,0xE7,0xA1,0xF0,0x6D,0x85,0x3F,0x58,0x11,0x85};
+
+/* Interface IDeckLinkEncoderInput_v10_11 - Created by QueryInterface from IDeckLink. */
+
+class IDeckLinkEncoderInput_v10_11 : public IUnknown
+{
+public:
+    virtual HRESULT DoesSupportVideoMode (/* in */ BMDDisplayMode displayMode, /* in */ BMDPixelFormat pixelFormat, /* in */ BMDVideoInputFlags flags, /* out */ BMDDisplayModeSupport_v10_11 *result, /* out */ IDeckLinkDisplayMode **resultDisplayMode) = 0;
+    virtual HRESULT GetDisplayModeIterator (/* out */ IDeckLinkDisplayModeIterator **iterator) = 0;
+
+    /* Video Input */
+
+    virtual HRESULT EnableVideoInput (/* in */ BMDDisplayMode displayMode, /* in */ BMDPixelFormat pixelFormat, /* in */ BMDVideoInputFlags flags) = 0;
+    virtual HRESULT DisableVideoInput (void) = 0;
+    virtual HRESULT GetAvailablePacketsCount (/* out */ uint32_t *availablePacketsCount) = 0;
+    virtual HRESULT SetMemoryAllocator (/* in */ IDeckLinkMemoryAllocator *theAllocator) = 0;
+
+    /* Audio Input */
+
+    virtual HRESULT EnableAudioInput (/* in */ BMDAudioFormat audioFormat, /* in */ BMDAudioSampleRate sampleRate, /* in */ BMDAudioSampleType sampleType, /* in */ uint32_t channelCount) = 0;
+    virtual HRESULT DisableAudioInput (void) = 0;
+    virtual HRESULT GetAvailableAudioSampleFrameCount (/* out */ uint32_t *availableSampleFrameCount) = 0;
+
+    /* Input Control */
+
+    virtual HRESULT StartStreams (void) = 0;
+    virtual HRESULT StopStreams (void) = 0;
+    virtual HRESULT PauseStreams (void) = 0;
+    virtual HRESULT FlushStreams (void) = 0;
+    virtual HRESULT SetCallback (/* in */ IDeckLinkEncoderInputCallback *theCallback) = 0;
+
+    /* Hardware Timing */
+
+    virtual HRESULT GetHardwareReferenceClock (/* in */ BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue *hardwareTime, /* out */ BMDTimeValue *timeInFrame, /* out */ BMDTimeValue *ticksPerFrame) = 0;
+
+protected:
+    virtual ~IDeckLinkEncoderInput_v10_11 () {} // call Release method to drop reference count
+};
+
+#endif /* defined(BMD_DECKLINKAPIVIDEOENCODERINPUT_v10_11_H) */
diff --git a/DeckLinkSDK/Mac/include/DeckLinkAPIVideoInput_v10_11.h b/DeckLinkSDK/Mac/include/DeckLinkAPIVideoInput_v10_11.h
new file mode 100644
index 0000000000..0a287f8cdf
--- /dev/null
+++ b/DeckLinkSDK/Mac/include/DeckLinkAPIVideoInput_v10_11.h
@@ -0,0 +1,91 @@
+/* -LICENSE-START-
+** Copyright (c) 2017 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPIVIDEOINPUT_v10_11_H
+#define BMD_DECKLINKAPIVIDEOINPUT_v10_11_H
+
+#include "DeckLinkAPI.h"
+#include "DeckLinkAPI_v10_11.h"
+#include "DeckLinkAPIVideoInput_v11_5_1.h"
+
+// Type Declarations
+
+BMD_CONST REFIID IID_IDeckLinkInput_v10_11                               = /* AF22762B-DFAC-4846-AA79-FA8883560995 */ {0xAF,0x22,0x76,0x2B,0xDF,0xAC,0x48,0x46,0xAA,0x79,0xFA,0x88,0x83,0x56,0x09,0x95};
+
+/* Interface IDeckLinkInput_v10_11 - DeckLink input interface. */
+
+class IDeckLinkInput_v10_11 : public IUnknown
+{
+public:
+    virtual HRESULT DoesSupportVideoMode (/* in */ BMDDisplayMode displayMode, /* in */ BMDPixelFormat pixelFormat, /* in */ BMDVideoInputFlags flags, /* out */ BMDDisplayModeSupport_v10_11 *result, /* out */ IDeckLinkDisplayMode **resultDisplayMode) = 0;
+    virtual HRESULT GetDisplayModeIterator (/* out */ IDeckLinkDisplayModeIterator **iterator) = 0;
+
+    virtual HRESULT SetScreenPreviewCallback (/* in */ IDeckLinkScreenPreviewCallback *previewCallback) = 0;
+
+    /* Video Input */
+
+    virtual HRESULT EnableVideoInput (/* in */ BMDDisplayMode displayMode, /* in */ BMDPixelFormat pixelFormat, /* in */ BMDVideoInputFlags flags) = 0;
+    virtual HRESULT DisableVideoInput (void) = 0;
+    virtual HRESULT GetAvailableVideoFrameCount (/* out */ uint32_t *availableFrameCount) = 0;
+    virtual HRESULT SetVideoInputFrameMemoryAllocator (/* in */ IDeckLinkMemoryAllocator *theAllocator) = 0;
+
+    /* Audio Input */
+
+    virtual HRESULT EnableAudioInput (/* in */ BMDAudioSampleRate sampleRate, /* in */ BMDAudioSampleType sampleType, /* in */ uint32_t channelCount) = 0;
+    virtual HRESULT DisableAudioInput (void) = 0;
+    virtual HRESULT GetAvailableAudioSampleFrameCount (/* out */ uint32_t *availableSampleFrameCount) = 0;
+
+    /* Input Control */
+
+    virtual HRESULT StartStreams (void) = 0;
+    virtual HRESULT StopStreams (void) = 0;
+    virtual HRESULT PauseStreams (void) = 0;
+    virtual HRESULT FlushStreams (void) = 0;
+    virtual HRESULT SetCallback (/* in */ IDeckLinkInputCallback_v11_5_1 *theCallback) = 0;
+
+    /* Hardware Timing */
+
+    virtual HRESULT GetHardwareReferenceClock (/* in */ BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue *hardwareTime, /* out */ BMDTimeValue *timeInFrame, /* out */ BMDTimeValue *ticksPerFrame) = 0;
+
+protected:
+    virtual ~IDeckLinkInput_v10_11 () {} // call Release method to drop reference count
+};
+
+#endif /* defined(BMD_DECKLINKAPIVIDEOINPUT_v10_11_H) */
diff --git a/DeckLinkSDK/Mac/include/DeckLinkAPIVideoInput_v11_4.h b/DeckLinkSDK/Mac/include/DeckLinkAPIVideoInput_v11_4.h
new file mode 100644
index 0000000000..4879fc2a18
--- /dev/null
+++ b/DeckLinkSDK/Mac/include/DeckLinkAPIVideoInput_v11_4.h
@@ -0,0 +1,90 @@
+/* -LICENSE-START-
+** Copyright (c) 2019 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPIVIDEOINPUT_v11_4_H
+#define BMD_DECKLINKAPIVIDEOINPUT_v11_4_H
+
+#include "DeckLinkAPI.h"
+#include "DeckLinkAPIVideoInput_v11_5_1.h"
+
+// Type Declarations
+
+BMD_CONST REFIID IID_IDeckLinkInput_v11_4                               = /* 2A88CF76-F494-4216-A7EF-DC74EEB83882 */ { 0x2A,0x88,0xCF,0x76,0xF4,0x94,0x42,0x16,0xA7,0xEF,0xDC,0x74,0xEE,0xB8,0x38,0x82 };
+
+/* Interface IDeckLinkInput_v11_4 - Created by QueryInterface from IDeckLink. */
+
+class BMD_PUBLIC IDeckLinkInput_v11_4 : public IUnknown
+{
+public:
+    virtual HRESULT DoesSupportVideoMode (/* in */ BMDVideoConnection connection /* If a value of 0 is specified, the caller does not care about the connection */, /* in */ BMDDisplayMode requestedMode, /* in */ BMDPixelFormat requestedPixelFormat, /* in */ BMDSupportedVideoModeFlags flags, /* out */ bool* supported) = 0;
+    virtual HRESULT GetDisplayMode (/* in */ BMDDisplayMode displayMode, /* out */ IDeckLinkDisplayMode** resultDisplayMode) = 0;
+    virtual HRESULT GetDisplayModeIterator (/* out */ IDeckLinkDisplayModeIterator** iterator) = 0;
+    virtual HRESULT SetScreenPreviewCallback (/* in */ IDeckLinkScreenPreviewCallback* previewCallback) = 0;
+
+    /* Video Input */
+
+    virtual HRESULT EnableVideoInput (/* in */ BMDDisplayMode displayMode, /* in */ BMDPixelFormat pixelFormat, /* in */ BMDVideoInputFlags flags) = 0;
+    virtual HRESULT DisableVideoInput (void) = 0;
+    virtual HRESULT GetAvailableVideoFrameCount (/* out */ uint32_t* availableFrameCount) = 0;
+    virtual HRESULT SetVideoInputFrameMemoryAllocator (/* in */ IDeckLinkMemoryAllocator* theAllocator) = 0;
+
+    /* Audio Input */
+
+    virtual HRESULT EnableAudioInput (/* in */ BMDAudioSampleRate sampleRate, /* in */ BMDAudioSampleType sampleType, /* in */ uint32_t channelCount) = 0;
+    virtual HRESULT DisableAudioInput (void) = 0;
+    virtual HRESULT GetAvailableAudioSampleFrameCount (/* out */ uint32_t* availableSampleFrameCount) = 0;
+
+    /* Input Control */
+
+    virtual HRESULT StartStreams (void) = 0;
+    virtual HRESULT StopStreams (void) = 0;
+    virtual HRESULT PauseStreams (void) = 0;
+    virtual HRESULT FlushStreams (void) = 0;
+    virtual HRESULT SetCallback (/* in */ IDeckLinkInputCallback_v11_5_1* theCallback) = 0;
+
+    /* Hardware Timing */
+
+    virtual HRESULT GetHardwareReferenceClock (/* in */ BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue* hardwareTime, /* out */ BMDTimeValue* timeInFrame, /* out */ BMDTimeValue* ticksPerFrame) = 0;
+
+protected:
+    virtual ~IDeckLinkInput_v11_4 () {} // call Release method to drop reference count
+};
+
+#endif /* defined(BMD_DECKLINKAPIVIDEOINPUT_v11_4_H) */
diff --git a/DeckLinkSDK/Mac/include/DeckLinkAPIVideoInput_v11_5_1.h b/DeckLinkSDK/Mac/include/DeckLinkAPIVideoInput_v11_5_1.h
new file mode 100644
index 0000000000..51fb5172ac
--- /dev/null
+++ b/DeckLinkSDK/Mac/include/DeckLinkAPIVideoInput_v11_5_1.h
@@ -0,0 +1,102 @@
+/* -LICENSE-START-
+** Copyright (c) 2020 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPIVIDEOINPUT_v11_5_1_H
+#define BMD_DECKLINKAPIVIDEOINPUT_v11_5_1_H
+
+#include "DeckLinkAPI.h"
+
+// Type Declarations
+
+BMD_CONST REFIID IID_IDeckLinkInputCallback_v11_5_1                       = /* DD04E5EC-7415-42AB-AE4A-E80C4DFC044A */ { 0xDD, 0x04, 0xE5, 0xEC, 0x74, 0x15, 0x42, 0xAB, 0xAE, 0x4A, 0xE8, 0x0C, 0x4D, 0xFC, 0x04, 0x4A };
+BMD_CONST REFIID IID_IDeckLinkInput_v11_5_1                               = /* 9434C6E4-B15D-4B1C-979E-661E3DDCB4B9 */ { 0x94, 0x34, 0xC6, 0xE4, 0xB1, 0x5D, 0x4B, 0x1C, 0x97, 0x9E, 0x66, 0x1E, 0x3D, 0xDC, 0xB4, 0xB9 };
+
+/* Interface IDeckLinkInputCallback_v11_5_1 - Frame arrival callback. */
+
+class BMD_PUBLIC IDeckLinkInputCallback_v11_5_1 : public IUnknown
+{
+public:
+    virtual HRESULT VideoInputFormatChanged (/* in */ BMDVideoInputFormatChangedEvents notificationEvents, /* in */ IDeckLinkDisplayMode* newDisplayMode, /* in */ BMDDetectedVideoInputFormatFlags detectedSignalFlags) = 0;
+    virtual HRESULT VideoInputFrameArrived (/* in */ IDeckLinkVideoInputFrame* videoFrame, /* in */ IDeckLinkAudioInputPacket* audioPacket) = 0;
+
+protected:
+    virtual ~IDeckLinkInputCallback_v11_5_1 () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkInput_v11_5_1 - Created by QueryInterface from IDeckLink. */
+
+class BMD_PUBLIC IDeckLinkInput_v11_5_1 : public IUnknown
+{
+public:
+    virtual HRESULT DoesSupportVideoMode (/* in */ BMDVideoConnection connection /* If a value of bmdVideoConnectionUnspecified is specified, the caller does not care about the connection */, /* in */ BMDDisplayMode requestedMode, /* in */ BMDPixelFormat requestedPixelFormat, /* in */ BMDVideoInputConversionMode conversionMode, /* in */ BMDSupportedVideoModeFlags flags, /* out */ BMDDisplayMode* actualMode, /* out */ bool* supported) = 0;
+    virtual HRESULT GetDisplayMode (/* in */ BMDDisplayMode displayMode, /* out */ IDeckLinkDisplayMode** resultDisplayMode) = 0;
+    virtual HRESULT GetDisplayModeIterator (/* out */ IDeckLinkDisplayModeIterator** iterator) = 0;
+    virtual HRESULT SetScreenPreviewCallback (/* in */ IDeckLinkScreenPreviewCallback* previewCallback) = 0;
+
+    /* Video Input */
+
+    virtual HRESULT EnableVideoInput (/* in */ BMDDisplayMode displayMode, /* in */ BMDPixelFormat pixelFormat, /* in */ BMDVideoInputFlags flags) = 0;
+    virtual HRESULT DisableVideoInput (void) = 0;
+    virtual HRESULT GetAvailableVideoFrameCount (/* out */ uint32_t* availableFrameCount) = 0;
+    virtual HRESULT SetVideoInputFrameMemoryAllocator (/* in */ IDeckLinkMemoryAllocator* theAllocator) = 0;
+
+    /* Audio Input */
+
+    virtual HRESULT EnableAudioInput (/* in */ BMDAudioSampleRate sampleRate, /* in */ BMDAudioSampleType sampleType, /* in */ uint32_t channelCount) = 0;
+    virtual HRESULT DisableAudioInput (void) = 0;
+    virtual HRESULT GetAvailableAudioSampleFrameCount (/* out */ uint32_t* availableSampleFrameCount) = 0;
+
+    /* Input Control */
+
+    virtual HRESULT StartStreams (void) = 0;
+    virtual HRESULT StopStreams (void) = 0;
+    virtual HRESULT PauseStreams (void) = 0;
+    virtual HRESULT FlushStreams (void) = 0;
+    virtual HRESULT SetCallback (/* in */ IDeckLinkInputCallback_v11_5_1* theCallback) = 0;
+
+    /* Hardware Timing */
+
+    virtual HRESULT GetHardwareReferenceClock (/* in */ BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue* hardwareTime, /* out */ BMDTimeValue* timeInFrame, /* out */ BMDTimeValue* ticksPerFrame) = 0;
+
+protected:
+    virtual ~IDeckLinkInput_v11_5_1 () {} // call Release method to drop reference count
+};
+
+#endif /* defined(BMD_DECKLINKAPIVIDEOINPUT_v11_5_1_H) */
diff --git a/DeckLinkSDK/Mac/include/DeckLinkAPIVideoOutput_v10_11.h b/DeckLinkSDK/Mac/include/DeckLinkAPIVideoOutput_v10_11.h
new file mode 100644
index 0000000000..22a13a5dcc
--- /dev/null
+++ b/DeckLinkSDK/Mac/include/DeckLinkAPIVideoOutput_v10_11.h
@@ -0,0 +1,108 @@
+/* -LICENSE-START-
+** Copyright (c) 2017 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPIVIDEOOUTPUT_v10_11_H
+#define BMD_DECKLINKAPIVIDEOOUTPUT_v10_11_H
+
+#include "DeckLinkAPI.h"
+#include "DeckLinkAPI_v10_11.h"
+
+// Type Declarations
+
+BMD_CONST REFIID IID_IDeckLinkOutput_v10_11                              = /* CC5C8A6E-3F2F-4B3A-87EA-FD78AF300564 */ {0xCC,0x5C,0x8A,0x6E,0x3F,0x2F,0x4B,0x3A,0x87,0xEA,0xFD,0x78,0xAF,0x30,0x05,0x64};
+
+/* Interface IDeckLinkOutput_v10_11 - DeckLink output interface. */
+
+class IDeckLinkOutput_v10_11 : public IUnknown
+{
+public:
+    virtual HRESULT DoesSupportVideoMode (/* in */ BMDDisplayMode displayMode, /* in */ BMDPixelFormat pixelFormat, /* in */ BMDVideoOutputFlags flags, /* out */ BMDDisplayModeSupport_v10_11 *result, /* out */ IDeckLinkDisplayMode **resultDisplayMode) = 0;
+    virtual HRESULT GetDisplayModeIterator (/* out */ IDeckLinkDisplayModeIterator **iterator) = 0;
+
+    virtual HRESULT SetScreenPreviewCallback (/* in */ IDeckLinkScreenPreviewCallback *previewCallback) = 0;
+
+    /* Video Output */
+
+    virtual HRESULT EnableVideoOutput (/* in */ BMDDisplayMode displayMode, /* in */ BMDVideoOutputFlags flags) = 0;
+    virtual HRESULT DisableVideoOutput (void) = 0;
+
+    virtual HRESULT SetVideoOutputFrameMemoryAllocator (/* in */ IDeckLinkMemoryAllocator *theAllocator) = 0;
+    virtual HRESULT CreateVideoFrame (/* in */ int32_t width, /* in */ int32_t height, /* in */ int32_t rowBytes, /* in */ BMDPixelFormat pixelFormat, /* in */ BMDFrameFlags flags, /* out */ IDeckLinkMutableVideoFrame **outFrame) = 0;
+    virtual HRESULT CreateAncillaryData (/* in */ BMDPixelFormat pixelFormat, /* out */ IDeckLinkVideoFrameAncillary **outBuffer) = 0;
+
+    virtual HRESULT DisplayVideoFrameSync (/* in */ IDeckLinkVideoFrame *theFrame) = 0;
+    virtual HRESULT ScheduleVideoFrame (/* in */ IDeckLinkVideoFrame *theFrame, /* in */ BMDTimeValue displayTime, /* in */ BMDTimeValue displayDuration, /* in */ BMDTimeScale timeScale) = 0;
+    virtual HRESULT SetScheduledFrameCompletionCallback (/* in */ IDeckLinkVideoOutputCallback *theCallback) = 0;
+    virtual HRESULT GetBufferedVideoFrameCount (/* out */ uint32_t *bufferedFrameCount) = 0;
+
+    /* Audio Output */
+
+    virtual HRESULT EnableAudioOutput (/* in */ BMDAudioSampleRate sampleRate, /* in */ BMDAudioSampleType sampleType, /* in */ uint32_t channelCount, /* in */ BMDAudioOutputStreamType streamType) = 0;
+    virtual HRESULT DisableAudioOutput (void) = 0;
+
+    virtual HRESULT WriteAudioSamplesSync (/* in */ void *buffer, /* in */ uint32_t sampleFrameCount, /* out */ uint32_t *sampleFramesWritten) = 0;
+
+    virtual HRESULT BeginAudioPreroll (void) = 0;
+    virtual HRESULT EndAudioPreroll (void) = 0;
+    virtual HRESULT ScheduleAudioSamples (/* in */ void *buffer, /* in */ uint32_t sampleFrameCount, /* in */ BMDTimeValue streamTime, /* in */ BMDTimeScale timeScale, /* out */ uint32_t *sampleFramesWritten) = 0;
+
+    virtual HRESULT GetBufferedAudioSampleFrameCount (/* out */ uint32_t *bufferedSampleFrameCount) = 0;
+    virtual HRESULT FlushBufferedAudioSamples (void) = 0;
+
+    virtual HRESULT SetAudioCallback (/* in */ IDeckLinkAudioOutputCallback *theCallback) = 0;
+
+    /* Output Control */
+
+    virtual HRESULT StartScheduledPlayback (/* in */ BMDTimeValue playbackStartTime, /* in */ BMDTimeScale timeScale, /* in */ double playbackSpeed) = 0;
+    virtual HRESULT StopScheduledPlayback (/* in */ BMDTimeValue stopPlaybackAtTime, /* out */ BMDTimeValue *actualStopTime, /* in */ BMDTimeScale timeScale) = 0;
+    virtual HRESULT IsScheduledPlaybackRunning (/* out */ bool *active) = 0;
+    virtual HRESULT GetScheduledStreamTime (/* in */ BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue *streamTime, /* out */ double *playbackSpeed) = 0;
+    virtual HRESULT GetReferenceStatus (/* out */ BMDReferenceStatus *referenceStatus) = 0;
+
+    /* Hardware Timing */
+
+    virtual HRESULT GetHardwareReferenceClock (/* in */ BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue *hardwareTime, /* out */ BMDTimeValue *timeInFrame, /* out */ BMDTimeValue *ticksPerFrame) = 0;
+    virtual HRESULT GetFrameCompletionReferenceTimestamp (/* in */ IDeckLinkVideoFrame *theFrame, /* in */ BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue *frameCompletionTimestamp) = 0;
+
+protected:
+    virtual ~IDeckLinkOutput_v10_11 () {} // call Release method to drop reference count
+};
+
+#endif /* defined(BMD_DECKLINKAPIVIDEOOUTPUT_v10_11_H) */
diff --git a/DeckLinkSDK/Mac/include/DeckLinkAPIVideoOutput_v11_4.h b/DeckLinkSDK/Mac/include/DeckLinkAPIVideoOutput_v11_4.h
new file mode 100644
index 0000000000..14d65ac24c
--- /dev/null
+++ b/DeckLinkSDK/Mac/include/DeckLinkAPIVideoOutput_v11_4.h
@@ -0,0 +1,101 @@
+/* -LICENSE-START-
+** Copyright (c) 2019 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPIVIDEOOUTPUT_v11_4_H
+#define BMD_DECKLINKAPIVIDEOOUTPUT_v11_4_H
+
+#include "DeckLinkAPI.h"
+
+// Type Declarations
+
+BMD_CONST REFIID IID_IDeckLinkOutput_v11_4                              = /* 065A0F6C-C508-4D0D-B919-F5EB0EBFC96B */ { 0x06,0x5A,0x0F,0x6C,0xC5,0x08,0x4D,0x0D,0xB9,0x19,0xF5,0xEB,0x0E,0xBF,0xC9,0x6B };
+
+/* Interface IDeckLinkOutput_v11_4 - Created by QueryInterface from IDeckLink. */
+
+class BMD_PUBLIC IDeckLinkOutput_v11_4 : public IUnknown
+{
+public:
+    virtual HRESULT DoesSupportVideoMode (/* in */ BMDVideoConnection connection /* If a value of 0 is specified, the caller does not care about the connection */, /* in */ BMDDisplayMode requestedMode, /* in */ BMDPixelFormat requestedPixelFormat, /* in */ BMDSupportedVideoModeFlags flags, /* out */ BMDDisplayMode* actualMode, /* out */ bool* supported) = 0;
+    virtual HRESULT GetDisplayMode (/* in */ BMDDisplayMode displayMode, /* out */ IDeckLinkDisplayMode** resultDisplayMode) = 0;
+    virtual HRESULT GetDisplayModeIterator (/* out */ IDeckLinkDisplayModeIterator** iterator) = 0;
+    virtual HRESULT SetScreenPreviewCallback (/* in */ IDeckLinkScreenPreviewCallback* previewCallback) = 0;
+
+    /* Video Output */
+
+    virtual HRESULT EnableVideoOutput (/* in */ BMDDisplayMode displayMode, /* in */ BMDVideoOutputFlags flags) = 0;
+    virtual HRESULT DisableVideoOutput (void) = 0;
+    virtual HRESULT SetVideoOutputFrameMemoryAllocator (/* in */ IDeckLinkMemoryAllocator* theAllocator) = 0;
+    virtual HRESULT CreateVideoFrame (/* in */ int32_t width, /* in */ int32_t height, /* in */ int32_t rowBytes, /* in */ BMDPixelFormat pixelFormat, /* in */ BMDFrameFlags flags, /* out */ IDeckLinkMutableVideoFrame** outFrame) = 0;
+    virtual HRESULT CreateAncillaryData (/* in */ BMDPixelFormat pixelFormat, /* out */ IDeckLinkVideoFrameAncillary** outBuffer) = 0;	// Use of IDeckLinkVideoFrameAncillaryPackets is preferred
+    virtual HRESULT DisplayVideoFrameSync (/* in */ IDeckLinkVideoFrame* theFrame) = 0;
+    virtual HRESULT ScheduleVideoFrame (/* in */ IDeckLinkVideoFrame* theFrame, /* in */ BMDTimeValue displayTime, /* in */ BMDTimeValue displayDuration, /* in */ BMDTimeScale timeScale) = 0;
+    virtual HRESULT SetScheduledFrameCompletionCallback (/* in */ IDeckLinkVideoOutputCallback* theCallback) = 0;
+    virtual HRESULT GetBufferedVideoFrameCount (/* out */ uint32_t* bufferedFrameCount) = 0;
+
+    /* Audio Output */
+
+    virtual HRESULT EnableAudioOutput (/* in */ BMDAudioSampleRate sampleRate, /* in */ BMDAudioSampleType sampleType, /* in */ uint32_t channelCount, /* in */ BMDAudioOutputStreamType streamType) = 0;
+    virtual HRESULT DisableAudioOutput (void) = 0;
+    virtual HRESULT WriteAudioSamplesSync (/* in */ void* buffer, /* in */ uint32_t sampleFrameCount, /* out */ uint32_t* sampleFramesWritten) = 0;
+    virtual HRESULT BeginAudioPreroll (void) = 0;
+    virtual HRESULT EndAudioPreroll (void) = 0;
+    virtual HRESULT ScheduleAudioSamples (/* in */ void* buffer, /* in */ uint32_t sampleFrameCount, /* in */ BMDTimeValue streamTime, /* in */ BMDTimeScale timeScale, /* out */ uint32_t* sampleFramesWritten) = 0;
+    virtual HRESULT GetBufferedAudioSampleFrameCount (/* out */ uint32_t* bufferedSampleFrameCount) = 0;
+    virtual HRESULT FlushBufferedAudioSamples (void) = 0;
+    virtual HRESULT SetAudioCallback (/* in */ IDeckLinkAudioOutputCallback* theCallback) = 0;
+
+    /* Output Control */
+
+    virtual HRESULT StartScheduledPlayback (/* in */ BMDTimeValue playbackStartTime, /* in */ BMDTimeScale timeScale, /* in */ double playbackSpeed) = 0;
+    virtual HRESULT StopScheduledPlayback (/* in */ BMDTimeValue stopPlaybackAtTime, /* out */ BMDTimeValue* actualStopTime, /* in */ BMDTimeScale timeScale) = 0;
+    virtual HRESULT IsScheduledPlaybackRunning (/* out */ bool* active) = 0;
+    virtual HRESULT GetScheduledStreamTime (/* in */ BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue* streamTime, /* out */ double* playbackSpeed) = 0;
+    virtual HRESULT GetReferenceStatus (/* out */ BMDReferenceStatus* referenceStatus) = 0;
+
+    /* Hardware Timing */
+
+    virtual HRESULT GetHardwareReferenceClock (/* in */ BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue* hardwareTime, /* out */ BMDTimeValue* timeInFrame, /* out */ BMDTimeValue* ticksPerFrame) = 0;
+    virtual HRESULT GetFrameCompletionReferenceTimestamp (/* in */ IDeckLinkVideoFrame* theFrame, /* in */ BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue* frameCompletionTimestamp) = 0;
+
+protected:
+    virtual ~IDeckLinkOutput_v11_4 () {} // call Release method to drop reference count
+};
+
+#endif /* defined(BMD_DECKLINKAPIVIDEOOUTPUT_v11_4_H) */
diff --git a/DeckLinkSDK/Mac/include/DeckLinkAPI_v10_11.h b/DeckLinkSDK/Mac/include/DeckLinkAPI_v10_11.h
new file mode 100644
index 0000000000..d9ef54e525
--- /dev/null
+++ b/DeckLinkSDK/Mac/include/DeckLinkAPI_v10_11.h
@@ -0,0 +1,135 @@
+/* -LICENSE-START-
+** Copyright (c) 2018 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPI_v10_11_H
+#define BMD_DECKLINKAPI_v10_11_H
+
+#include "DeckLinkAPI.h"
+
+// Interface ID Declarations
+
+BMD_CONST REFIID IID_IDeckLinkAttributes_v10_11                     = /* ABC11843-D966-44CB-96E2-A1CB5D3135C4 */ {0xAB,0xC1,0x18,0x43,0xD9,0x66,0x44,0xCB,0x96,0xE2,0xA1,0xCB,0x5D,0x31,0x35,0xC4};
+BMD_CONST REFIID IID_IDeckLinkNotification_v10_11                   = /* 0A1FB207-E215-441B-9B19-6FA1575946C5 */ {0x0A,0x1F,0xB2,0x07,0xE2,0x15,0x44,0x1B,0x9B,0x19,0x6F,0xA1,0x57,0x59,0x46,0xC5};
+
+/* Enum BMDDisplayModeSupport_v10_11 - Output mode supported flags */
+
+typedef uint32_t BMDDisplayModeSupport_v10_11;
+enum _BMDDisplayModeSupport_v10_11 {
+	bmdDisplayModeNotSupported_v10_11                               = 0,
+	bmdDisplayModeSupported_v10_11,
+	bmdDisplayModeSupportedWithConversion_v10_11
+};
+
+/* Enum BMDDuplexMode_v10_11 - Duplex for configurable ports */
+
+typedef uint32_t BMDDuplexMode_v10_11;
+enum _BMDDuplexMode_v10_11 {
+	bmdDuplexModeFull_v10_11                                        = 'fdup',
+	bmdDuplexModeHalf_v10_11                                        = 'hdup'
+};
+
+/* Enum BMDDeckLinkAttributeID_v10_11 - DeckLink Attribute ID */
+
+enum _BMDDeckLinkAttributeID_v10_11 {
+
+    /* Flags */
+
+    BMDDeckLinkSupportsDuplexModeConfiguration_v10_11               = 'dupx',
+    BMDDeckLinkSupportsHDKeying_v10_11                              = 'keyh',
+
+    /* Integers */
+
+    BMDDeckLinkPairedDevicePersistentID_v10_11                      = 'ppid',
+    BMDDeckLinkSupportsFullDuplex_v10_11                            = 'fdup',
+};
+
+enum  _BMDDeckLinkStatusID_v10_11 {
+    bmdDeckLinkStatusDuplexMode_v10_11                             = 'dupx',
+};
+
+typedef uint32_t BMDDuplexStatus_v10_11;
+enum _BMDDuplexStatus_v10_11 {
+    bmdDuplexFullDuplex_v10_11                                     = 'fdup',
+    bmdDuplexHalfDuplex_v10_11                                     = 'hdup',
+    bmdDuplexSimplex_v10_11                                        = 'splx',
+    bmdDuplexInactive_v10_11                                       = 'inac',
+};
+
+#if defined(__cplusplus)
+
+/* Interface IDeckLinkAttributes_v10_11 - DeckLink Attribute interface */
+
+class BMD_PUBLIC IDeckLinkAttributes_v10_11 : public IUnknown
+{
+public:
+    virtual HRESULT GetFlag (/* in */ BMDDeckLinkAttributeID cfgID, /* out */ bool *value) = 0;
+    virtual HRESULT GetInt (/* in */ BMDDeckLinkAttributeID cfgID, /* out */ int64_t *value) = 0;
+    virtual HRESULT GetFloat (/* in */ BMDDeckLinkAttributeID cfgID, /* out */ double *value) = 0;
+    virtual HRESULT GetString (/* in */ BMDDeckLinkAttributeID cfgID, /* out */ CFStringRef *value) = 0;
+
+protected:
+    virtual ~IDeckLinkAttributes_v10_11 () {} // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkNotification_v10_11 - DeckLink Notification interface */
+
+class BMD_PUBLIC IDeckLinkNotification_v10_11 : public IUnknown
+{
+public:
+    virtual HRESULT Subscribe (/* in */ BMDNotifications topic, /* in */ IDeckLinkNotificationCallback *theCallback) = 0;
+    virtual HRESULT Unsubscribe (/* in */ BMDNotifications topic, /* in */ IDeckLinkNotificationCallback *theCallback) = 0;
+};
+
+/* Functions */
+
+extern "C" {
+
+    IDeckLinkIterator* BMD_PUBLIC CreateDeckLinkIteratorInstance_v10_11 (void);
+    IDeckLinkDiscovery* BMD_PUBLIC CreateDeckLinkDiscoveryInstance_v10_11 (void);
+    IDeckLinkAPIInformation* BMD_PUBLIC CreateDeckLinkAPIInformationInstance_v10_11 (void);
+    IDeckLinkGLScreenPreviewHelper* BMD_PUBLIC CreateOpenGLScreenPreviewHelper_v10_11 (void);
+    IDeckLinkCocoaScreenPreviewCallback* BMD_PUBLIC CreateCocoaScreenPreview_v10_11 (void* /* (NSView*) */ parentView);
+    IDeckLinkVideoConversion* BMD_PUBLIC CreateVideoConversionInstance_v10_11 (void);
+    IDeckLinkVideoFrameAncillaryPackets* BMD_PUBLIC CreateVideoFrameAncillaryPacketsInstance_v10_11 (void); // For use when creating a custom IDeckLinkVideoFrame without wrapping IDeckLinkOutput::CreateVideoFrame
+
+}
+
+#endif      // defined(__cplusplus)
+#endif /* defined(BMD_DECKLINKAPI_v10_11_H) */
diff --git a/DeckLinkSDK/Mac/include/DeckLinkAPI_v10_2.h b/DeckLinkSDK/Mac/include/DeckLinkAPI_v10_2.h
new file mode 100644
index 0000000000..20eedd28cd
--- /dev/null
+++ b/DeckLinkSDK/Mac/include/DeckLinkAPI_v10_2.h
@@ -0,0 +1,68 @@
+/* -LICENSE-START-
+** Copyright (c) 2014 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPI_v10_2_H
+#define BMD_DECKLINKAPI_v10_2_H
+
+#include "DeckLinkAPI.h"
+
+// Type Declarations
+
+/* Enum BMDDeckLinkConfigurationID - DeckLink Configuration ID */
+
+typedef uint32_t BMDDeckLinkConfigurationID_v10_2;
+enum  _BMDDeckLinkConfigurationID_v10_2 {
+    /* Video output flags */
+	
+    bmdDeckLinkConfig3GBpsVideoOutput_v10_2                      = '3gbs',
+};
+
+/* Enum BMDAudioConnection_v10_2 - Audio connection types */
+
+typedef uint32_t BMDAudioConnection_v10_2;
+enum _BMDAudioConnection_v10_2 {
+    bmdAudioConnectionEmbedded_v10_2                             = 'embd',
+    bmdAudioConnectionAESEBU_v10_2                               = 'aes ',
+    bmdAudioConnectionAnalog_v10_2                               = 'anlg',
+    bmdAudioConnectionAnalogXLR_v10_2                            = 'axlr',
+    bmdAudioConnectionAnalogRCA_v10_2                            = 'arca'
+};
+
+#endif /* defined(BMD_DECKLINKAPI_v10_2_H) */
diff --git a/DeckLinkSDK/Mac/include/DeckLinkAPI_v10_4.h b/DeckLinkSDK/Mac/include/DeckLinkAPI_v10_4.h
new file mode 100644
index 0000000000..fa5892dd0a
--- /dev/null
+++ b/DeckLinkSDK/Mac/include/DeckLinkAPI_v10_4.h
@@ -0,0 +1,58 @@
+/* -LICENSE-START-
+** Copyright (c) 2015 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPI_v10_4_H
+#define BMD_DECKLINKAPI_v10_4_H
+
+#include "DeckLinkAPI.h"
+
+// Type Declarations
+
+/* Enum BMDDeckLinkConfigurationID - DeckLink Configuration ID */
+
+typedef uint32_t BMDDeckLinkConfigurationID_v10_4;
+enum _BMDDeckLinkConfigurationID_v10_4 {
+
+    /* Video output flags */
+
+    bmdDeckLinkConfigSingleLinkVideoOutput_v10_4                       = /* 'sglo' */ 0x73676C6F,
+};
+
+#endif /* defined(BMD_DECKLINKAPI_v10_4_H) */
diff --git a/DeckLinkSDK/Mac/include/DeckLinkAPI_v10_5.h b/DeckLinkSDK/Mac/include/DeckLinkAPI_v10_5.h
new file mode 100644
index 0000000000..40ce330f09
--- /dev/null
+++ b/DeckLinkSDK/Mac/include/DeckLinkAPI_v10_5.h
@@ -0,0 +1,59 @@
+/* -LICENSE-START-
+** Copyright (c) 2015 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPI_v10_5_H
+#define BMD_DECKLINKAPI_v10_5_H
+
+#include "DeckLinkAPI.h"
+
+// Type Declarations
+
+/* Enum BMDDeckLinkAttributeID - DeckLink Attribute ID */
+
+typedef uint32_t BMDDeckLinkAttributeID_v10_5;
+enum _BMDDeckLinkAttributeID_v10_5 {
+
+    /* Integers */
+
+    BMDDeckLinkDeviceBusyState_v10_5                             = /* 'dbst' */ 0x64627374,
+};
+
+#endif /* defined(BMD_DECKLINKAPI_v10_5_H) */
+
diff --git a/DeckLinkSDK/Mac/include/DeckLinkAPI_v10_6.h b/DeckLinkSDK/Mac/include/DeckLinkAPI_v10_6.h
new file mode 100644
index 0000000000..67082779d9
--- /dev/null
+++ b/DeckLinkSDK/Mac/include/DeckLinkAPI_v10_6.h
@@ -0,0 +1,64 @@
+/* -LICENSE-START-
+** Copyright (c) 2016 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPI_v10_6_H
+#define BMD_DECKLINKAPI_v10_6_H
+
+#include "DeckLinkAPI.h"
+
+// Type Declarations
+
+/* Enum BMDDeckLinkAttributeID - DeckLink Attribute ID */
+
+typedef uint32_t BMDDeckLinkAttributeID_c10_6;
+enum _BMDDeckLinkAttributeID_v10_6 {
+
+    /* Flags */
+
+    BMDDeckLinkSupportsDesktopDisplay_v10_6                      = 'extd',
+};
+
+typedef uint32_t BMDIdleVideoOutputOperation_v10_6;
+enum _BMDIdleVideoOutputOperation_v10_6 {
+    bmdIdleVideoOutputDesktop_v10_6                              = 'desk'
+};
+
+
+#endif /* defined(BMD_DECKLINKAPI_v10_6_H) */
diff --git a/DeckLinkSDK/Mac/include/DeckLinkAPI_v10_9.h b/DeckLinkSDK/Mac/include/DeckLinkAPI_v10_9.h
new file mode 100644
index 0000000000..8b6b4b208f
--- /dev/null
+++ b/DeckLinkSDK/Mac/include/DeckLinkAPI_v10_9.h
@@ -0,0 +1,58 @@
+/* -LICENSE-START-
+** Copyright (c) 2017 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPI_v10_9_H
+#define BMD_DECKLINKAPI_v10_9_H
+
+#include "DeckLinkAPI.h"
+
+// Type Declarations
+
+/* Enum BMDDeckLinkAttributeID - DeckLink Attribute ID */
+
+typedef uint32_t BMDDeckLinkConfigurationID_v10_9;
+enum _BMDDeckLinkConfigurationID_v10_9 {
+
+    /* Flags */
+
+    bmdDeckLinkConfig1080pNotPsF_v10_9                      = 'fpro',
+};
+
+#endif /* defined(BMD_DECKLINKAPI_v10_9_H) */
diff --git a/DeckLinkSDK/Mac/include/DeckLinkAPI_v11_5.h b/DeckLinkSDK/Mac/include/DeckLinkAPI_v11_5.h
new file mode 100644
index 0000000000..a7115ae336
--- /dev/null
+++ b/DeckLinkSDK/Mac/include/DeckLinkAPI_v11_5.h
@@ -0,0 +1,113 @@
+/* -LICENSE-START-
+** Copyright (c) 2020 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPI_v11_5_H
+#define BMD_DECKLINKAPI_v11_5_H
+
+#include "DeckLinkAPI.h"
+
+BMD_CONST REFIID IID_IDeckLinkVideoFrameMetadataExtensions_v11_5	= /* D5973DC9-6432-46D0-8F0B-2496F8A1238F */ {0xD5,0x97,0x3D,0xC9,0x64,0x32,0x46,0xD0,0x8F,0x0B,0x24,0x96,0xF8,0xA1,0x23,0x8F};
+
+/* Enum BMDDeckLinkFrameMetadataID - DeckLink Frame Metadata ID */
+
+typedef uint32_t BMDDeckLinkFrameMetadataID_v11_5;
+enum _BMDDeckLinkFrameMetadataID_v11_5 {
+    bmdDeckLinkFrameMetadataCintelFilmType_v11_5                       = /* 'cfty' */ 0x63667479,	// Current film type
+    bmdDeckLinkFrameMetadataCintelFilmGauge_v11_5                      = /* 'cfga' */ 0x63666761,	// Current film gauge
+    bmdDeckLinkFrameMetadataCintelKeykodeLow_v11_5                     = /* 'ckkl' */ 0x636B6B6C,	// Raw keykode value - low 64 bits
+    bmdDeckLinkFrameMetadataCintelKeykodeHigh_v11_5                    = /* 'ckkh' */ 0x636B6B68,	// Raw keykode value - high 64 bits
+    bmdDeckLinkFrameMetadataCintelTile1Size_v11_5                      = /* 'ct1s' */ 0x63743173,	// Size in bytes of compressed raw tile 1
+    bmdDeckLinkFrameMetadataCintelTile2Size_v11_5                      = /* 'ct2s' */ 0x63743273,	// Size in bytes of compressed raw tile 2
+    bmdDeckLinkFrameMetadataCintelTile3Size_v11_5                      = /* 'ct3s' */ 0x63743373,	// Size in bytes of compressed raw tile 3
+    bmdDeckLinkFrameMetadataCintelTile4Size_v11_5                      = /* 'ct4s' */ 0x63743473,	// Size in bytes of compressed raw tile 4
+    bmdDeckLinkFrameMetadataCintelImageWidth_v11_5                     = /* 'IWPx' */ 0x49575078,	// Width in pixels of image
+    bmdDeckLinkFrameMetadataCintelImageHeight_v11_5                    = /* 'IHPx' */ 0x49485078,	// Height in pixels of image
+    bmdDeckLinkFrameMetadataCintelLinearMaskingRedInRed_v11_5          = /* 'mrir' */ 0x6D726972,	// Red in red linear masking parameter
+    bmdDeckLinkFrameMetadataCintelLinearMaskingGreenInRed_v11_5        = /* 'mgir' */ 0x6D676972,	// Green in red linear masking parameter
+    bmdDeckLinkFrameMetadataCintelLinearMaskingBlueInRed_v11_5         = /* 'mbir' */ 0x6D626972,	// Blue in red linear masking parameter
+    bmdDeckLinkFrameMetadataCintelLinearMaskingRedInGreen_v11_5        = /* 'mrig' */ 0x6D726967,	// Red in green linear masking parameter
+    bmdDeckLinkFrameMetadataCintelLinearMaskingGreenInGreen_v11_5      = /* 'mgig' */ 0x6D676967,	// Green in green linear masking parameter
+    bmdDeckLinkFrameMetadataCintelLinearMaskingBlueInGreen_v11_5       = /* 'mbig' */ 0x6D626967,	// Blue in green linear masking parameter
+    bmdDeckLinkFrameMetadataCintelLinearMaskingRedInBlue_v11_5         = /* 'mrib' */ 0x6D726962,	// Red in blue linear masking parameter
+    bmdDeckLinkFrameMetadataCintelLinearMaskingGreenInBlue_v11_5       = /* 'mgib' */ 0x6D676962,	// Green in blue linear masking parameter
+    bmdDeckLinkFrameMetadataCintelLinearMaskingBlueInBlue_v11_5        = /* 'mbib' */ 0x6D626962,	// Blue in blue linear masking parameter
+    bmdDeckLinkFrameMetadataCintelLogMaskingRedInRed_v11_5             = /* 'mlrr' */ 0x6D6C7272,	// Red in red log masking parameter
+    bmdDeckLinkFrameMetadataCintelLogMaskingGreenInRed_v11_5           = /* 'mlgr' */ 0x6D6C6772,	// Green in red log masking parameter
+    bmdDeckLinkFrameMetadataCintelLogMaskingBlueInRed_v11_5            = /* 'mlbr' */ 0x6D6C6272,	// Blue in red log masking parameter
+    bmdDeckLinkFrameMetadataCintelLogMaskingRedInGreen_v11_5           = /* 'mlrg' */ 0x6D6C7267,	// Red in green log masking parameter
+    bmdDeckLinkFrameMetadataCintelLogMaskingGreenInGreen_v11_5         = /* 'mlgg' */ 0x6D6C6767,	// Green in green log masking parameter
+    bmdDeckLinkFrameMetadataCintelLogMaskingBlueInGreen_v11_5          = /* 'mlbg' */ 0x6D6C6267,	// Blue in green log masking parameter
+    bmdDeckLinkFrameMetadataCintelLogMaskingRedInBlue_v11_5            = /* 'mlrb' */ 0x6D6C7262,	// Red in blue log masking parameter
+    bmdDeckLinkFrameMetadataCintelLogMaskingGreenInBlue_v11_5          = /* 'mlgb' */ 0x6D6C6762,	// Green in blue log masking parameter
+    bmdDeckLinkFrameMetadataCintelLogMaskingBlueInBlue_v11_5           = /* 'mlbb' */ 0x6D6C6262,	// Blue in blue log masking parameter
+    bmdDeckLinkFrameMetadataCintelFilmFrameRate_v11_5                  = /* 'cffr' */ 0x63666672,	// Film frame rate
+    bmdDeckLinkFrameMetadataCintelOffsetToApplyHorizontal_v11_5        = /* 'otah' */ 0x6F746168,	// Horizontal offset (pixels) to be applied to image
+    bmdDeckLinkFrameMetadataCintelOffsetToApplyVertical_v11_5          = /* 'otav' */ 0x6F746176,	// Vertical offset (pixels) to be applied to image
+    bmdDeckLinkFrameMetadataCintelGainRed_v11_5                        = /* 'LfRd' */ 0x4C665264,	// Red gain parameter to apply after log
+    bmdDeckLinkFrameMetadataCintelGainGreen_v11_5                      = /* 'LfGr' */ 0x4C664772,	// Green gain parameter to apply after log
+    bmdDeckLinkFrameMetadataCintelGainBlue_v11_5                       = /* 'LfBl' */ 0x4C66426C,	// Blue gain parameter to apply after log
+    bmdDeckLinkFrameMetadataCintelLiftRed_v11_5                        = /* 'GnRd' */ 0x476E5264,	// Red lift parameter to apply after log and gain
+    bmdDeckLinkFrameMetadataCintelLiftGreen_v11_5                      = /* 'GnGr' */ 0x476E4772,	// Green lift parameter to apply after log and gain
+    bmdDeckLinkFrameMetadataCintelLiftBlue_v11_5                       = /* 'GnBl' */ 0x476E426C,	// Blue lift parameter to apply after log and gain
+    bmdDeckLinkFrameMetadataCintelHDRGainRed_v11_5                     = /* 'HGRd' */ 0x48475264,	// Red gain parameter to apply to linear data for HDR Combination
+    bmdDeckLinkFrameMetadataCintelHDRGainGreen_v11_5                   = /* 'HGGr' */ 0x48474772,	// Green gain parameter to apply to linear data for HDR Combination
+    bmdDeckLinkFrameMetadataCintelHDRGainBlue_v11_5                    = /* 'HGBl' */ 0x4847426C,	// Blue gain parameter to apply to linear data for HDR Combination
+	bmdDeckLinkFrameMetadataCintel16mmCropRequired_v11_5               = /* 'c16c' */ 0x63313663,	// The image should be cropped to 16mm size
+    bmdDeckLinkFrameMetadataCintelInversionRequired_v11_5              = /* 'cinv' */ 0x63696E76,	// The image should be colour inverted
+    bmdDeckLinkFrameMetadataCintelFlipRequired_v11_5                   = /* 'cflr' */ 0x63666C72,	// The image should be flipped horizontally
+    bmdDeckLinkFrameMetadataCintelFocusAssistEnabled_v11_5             = /* 'cfae' */ 0x63666165,	// Focus Assist is currently enabled
+    bmdDeckLinkFrameMetadataCintelKeykodeIsInterpolated_v11_5          = /* 'kkii' */ 0x6B6B6969	// The keykode for this frame is interpolated from nearby keykodes
+};
+
+/* Interface IDeckLinkVideoFrameMetadataExtensions - Optional interface implemented on IDeckLinkVideoFrame to support frame metadata such as HDMI HDR information */
+
+class BMD_PUBLIC IDeckLinkVideoFrameMetadataExtensions_v11_5 : public IUnknown
+{
+public:
+    virtual HRESULT GetInt (/* in */ BMDDeckLinkFrameMetadataID_v11_5 metadataID, /* out */ int64_t *value) = 0;
+    virtual HRESULT GetFloat (/* in */ BMDDeckLinkFrameMetadataID_v11_5 metadataID, /* out */ double *value) = 0;
+    virtual HRESULT GetFlag (/* in */ BMDDeckLinkFrameMetadataID_v11_5 metadataID, /* out */ bool *value) = 0;
+    virtual HRESULT GetString (/* in */ BMDDeckLinkFrameMetadataID_v11_5 metadataID, /* out */ CFStringRef *value) = 0;
+
+protected:
+    virtual ~IDeckLinkVideoFrameMetadataExtensions_v11_5 () {} // call Release method to drop reference count
+};
+
+#endif /* defined(BMD_DECKLINKAPI_v11_5_H) */
diff --git a/DeckLinkSDK/Mac/include/DeckLinkAPI_v11_5_1.h b/DeckLinkSDK/Mac/include/DeckLinkAPI_v11_5_1.h
new file mode 100644
index 0000000000..a406f000e1
--- /dev/null
+++ b/DeckLinkSDK/Mac/include/DeckLinkAPI_v11_5_1.h
@@ -0,0 +1,57 @@
+/* -LICENSE-START-
+** Copyright (c) 2020 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPI_v11_5_1_H
+#define BMD_DECKLINKAPI_v11_5_1_H
+
+#include "DeckLinkAPI.h"
+
+/* Enum BMDDeckLinkStatusID - DeckLink Status ID */
+
+typedef uint32_t BMDDeckLinkStatusID_v11_5_1;
+enum _BMDDeckLinkStatusID_v11_5_1 {
+
+    /* Video output flags */
+
+    bmdDeckLinkStatusDetectedVideoInputFlags_v11_5_1                     = /* 'dvif' */ 0x64766966,
+
+};
+
+#endif /* defined(BMD_DECKLINKAPI_v11_5_1_H) */
diff --git a/DeckLinkSDK/Mac/include/DeckLinkAPI_v7_1.h b/DeckLinkSDK/Mac/include/DeckLinkAPI_v7_1.h
new file mode 100644
index 0000000000..5f4f135331
--- /dev/null
+++ b/DeckLinkSDK/Mac/include/DeckLinkAPI_v7_1.h
@@ -0,0 +1,212 @@
+/* -LICENSE-START-
+** Copyright (c) 2009 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+/* DeckLinkAPI_v7_1.h */
+
+#ifndef __DeckLink_API_v7_1_h__
+#define __DeckLink_API_v7_1_h__
+
+#include "DeckLinkAPI.h"
+#include "DeckLinkAPI_v10_11.h"
+
+// "B28131B6-59AC-4857-B5AC-CD75D5883E2F"
+#define IID_IDeckLinkDisplayModeIterator_v7_1	(REFIID){0xB2,0x81,0x31,0xB6,0x59,0xAC,0x48,0x57,0xB5,0xAC,0xCD,0x75,0xD5,0x88,0x3E,0x2F}
+
+// "AF0CD6D5-8376-435E-8433-54F9DD530AC3"
+#define IID_IDeckLinkDisplayMode_v7_1			(REFIID){0xAF,0x0C,0xD6,0xD5,0x83,0x76,0x43,0x5E,0x84,0x33,0x54,0xF9,0xDD,0x53,0x0A,0xC3}
+
+// "EBD01AFA-E4B0-49C6-A01D-EDB9D1B55FD9"
+#define IID_IDeckLinkVideoOutputCallback_v7_1	(REFIID){0xEB,0xD0,0x1A,0xFA,0xE4,0xB0,0x49,0xC6,0xA0,0x1D,0xED,0xB9,0xD1,0xB5,0x5F,0xD9}
+
+// "7F94F328-5ED4-4E9F-9729-76A86BDC99CC"
+#define IID_IDeckLinkInputCallback_v7_1			(REFIID){0x7F,0x94,0xF3,0x28,0x5E,0xD4,0x4E,0x9F,0x97,0x29,0x76,0xA8,0x6B,0xDC,0x99,0xCC}
+
+// "AE5B3E9B-4E1E-4535-B6E8-480FF52F6CE5"
+#define IID_IDeckLinkOutput_v7_1				(REFIID){0xAE,0x5B,0x3E,0x9B,0x4E,0x1E,0x45,0x35,0xB6,0xE8,0x48,0x0F,0xF5,0x2F,0x6C,0xE5}
+
+// "2B54EDEF-5B32-429F-BA11-BB990596EACD"
+#define IID_IDeckLinkInput_v7_1					(REFIID){0x2B,0x54,0xED,0xEF,0x5B,0x32,0x42,0x9F,0xBA,0x11,0xBB,0x99,0x05,0x96,0xEA,0xCD}
+
+// "333F3A10-8C2D-43CF-B79D-46560FEEA1CE"
+#define IID_IDeckLinkVideoFrame_v7_1			(REFIID){0x33,0x3F,0x3A,0x10,0x8C,0x2D,0x43,0xCF,0xB7,0x9D,0x46,0x56,0x0F,0xEE,0xA1,0xCE}
+
+// "C8B41D95-8848-40EE-9B37-6E3417FB114B"
+#define IID_IDeckLinkVideoInputFrame_v7_1		(REFIID){0xC8,0xB4,0x1D,0x95,0x88,0x48,0x40,0xEE,0x9B,0x37,0x6E,0x34,0x17,0xFB,0x11,0x4B}
+
+// "C86DE4F6-A29F-42E3-AB3A-1363E29F0788"
+#define IID_IDeckLinkAudioInputPacket_v7_1		(REFIID){0xC8,0x6D,0xE4,0xF6,0xA2,0x9F,0x42,0xE3,0xAB,0x3A,0x13,0x63,0xE2,0x9F,0x07,0x88}
+
+#if defined(__cplusplus)
+
+class IDeckLinkVideoFrame_v7_1;
+class IDeckLinkDisplayModeIterator_v7_1;
+class IDeckLinkDisplayMode_v7_1;
+class IDeckLinkVideoInputFrame_v7_1;
+class IDeckLinkAudioInputPacket_v7_1;
+
+class IDeckLinkDisplayModeIterator_v7_1 : public IUnknown
+{
+public:
+	virtual	HRESULT	STDMETHODCALLTYPE	Next (IDeckLinkDisplayMode_v7_1* *deckLinkDisplayMode) = 0;
+};
+
+
+class IDeckLinkDisplayMode_v7_1 : public IUnknown
+{
+public:
+	virtual	HRESULT			STDMETHODCALLTYPE	GetName (CFStringRef* name) = 0;
+	virtual	BMDDisplayMode	STDMETHODCALLTYPE	GetDisplayMode () = 0;
+	virtual	long			STDMETHODCALLTYPE	GetWidth () = 0;
+	virtual	long			STDMETHODCALLTYPE	GetHeight () = 0;
+	virtual	HRESULT			STDMETHODCALLTYPE	GetFrameRate (BMDTimeValue *frameDuration, BMDTimeScale *timeScale) = 0;
+};
+
+class IDeckLinkVideoOutputCallback_v7_1 : public IUnknown
+{
+public:
+	virtual HRESULT STDMETHODCALLTYPE	ScheduledFrameCompleted (IDeckLinkVideoFrame_v7_1* completedFrame, BMDOutputFrameCompletionResult result) = 0;
+};
+
+class IDeckLinkInputCallback_v7_1 : public IUnknown
+{
+public:
+	virtual HRESULT STDMETHODCALLTYPE	VideoInputFrameArrived (IDeckLinkVideoInputFrame_v7_1* videoFrame, IDeckLinkAudioInputPacket_v7_1* audioPacket) = 0;
+};
+
+// IDeckLinkOutput_v7_1.  Created by QueryInterface from IDeckLink.
+class IDeckLinkOutput_v7_1 : public IUnknown
+{
+public:
+	// Display mode predicates
+	virtual	HRESULT	STDMETHODCALLTYPE	DoesSupportVideoMode (BMDDisplayMode displayMode, BMDPixelFormat pixelFormat, BMDDisplayModeSupport_v10_11 *result) = 0;
+	virtual HRESULT	STDMETHODCALLTYPE	GetDisplayModeIterator (IDeckLinkDisplayModeIterator_v7_1* *iterator) = 0;
+	
+	
+	// Video output
+	virtual HRESULT STDMETHODCALLTYPE	EnableVideoOutput (BMDDisplayMode displayMode) = 0;
+	virtual HRESULT STDMETHODCALLTYPE	DisableVideoOutput () = 0;
+	
+	virtual HRESULT STDMETHODCALLTYPE	SetVideoOutputFrameMemoryAllocator (IDeckLinkMemoryAllocator* theAllocator) = 0;
+	virtual HRESULT STDMETHODCALLTYPE	CreateVideoFrame (int32_t width, int32_t height, int32_t rowBytes, BMDPixelFormat pixelFormat, BMDFrameFlags flags, IDeckLinkVideoFrame_v7_1* *outFrame) = 0;
+	virtual HRESULT STDMETHODCALLTYPE	CreateVideoFrameFromBuffer (void* buffer, int32_t width, int32_t height, int32_t rowBytes, BMDPixelFormat pixelFormat, BMDFrameFlags flags, IDeckLinkVideoFrame_v7_1* *outFrame) = 0;
+	
+	virtual HRESULT STDMETHODCALLTYPE	DisplayVideoFrameSync (IDeckLinkVideoFrame_v7_1* theFrame) = 0;
+	virtual HRESULT STDMETHODCALLTYPE	ScheduleVideoFrame (IDeckLinkVideoFrame_v7_1* theFrame, BMDTimeValue displayTime, BMDTimeValue displayDuration, BMDTimeScale timeScale) = 0;
+	virtual HRESULT STDMETHODCALLTYPE	SetScheduledFrameCompletionCallback (IDeckLinkVideoOutputCallback_v7_1* theCallback) = 0;
+	
+	
+	// Audio output
+	virtual HRESULT STDMETHODCALLTYPE	EnableAudioOutput (BMDAudioSampleRate sampleRate, BMDAudioSampleType sampleType, uint32_t channelCount) = 0;
+	virtual HRESULT STDMETHODCALLTYPE	DisableAudioOutput () = 0;
+	
+	virtual HRESULT STDMETHODCALLTYPE	WriteAudioSamplesSync (void* buffer, uint32_t sampleFrameCount, uint32_t *sampleFramesWritten) = 0;
+	
+	virtual HRESULT STDMETHODCALLTYPE	BeginAudioPreroll () = 0;
+	virtual HRESULT STDMETHODCALLTYPE	EndAudioPreroll () = 0;
+	virtual HRESULT STDMETHODCALLTYPE	ScheduleAudioSamples (void* buffer, uint32_t sampleFrameCount, BMDTimeValue streamTime, BMDTimeScale timeScale, uint32_t *sampleFramesWritten) = 0;
+	
+	virtual HRESULT STDMETHODCALLTYPE	GetBufferedAudioSampleFrameCount (uint32_t *bufferedSampleCount) = 0;
+	virtual HRESULT STDMETHODCALLTYPE	FlushBufferedAudioSamples () = 0;
+	
+	virtual HRESULT STDMETHODCALLTYPE	SetAudioCallback (IDeckLinkAudioOutputCallback* theCallback) = 0;
+	
+	
+	// Output control
+	virtual HRESULT STDMETHODCALLTYPE	StartScheduledPlayback (BMDTimeValue playbackStartTime, BMDTimeScale timeScale, double playbackSpeed) = 0;
+	virtual HRESULT STDMETHODCALLTYPE	StopScheduledPlayback (BMDTimeValue stopPlaybackAtTime, BMDTimeValue *actualStopTime, BMDTimeScale timeScale) = 0;
+	virtual HRESULT STDMETHODCALLTYPE	GetHardwareReferenceClock (BMDTimeScale desiredTimeScale, BMDTimeValue *elapsedTimeSinceSchedulerBegan) = 0;
+};
+
+// IDeckLinkInput_v7_1.  Created by QueryInterface from IDeckLink.
+class IDeckLinkInput_v7_1 : public IUnknown
+{
+public:
+	virtual	HRESULT	STDMETHODCALLTYPE	DoesSupportVideoMode (BMDDisplayMode displayMode, BMDPixelFormat pixelFormat, BMDDisplayModeSupport_v10_11 *result) = 0;
+	virtual HRESULT	STDMETHODCALLTYPE	GetDisplayModeIterator (IDeckLinkDisplayModeIterator_v7_1 **iterator) = 0;
+	
+	// Video input
+	virtual HRESULT STDMETHODCALLTYPE	EnableVideoInput (BMDDisplayMode displayMode, BMDPixelFormat pixelFormat, BMDVideoInputFlags flags) = 0;
+	virtual HRESULT STDMETHODCALLTYPE	DisableVideoInput () = 0;
+	
+	// Audio input
+	virtual HRESULT STDMETHODCALLTYPE	EnableAudioInput (BMDAudioSampleRate sampleRate, BMDAudioSampleType sampleType, uint32_t channelCount) = 0;
+	virtual HRESULT STDMETHODCALLTYPE	DisableAudioInput () = 0;
+	virtual HRESULT STDMETHODCALLTYPE	ReadAudioSamples (void* buffer, uint32_t sampleFrameCount, uint32_t *sampleFramesRead, BMDTimeValue *audioPacketTime, BMDTimeScale timeScale) = 0;
+	virtual HRESULT STDMETHODCALLTYPE	GetBufferedAudioSampleFrameCount (uint32_t *bufferedSampleCount) = 0;
+	
+	// Input control
+	virtual HRESULT	STDMETHODCALLTYPE	StartStreams () = 0;
+	virtual HRESULT	STDMETHODCALLTYPE	StopStreams () = 0;
+	virtual HRESULT	STDMETHODCALLTYPE	PauseStreams () = 0;
+	virtual HRESULT STDMETHODCALLTYPE	SetCallback (IDeckLinkInputCallback_v7_1* theCallback) = 0;
+};
+
+// IDeckLinkVideoFrame_v7_1.  Created by IDeckLinkOutput::CreateVideoFrame.
+class IDeckLinkVideoFrame_v7_1 : public IUnknown
+{
+public:
+	virtual long STDMETHODCALLTYPE					GetWidth () = 0;
+	virtual long STDMETHODCALLTYPE					GetHeight () = 0;
+	virtual long STDMETHODCALLTYPE					GetRowBytes () = 0;
+	virtual BMDPixelFormat STDMETHODCALLTYPE		GetPixelFormat () = 0;
+	virtual BMDFrameFlags STDMETHODCALLTYPE			GetFlags () = 0;
+	virtual HRESULT STDMETHODCALLTYPE				GetBytes (void* *buffer) = 0;
+};
+
+// IDeckLinkVideoInputFrame_v7_1.  Provided by the IDeckLinkInput_v7_1 frame arrival callback.
+class IDeckLinkVideoInputFrame_v7_1 : public IDeckLinkVideoFrame_v7_1
+{
+public:
+	virtual HRESULT STDMETHODCALLTYPE			GetFrameTime (BMDTimeValue *frameTime, BMDTimeValue *frameDuration, BMDTimeScale timeScale) = 0;
+};
+
+// IDeckLinkAudioInputPacket_v7_1.  Provided by the IDeckLinkInput_v7_1 callback.
+class IDeckLinkAudioInputPacket_v7_1 : public IUnknown
+{
+public:
+	virtual long STDMETHODCALLTYPE				GetSampleCount () = 0;
+	virtual HRESULT STDMETHODCALLTYPE			GetBytes (void* *buffer) = 0;
+	
+	virtual HRESULT STDMETHODCALLTYPE			GetAudioPacketTime (BMDTimeValue *packetTime, BMDTimeScale timeScale) = 0;
+};
+
+#endif		// defined(__cplusplus)
+
+#endif		// __DeckLink_API_v7_1_h__
+
diff --git a/DeckLinkSDK/Mac/include/DeckLinkAPI_v7_3.h b/DeckLinkSDK/Mac/include/DeckLinkAPI_v7_3.h
new file mode 100644
index 0000000000..8634e9c809
--- /dev/null
+++ b/DeckLinkSDK/Mac/include/DeckLinkAPI_v7_3.h
@@ -0,0 +1,186 @@
+/* -LICENSE-START-
+** Copyright (c) 2009 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+/* DeckLinkAPI_v7_3.h */
+
+#ifndef __DeckLink_API_v7_3_h__
+#define __DeckLink_API_v7_3_h__
+
+#include "DeckLinkAPI.h"
+#include "DeckLinkAPI_v7_6.h"
+
+/* Interface ID Declarations */
+
+#define IID_IDeckLinkInputCallback_v7_3                  /* FD6F311D-4D00-444B-9ED4-1F25B5730AD0 */ (REFIID){0xFD,0x6F,0x31,0x1D,0x4D,0x00,0x44,0x4B,0x9E,0xD4,0x1F,0x25,0xB5,0x73,0x0A,0xD0}
+#define IID_IDeckLinkOutput_v7_3                         /* 271C65E3-C323-4344-A30F-D908BCB20AA3 */ (REFIID){0x27,0x1C,0x65,0xE3,0xC3,0x23,0x43,0x44,0xA3,0x0F,0xD9,0x08,0xBC,0xB2,0x0A,0xA3}
+#define IID_IDeckLinkInput_v7_3                          /* 4973F012-9925-458C-871C-18774CDBBECB */ (REFIID){0x49,0x73,0xF0,0x12,0x99,0x25,0x45,0x8C,0x87,0x1C,0x18,0x77,0x4C,0xDB,0xBE,0xCB}
+#define IID_IDeckLinkVideoInputFrame_v7_3                /* CF317790-2894-11DE-8C30-0800200C9A66 */ (REFIID){0xCF,0x31,0x77,0x90,0x28,0x94,0x11,0xDE,0x8C,0x30,0x08,0x00,0x20,0x0C,0x9A,0x66}
+
+/* End Interface ID Declarations */
+
+#if defined(__cplusplus)
+
+/* Forward Declarations */
+
+class IDeckLinkVideoInputFrame_v7_3;
+
+/* End Forward Declarations */
+
+
+/* Interface IDeckLinkOutput - Created by QueryInterface from IDeckLink. */
+
+class IDeckLinkOutput_v7_3 : public IUnknown
+{
+public:
+    virtual HRESULT DoesSupportVideoMode (BMDDisplayMode displayMode, BMDPixelFormat pixelFormat, /* out */ BMDDisplayModeSupport_v10_11 *result) = 0;
+    virtual HRESULT GetDisplayModeIterator (/* out */ IDeckLinkDisplayModeIterator_v7_6 **iterator) = 0;
+
+    virtual HRESULT SetScreenPreviewCallback (/* in */ IDeckLinkScreenPreviewCallback *previewCallback) = 0;
+
+    /* Video Output */
+
+    virtual HRESULT EnableVideoOutput (BMDDisplayMode displayMode, BMDVideoOutputFlags flags) = 0;
+    virtual HRESULT DisableVideoOutput (void) = 0;
+
+    virtual HRESULT SetVideoOutputFrameMemoryAllocator (/* in */ IDeckLinkMemoryAllocator *theAllocator) = 0;
+    virtual HRESULT CreateVideoFrame (int32_t width, int32_t height, int32_t rowBytes, BMDPixelFormat pixelFormat, BMDFrameFlags flags, /* out */ IDeckLinkMutableVideoFrame_v7_6 **outFrame) = 0;
+    virtual HRESULT CreateAncillaryData (BMDPixelFormat pixelFormat, /* out */ IDeckLinkVideoFrameAncillary **outBuffer) = 0;
+
+    virtual HRESULT DisplayVideoFrameSync (/* in */ IDeckLinkVideoFrame_v7_6 *theFrame) = 0;
+    virtual HRESULT ScheduleVideoFrame (/* in */ IDeckLinkVideoFrame_v7_6 *theFrame, BMDTimeValue displayTime, BMDTimeValue displayDuration, BMDTimeScale timeScale) = 0;
+    virtual HRESULT SetScheduledFrameCompletionCallback (/* in */ IDeckLinkVideoOutputCallback *theCallback) = 0;
+    virtual HRESULT GetBufferedVideoFrameCount (/* out */ uint32_t *bufferedFrameCount) = 0;
+
+    /* Audio Output */
+
+    virtual HRESULT EnableAudioOutput (BMDAudioSampleRate sampleRate, BMDAudioSampleType sampleType, uint32_t channelCount, BMDAudioOutputStreamType streamType) = 0;
+    virtual HRESULT DisableAudioOutput (void) = 0;
+
+    virtual HRESULT WriteAudioSamplesSync (/* in */ void *buffer, uint32_t sampleFrameCount, /* out */ uint32_t *sampleFramesWritten) = 0;
+
+    virtual HRESULT BeginAudioPreroll (void) = 0;
+    virtual HRESULT EndAudioPreroll (void) = 0;
+    virtual HRESULT ScheduleAudioSamples (/* in */ void *buffer, uint32_t sampleFrameCount, BMDTimeValue streamTime, BMDTimeScale timeScale, /* out */ uint32_t *sampleFramesWritten) = 0;
+
+    virtual HRESULT GetBufferedAudioSampleFrameCount (/* out */ uint32_t *bufferedSampleFrameCount) = 0;
+    virtual HRESULT FlushBufferedAudioSamples (void) = 0;
+
+    virtual HRESULT SetAudioCallback (/* in */ IDeckLinkAudioOutputCallback *theCallback) = 0;
+
+    /* Output Control */
+
+    virtual HRESULT StartScheduledPlayback (BMDTimeValue playbackStartTime, BMDTimeScale timeScale, double playbackSpeed) = 0;
+    virtual HRESULT StopScheduledPlayback (BMDTimeValue stopPlaybackAtTime, /* out */ BMDTimeValue *actualStopTime, BMDTimeScale timeScale) = 0;
+    virtual HRESULT IsScheduledPlaybackRunning (/* out */ bool *active) = 0;
+    virtual HRESULT GetHardwareReferenceClock (BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue *elapsedTimeSinceSchedulerBegan) = 0;
+
+protected:
+    virtual ~IDeckLinkOutput_v7_3 () {}; // call Release method to drop reference count
+};
+
+/* End Interface IDeckLinkOutput */
+
+
+/* Interface IDeckLinkInputCallback - Frame arrival callback. */
+
+class IDeckLinkInputCallback_v7_3 : public IUnknown
+{
+public:
+    virtual HRESULT VideoInputFormatChanged (/* in */ BMDVideoInputFormatChangedEvents notificationEvents, /* in */ IDeckLinkDisplayMode_v7_6 *newDisplayMode, /* in */ BMDDetectedVideoInputFormatFlags detectedSignalFlags) = 0;
+    virtual HRESULT VideoInputFrameArrived (/* in */ IDeckLinkVideoInputFrame_v7_3 *videoFrame, /* in */ IDeckLinkAudioInputPacket *audioPacket) = 0;
+
+protected:
+    virtual ~IDeckLinkInputCallback_v7_3 () {}; // call Release method to drop reference count
+};
+
+/* End Interface IDeckLinkInputCallback */
+
+
+/* Interface IDeckLinkInput - Created by QueryInterface from IDeckLink. */
+
+class IDeckLinkInput_v7_3 : public IUnknown
+{
+public:
+    virtual HRESULT DoesSupportVideoMode (BMDDisplayMode displayMode, BMDPixelFormat pixelFormat, /* out */ BMDDisplayModeSupport_v10_11 *result) = 0;
+    virtual HRESULT GetDisplayModeIterator (/* out */ IDeckLinkDisplayModeIterator_v7_6 **iterator) = 0;
+
+    virtual HRESULT SetScreenPreviewCallback (/* in */ IDeckLinkScreenPreviewCallback *previewCallback) = 0;
+
+    /* Video Input */
+
+    virtual HRESULT EnableVideoInput (BMDDisplayMode displayMode, BMDPixelFormat pixelFormat, BMDVideoInputFlags flags) = 0;
+    virtual HRESULT DisableVideoInput (void) = 0;
+    virtual HRESULT GetAvailableVideoFrameCount (/* out */ uint32_t *availableFrameCount) = 0;
+
+    /* Audio Input */
+
+    virtual HRESULT EnableAudioInput (BMDAudioSampleRate sampleRate, BMDAudioSampleType sampleType, uint32_t channelCount) = 0;
+    virtual HRESULT DisableAudioInput (void) = 0;
+    virtual HRESULT GetAvailableAudioSampleFrameCount (/* out */ uint32_t *availableSampleFrameCount) = 0;
+
+    /* Input Control */
+
+    virtual HRESULT StartStreams (void) = 0;
+    virtual HRESULT StopStreams (void) = 0;
+    virtual HRESULT PauseStreams (void) = 0;
+    virtual HRESULT FlushStreams (void) = 0;
+    virtual HRESULT SetCallback (/* in */ IDeckLinkInputCallback_v7_3 *theCallback) = 0;
+
+protected:
+    virtual ~IDeckLinkInput_v7_3 () {}; // call Release method to drop reference count
+};
+
+/* End Interface IDeckLinkInput */
+
+/* Interface IDeckLinkVideoInputFrame - Provided by the IDeckLinkVideoInput frame arrival callback. */
+
+class IDeckLinkVideoInputFrame_v7_3 : public IDeckLinkVideoFrame_v7_6
+{
+public:
+    virtual HRESULT GetStreamTime (/* out */ BMDTimeValue *frameTime, /* out */ BMDTimeValue *frameDuration, BMDTimeScale timeScale) = 0;
+
+protected:
+    virtual ~IDeckLinkVideoInputFrame_v7_3 () {}; // call Release method to drop reference count
+};
+
+/* End Interface IDeckLinkVideoInputFrame */
+
+#endif      // defined(__cplusplus)
+#endif      // __DeckLink_API_v7_3_h__
diff --git a/DeckLinkSDK/Mac/include/DeckLinkAPI_v7_6.h b/DeckLinkSDK/Mac/include/DeckLinkAPI_v7_6.h
new file mode 100644
index 0000000000..df9e00712c
--- /dev/null
+++ b/DeckLinkSDK/Mac/include/DeckLinkAPI_v7_6.h
@@ -0,0 +1,435 @@
+/* -LICENSE-START-
+** Copyright (c) 2009 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+/* DeckLinkAPI_v7_6.h */
+
+#ifndef __DeckLink_API_v7_6_h__
+#define __DeckLink_API_v7_6_h__
+
+#include "DeckLinkAPI.h"
+#include "DeckLinkAPI_v10_11.h"
+
+// Interface ID Declarations
+
+#define IID_IDeckLinkVideoOutputCallback_v7_6            /* E763A626-4A3C-49D1-BF13-E7AD3692AE52 */ (REFIID){0xE7,0x63,0xA6,0x26,0x4A,0x3C,0x49,0xD1,0xBF,0x13,0xE7,0xAD,0x36,0x92,0xAE,0x52}
+#define IID_IDeckLinkInputCallback_v7_6                  /* 31D28EE7-88B6-4CB1-897A-CDBF79A26414 */ (REFIID){0x31,0xD2,0x8E,0xE7,0x88,0xB6,0x4C,0xB1,0x89,0x7A,0xCD,0xBF,0x79,0xA2,0x64,0x14}
+#define IID_IDeckLinkDisplayModeIterator_v7_6            /* 455D741F-1779-4800-86F5-0B5D13D79751 */ (REFIID){0x45,0x5D,0x74,0x1F,0x17,0x79,0x48,0x00,0x86,0xF5,0x0B,0x5D,0x13,0xD7,0x97,0x51}
+#define IID_IDeckLinkDisplayMode_v7_6                    /* 87451E84-2B7E-439E-A629-4393EA4A8550 */ (REFIID){0x87,0x45,0x1E,0x84,0x2B,0x7E,0x43,0x9E,0xA6,0x29,0x43,0x93,0xEA,0x4A,0x85,0x50}
+#define IID_IDeckLinkOutput_v7_6                         /* 29228142-EB8C-4141-A621-F74026450955 */ (REFIID){0x29,0x22,0x81,0x42,0xEB,0x8C,0x41,0x41,0xA6,0x21,0xF7,0x40,0x26,0x45,0x09,0x55}
+#define IID_IDeckLinkInput_v7_6                          /* 300C135A-9F43-48E2-9906-6D7911D93CF1 */ (REFIID){0x30,0x0C,0x13,0x5A,0x9F,0x43,0x48,0xE2,0x99,0x06,0x6D,0x79,0x11,0xD9,0x3C,0xF1}
+#define IID_IDeckLinkTimecode_v7_6                       /* EFB9BCA6-A521-44F7-BD69-2332F24D9EE6 */ (REFIID){0xEF,0xB9,0xBC,0xA6,0xA5,0x21,0x44,0xF7,0xBD,0x69,0x23,0x32,0xF2,0x4D,0x9E,0xE6}
+#define IID_IDeckLinkVideoFrame_v7_6                     /* A8D8238E-6B18-4196-99E1-5AF717B83D32 */ (REFIID){0xA8,0xD8,0x23,0x8E,0x6B,0x18,0x41,0x96,0x99,0xE1,0x5A,0xF7,0x17,0xB8,0x3D,0x32}
+#define IID_IDeckLinkMutableVideoFrame_v7_6              /* 46FCEE00-B4E6-43D0-91C0-023A7FCEB34F */ (REFIID){0x46,0xFC,0xEE,0x00,0xB4,0xE6,0x43,0xD0,0x91,0xC0,0x02,0x3A,0x7F,0xCE,0xB3,0x4F}
+#define IID_IDeckLinkVideoInputFrame_v7_6                /* 9A74FA41-AE9F-47AC-8CF4-01F42DD59965 */ (REFIID){0x9A,0x74,0xFA,0x41,0xAE,0x9F,0x47,0xAC,0x8C,0xF4,0x01,0xF4,0x2D,0xD5,0x99,0x65}
+#define IID_IDeckLinkScreenPreviewCallback_v7_6          /* 373F499D-4B4D-4518-AD22-6354E5A5825E */ (REFIID){0x37,0x3F,0x49,0x9D,0x4B,0x4D,0x45,0x18,0xAD,0x22,0x63,0x54,0xE5,0xA5,0x82,0x5E}
+#define IID_IDeckLinkCocoaScreenPreviewCallback_v7_6     /* D174152F-8F96-4C07-83A5-DD5F5AF0A2AA */ (REFIID){0xD1,0x74,0x15,0x2F,0x8F,0x96,0x4C,0x07,0x83,0xA5,0xDD,0x5F,0x5A,0xF0,0xA2,0xAA}
+#define IID_IDeckLinkGLScreenPreviewHelper_v7_6          /* BA575CD9-A15E-497B-B2C2-F9AFE7BE4EBA */ (REFIID){0xBA,0x57,0x5C,0xD9,0xA1,0x5E,0x49,0x7B,0xB2,0xC2,0xF9,0xAF,0xE7,0xBE,0x4E,0xBA}
+#define IID_IDeckLinkVideoConversion_v7_6                /* 3EB504C9-F97D-40FE-A158-D407D48CB53B */ (REFIID){0x3E,0xB5,0x04,0xC9,0xF9,0x7D,0x40,0xFE,0xA1,0x58,0xD4,0x07,0xD4,0x8C,0xB5,0x3B}
+#define IID_IDeckLinkConfiguration_v7_6                  /* B8EAD569-B764-47F0-A73F-AE40DF6CBF10 */ (REFIID){0xB8,0xEA,0xD5,0x69,0xB7,0x64,0x47,0xF0,0xA7,0x3F,0xAE,0x40,0xDF,0x6C,0xBF,0x10}
+
+
+#if defined(__cplusplus)
+
+/* Enum BMDVideoConnection - Video connection types */
+
+typedef uint32_t BMDVideoConnection_v7_6;
+enum _BMDVideoConnection_v7_6 {
+    bmdVideoConnectionSDI_v7_6                              = 'sdi ',
+    bmdVideoConnectionHDMI_v7_6                             = 'hdmi',
+    bmdVideoConnectionOpticalSDI_v7_6                       = 'opti',
+    bmdVideoConnectionComponent_v7_6                        = 'cpnt',
+    bmdVideoConnectionComposite_v7_6                        = 'cmst',
+    bmdVideoConnectionSVideo_v7_6                           = 'svid'
+};
+
+
+// Forward Declarations
+
+class IDeckLinkVideoOutputCallback_v7_6;
+class IDeckLinkInputCallback_v7_6;
+class IDeckLinkDisplayModeIterator_v7_6;
+class IDeckLinkDisplayMode_v7_6;
+class IDeckLinkOutput_v7_6;
+class IDeckLinkInput_v7_6;
+class IDeckLinkTimecode_v7_6;
+class IDeckLinkVideoFrame_v7_6;
+class IDeckLinkMutableVideoFrame_v7_6;
+class IDeckLinkVideoInputFrame_v7_6;
+class IDeckLinkScreenPreviewCallback_v7_6;
+class IDeckLinkCocoaScreenPreviewCallback_v7_6;
+class IDeckLinkGLScreenPreviewHelper_v7_6;
+class IDeckLinkVideoConversion_v7_6;
+
+
+/* Interface IDeckLinkVideoOutputCallback - Frame completion callback. */
+
+class IDeckLinkVideoOutputCallback_v7_6 : public IUnknown
+{
+public:
+    virtual HRESULT ScheduledFrameCompleted (/* in */ IDeckLinkVideoFrame_v7_6 *completedFrame, /* in */ BMDOutputFrameCompletionResult result) = 0;
+    virtual HRESULT ScheduledPlaybackHasStopped (void) = 0;
+
+protected:
+    virtual ~IDeckLinkVideoOutputCallback_v7_6 () {}; // call Release method to drop reference count
+};
+
+
+/* Interface IDeckLinkInputCallback - Frame arrival callback. */
+
+class IDeckLinkInputCallback_v7_6 : public IUnknown
+{
+public:
+    virtual HRESULT VideoInputFormatChanged (/* in */ BMDVideoInputFormatChangedEvents notificationEvents, /* in */ IDeckLinkDisplayMode_v7_6 *newDisplayMode, /* in */ BMDDetectedVideoInputFormatFlags detectedSignalFlags) = 0;
+    virtual HRESULT VideoInputFrameArrived (/* in */ IDeckLinkVideoInputFrame_v7_6* videoFrame, /* in */ IDeckLinkAudioInputPacket* audioPacket) = 0;
+
+protected:
+    virtual ~IDeckLinkInputCallback_v7_6 () {}; // call Release method to drop reference count
+};
+
+
+/* Interface IDeckLinkDisplayModeIterator - enumerates over supported input/output display modes. */
+
+class IDeckLinkDisplayModeIterator_v7_6 : public IUnknown
+{
+public:
+    virtual HRESULT Next (/* out */ IDeckLinkDisplayMode_v7_6 **deckLinkDisplayMode) = 0;
+
+protected:
+    virtual ~IDeckLinkDisplayModeIterator_v7_6 () {}; // call Release method to drop reference count
+};
+
+
+/* Interface IDeckLinkDisplayMode - represents a display mode */
+
+class IDeckLinkDisplayMode_v7_6 : public IUnknown
+{
+public:
+    virtual HRESULT GetName (/* out */ CFStringRef *name) = 0;
+    virtual BMDDisplayMode GetDisplayMode (void) = 0;
+    virtual long GetWidth (void) = 0;
+    virtual long GetHeight (void) = 0;
+    virtual HRESULT GetFrameRate (/* out */ BMDTimeValue *frameDuration, /* out */ BMDTimeScale *timeScale) = 0;
+    virtual BMDFieldDominance GetFieldDominance (void) = 0;
+
+protected:
+    virtual ~IDeckLinkDisplayMode_v7_6 () {}; // call Release method to drop reference count
+};
+
+
+/* Interface IDeckLinkOutput - Created by QueryInterface from IDeckLink. */
+
+class IDeckLinkOutput_v7_6 : public IUnknown
+{
+public:
+    virtual HRESULT DoesSupportVideoMode (/* in */ BMDDisplayMode displayMode, /* in */ BMDPixelFormat pixelFormat, /* out */ BMDDisplayModeSupport_v10_11 *result) = 0;
+    virtual HRESULT GetDisplayModeIterator (/* out */ IDeckLinkDisplayModeIterator_v7_6 **iterator) = 0;
+
+    virtual HRESULT SetScreenPreviewCallback (/* in */ IDeckLinkScreenPreviewCallback_v7_6 *previewCallback) = 0;
+
+    /* Video Output */
+
+    virtual HRESULT EnableVideoOutput (/* in */ BMDDisplayMode displayMode, /* in */ BMDVideoOutputFlags flags) = 0;
+    virtual HRESULT DisableVideoOutput (void) = 0;
+
+    virtual HRESULT SetVideoOutputFrameMemoryAllocator (/* in */ IDeckLinkMemoryAllocator *theAllocator) = 0;
+    virtual HRESULT CreateVideoFrame (/* in */ int32_t width, /* in */ int32_t height, /* in */ int32_t rowBytes, /* in */ BMDPixelFormat pixelFormat, /* in */ BMDFrameFlags flags, /* out */ IDeckLinkMutableVideoFrame_v7_6 **outFrame) = 0;
+    virtual HRESULT CreateAncillaryData (/* in */ BMDPixelFormat pixelFormat, /* out */ IDeckLinkVideoFrameAncillary **outBuffer) = 0;
+
+    virtual HRESULT DisplayVideoFrameSync (/* in */ IDeckLinkVideoFrame_v7_6 *theFrame) = 0;
+    virtual HRESULT ScheduleVideoFrame (/* in */ IDeckLinkVideoFrame_v7_6 *theFrame, /* in */ BMDTimeValue displayTime, /* in */ BMDTimeValue displayDuration, /* in */ BMDTimeScale timeScale) = 0;
+    virtual HRESULT SetScheduledFrameCompletionCallback (/* in */ IDeckLinkVideoOutputCallback_v7_6 *theCallback) = 0;
+    virtual HRESULT GetBufferedVideoFrameCount (/* out */ uint32_t *bufferedFrameCount) = 0;
+
+    /* Audio Output */
+
+    virtual HRESULT EnableAudioOutput (/* in */ BMDAudioSampleRate sampleRate, /* in */ BMDAudioSampleType sampleType, /* in */ uint32_t channelCount, /* in */ BMDAudioOutputStreamType streamType) = 0;
+    virtual HRESULT DisableAudioOutput (void) = 0;
+
+    virtual HRESULT WriteAudioSamplesSync (/* in */ void *buffer, /* in */ uint32_t sampleFrameCount, /* out */ uint32_t *sampleFramesWritten) = 0;
+
+    virtual HRESULT BeginAudioPreroll (void) = 0;
+    virtual HRESULT EndAudioPreroll (void) = 0;
+    virtual HRESULT ScheduleAudioSamples (/* in */ void *buffer, /* in */ uint32_t sampleFrameCount, /* in */ BMDTimeValue streamTime, /* in */ BMDTimeScale timeScale, /* out */ uint32_t *sampleFramesWritten) = 0;
+
+    virtual HRESULT GetBufferedAudioSampleFrameCount (/* out */ uint32_t *bufferedSampleFrameCount) = 0;
+    virtual HRESULT FlushBufferedAudioSamples (void) = 0;
+
+    virtual HRESULT SetAudioCallback (/* in */ IDeckLinkAudioOutputCallback *theCallback) = 0;
+
+    /* Output Control */
+
+    virtual HRESULT StartScheduledPlayback (/* in */ BMDTimeValue playbackStartTime, /* in */ BMDTimeScale timeScale, /* in */ double playbackSpeed) = 0;
+    virtual HRESULT StopScheduledPlayback (/* in */ BMDTimeValue stopPlaybackAtTime, /* out */ BMDTimeValue *actualStopTime, /* in */ BMDTimeScale timeScale) = 0;
+    virtual HRESULT IsScheduledPlaybackRunning (/* out */ bool *active) = 0;
+    virtual HRESULT GetScheduledStreamTime (/* in */ BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue *streamTime, /* out */ double *playbackSpeed) = 0;
+
+    /* Hardware Timing */
+
+    virtual HRESULT GetHardwareReferenceClock (/* in */ BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue *hardwareTime, /* out */ BMDTimeValue *timeInFrame, /* out */ BMDTimeValue *ticksPerFrame) = 0;
+
+protected:
+    virtual ~IDeckLinkOutput_v7_6 () {}; // call Release method to drop reference count
+};
+
+
+/* Interface IDeckLinkInput_v7_6 - Created by QueryInterface from IDeckLink. */
+
+class IDeckLinkInput_v7_6 : public IUnknown
+{
+public:
+    virtual HRESULT DoesSupportVideoMode (/* in */ BMDDisplayMode displayMode, /* in */ BMDPixelFormat pixelFormat, /* out */ BMDDisplayModeSupport_v10_11 *result) = 0;
+    virtual HRESULT GetDisplayModeIterator (/* out */ IDeckLinkDisplayModeIterator_v7_6 **iterator) = 0;
+
+    virtual HRESULT SetScreenPreviewCallback (/* in */ IDeckLinkScreenPreviewCallback_v7_6 *previewCallback) = 0;
+
+    /* Video Input */
+
+    virtual HRESULT EnableVideoInput (/* in */ BMDDisplayMode displayMode, /* in */ BMDPixelFormat pixelFormat, /* in */ BMDVideoInputFlags flags) = 0;
+    virtual HRESULT DisableVideoInput (void) = 0;
+    virtual HRESULT GetAvailableVideoFrameCount (/* out */ uint32_t *availableFrameCount) = 0;
+
+    /* Audio Input */
+
+    virtual HRESULT EnableAudioInput (/* in */ BMDAudioSampleRate sampleRate, /* in */ BMDAudioSampleType sampleType, /* in */ uint32_t channelCount) = 0;
+    virtual HRESULT DisableAudioInput (void) = 0;
+    virtual HRESULT GetAvailableAudioSampleFrameCount (/* out */ uint32_t *availableSampleFrameCount) = 0;
+
+    /* Input Control */
+
+    virtual HRESULT StartStreams (void) = 0;
+    virtual HRESULT StopStreams (void) = 0;
+    virtual HRESULT PauseStreams (void) = 0;
+    virtual HRESULT FlushStreams (void) = 0;
+    virtual HRESULT SetCallback (/* in */ IDeckLinkInputCallback_v7_6 *theCallback) = 0;
+
+    /* Hardware Timing */
+
+    virtual HRESULT GetHardwareReferenceClock (/* in */ BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue *hardwareTime, /* out */ BMDTimeValue *timeInFrame, /* out */ BMDTimeValue *ticksPerFrame) = 0;
+
+protected:
+    virtual ~IDeckLinkInput_v7_6 () {}; // call Release method to drop reference count
+};
+
+
+/* Interface IDeckLinkTimecode - Used for video frame timecode representation. */
+
+class IDeckLinkTimecode_v7_6 : public IUnknown
+{
+public:
+    virtual BMDTimecodeBCD GetBCD (void) = 0;
+    virtual HRESULT GetComponents (/* out */ uint8_t *hours, /* out */ uint8_t *minutes, /* out */ uint8_t *seconds, /* out */ uint8_t *frames) = 0;
+    virtual HRESULT GetString (/* out */ CFStringRef *timecode) = 0;
+    virtual BMDTimecodeFlags GetFlags (void) = 0;
+
+protected:
+    virtual ~IDeckLinkTimecode_v7_6 () {}; // call Release method to drop reference count
+};
+
+
+/* Interface IDeckLinkVideoFrame - Interface to encapsulate a video frame; can be caller-implemented. */
+
+class IDeckLinkVideoFrame_v7_6 : public IUnknown
+{
+public:
+    virtual long GetWidth (void) = 0;
+    virtual long GetHeight (void) = 0;
+    virtual long GetRowBytes (void) = 0;
+    virtual BMDPixelFormat GetPixelFormat (void) = 0;
+    virtual BMDFrameFlags GetFlags (void) = 0;
+    virtual HRESULT GetBytes (/* out */ void **buffer) = 0;
+
+    virtual HRESULT GetTimecode (BMDTimecodeFormat format, /* out */ IDeckLinkTimecode_v7_6 **timecode) = 0;
+    virtual HRESULT GetAncillaryData (/* out */ IDeckLinkVideoFrameAncillary **ancillary) = 0;
+
+protected:
+    virtual ~IDeckLinkVideoFrame_v7_6 () {}; // call Release method to drop reference count
+};
+
+
+/* Interface IDeckLinkMutableVideoFrame - Created by IDeckLinkOutput::CreateVideoFrame. */
+
+class IDeckLinkMutableVideoFrame_v7_6 : public IDeckLinkVideoFrame_v7_6
+{
+public:
+    virtual HRESULT SetFlags (BMDFrameFlags newFlags) = 0;
+
+    virtual HRESULT SetTimecode (BMDTimecodeFormat format, /* in */ IDeckLinkTimecode_v7_6 *timecode) = 0;
+    virtual HRESULT SetTimecodeFromComponents (BMDTimecodeFormat format, uint8_t hours, uint8_t minutes, uint8_t seconds, uint8_t frames, BMDTimecodeFlags flags) = 0;
+    virtual HRESULT SetAncillaryData (/* in */ IDeckLinkVideoFrameAncillary *ancillary) = 0;
+
+protected:
+    virtual ~IDeckLinkMutableVideoFrame_v7_6 () {}; // call Release method to drop reference count
+};
+
+
+/* Interface IDeckLinkVideoInputFrame - Provided by the IDeckLinkVideoInput frame arrival callback. */
+
+class IDeckLinkVideoInputFrame_v7_6 : public IDeckLinkVideoFrame_v7_6
+{
+public:
+    virtual HRESULT GetStreamTime (/* out */ BMDTimeValue *frameTime, /* out */ BMDTimeValue *frameDuration, BMDTimeScale timeScale) = 0;
+    virtual HRESULT GetHardwareReferenceTimestamp (BMDTimeScale timeScale, /* out */ BMDTimeValue *frameTime, /* out */ BMDTimeValue *frameDuration) = 0;
+
+protected:
+    virtual ~IDeckLinkVideoInputFrame_v7_6 () {}; // call Release method to drop reference count
+};
+
+
+/* Interface IDeckLinkScreenPreviewCallback - Screen preview callback */
+
+class IDeckLinkScreenPreviewCallback_v7_6 : public IUnknown
+{
+public:
+    virtual HRESULT DrawFrame (/* in */ IDeckLinkVideoFrame_v7_6 *theFrame) = 0;
+
+protected:
+    virtual ~IDeckLinkScreenPreviewCallback_v7_6 () {}; // call Release method to drop reference count
+};
+
+
+/* Interface IDeckLinkCocoaScreenPreviewCallback - Screen preview callback for Cocoa-based applications */
+
+class IDeckLinkCocoaScreenPreviewCallback_v7_6 : public IDeckLinkScreenPreviewCallback_v7_6
+{
+public:
+
+protected:
+    virtual ~IDeckLinkCocoaScreenPreviewCallback_v7_6 () {}; // call Release method to drop reference count
+};
+
+
+/* Interface IDeckLinkGLScreenPreviewHelper - Created with CoCreateInstance(). */
+
+class IDeckLinkGLScreenPreviewHelper_v7_6 : public IUnknown
+{
+public:
+
+    /* Methods must be called with OpenGL context set */
+
+    virtual HRESULT InitializeGL (void) = 0;
+    virtual HRESULT PaintGL (void) = 0;
+    virtual HRESULT SetFrame (/* in */ IDeckLinkVideoFrame_v7_6 *theFrame) = 0;
+
+protected:
+    virtual ~IDeckLinkGLScreenPreviewHelper_v7_6 () {}; // call Release method to drop reference count
+};
+
+
+/* Interface IDeckLinkVideoConversion - Created with CoCreateInstance(). */
+
+class IDeckLinkVideoConversion_v7_6 : public IUnknown
+{
+public:
+    virtual HRESULT ConvertFrame (/* in */ IDeckLinkVideoFrame_v7_6* srcFrame, /* in */ IDeckLinkVideoFrame_v7_6* dstFrame) = 0;
+
+protected:
+    virtual ~IDeckLinkVideoConversion_v7_6 () {}; // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkConfiguration - Created by QueryInterface from IDeckLink. */
+
+class IDeckLinkConfiguration_v7_6 : public IUnknown
+{
+public:
+    virtual HRESULT GetConfigurationValidator (/* out */ IDeckLinkConfiguration_v7_6 **configObject) = 0;
+    virtual HRESULT WriteConfigurationToPreferences (void) = 0;
+	
+    /* Video Output Configuration */
+	
+    virtual HRESULT SetVideoOutputFormat (/* in */ BMDVideoConnection_v7_6 videoOutputConnection) = 0;
+    virtual HRESULT IsVideoOutputActive (/* in */ BMDVideoConnection_v7_6 videoOutputConnection, /* out */ bool *active) = 0;
+	
+    virtual HRESULT SetAnalogVideoOutputFlags (/* in */ BMDAnalogVideoFlags analogVideoFlags) = 0;
+    virtual HRESULT GetAnalogVideoOutputFlags (/* out */ BMDAnalogVideoFlags *analogVideoFlags) = 0;
+	
+    virtual HRESULT EnableFieldFlickerRemovalWhenPaused (/* in */ bool enable) = 0;
+    virtual HRESULT IsEnabledFieldFlickerRemovalWhenPaused (/* out */ bool *enabled) = 0;
+	
+    virtual HRESULT Set444And3GBpsVideoOutput (/* in */ bool enable444VideoOutput, /* in */ bool enable3GbsOutput) = 0;
+    virtual HRESULT Get444And3GBpsVideoOutput (/* out */ bool *is444VideoOutputEnabled, /* out */ bool *threeGbsOutputEnabled) = 0;
+	
+    virtual HRESULT SetVideoOutputConversionMode (/* in */ BMDVideoOutputConversionMode conversionMode) = 0;
+    virtual HRESULT GetVideoOutputConversionMode (/* out */ BMDVideoOutputConversionMode *conversionMode) = 0;
+	
+    virtual HRESULT Set_HD1080p24_to_HD1080i5994_Conversion (/* in */ bool enable) = 0;
+    virtual HRESULT Get_HD1080p24_to_HD1080i5994_Conversion (/* out */ bool *enabled) = 0;
+	
+    /* Video Input Configuration */
+	
+    virtual HRESULT SetVideoInputFormat (/* in */ BMDVideoConnection_v7_6 videoInputFormat) = 0;
+    virtual HRESULT GetVideoInputFormat (/* out */ BMDVideoConnection_v7_6 *videoInputFormat) = 0;
+	
+    virtual HRESULT SetAnalogVideoInputFlags (/* in */ BMDAnalogVideoFlags analogVideoFlags) = 0;
+    virtual HRESULT GetAnalogVideoInputFlags (/* out */ BMDAnalogVideoFlags *analogVideoFlags) = 0;
+	
+    virtual HRESULT SetVideoInputConversionMode (/* in */ BMDVideoInputConversionMode conversionMode) = 0;
+    virtual HRESULT GetVideoInputConversionMode (/* out */ BMDVideoInputConversionMode *conversionMode) = 0;
+	
+    virtual HRESULT SetBlackVideoOutputDuringCapture (/* in */ bool blackOutInCapture) = 0;
+    virtual HRESULT GetBlackVideoOutputDuringCapture (/* out */ bool *blackOutInCapture) = 0;
+	
+    virtual HRESULT Set32PulldownSequenceInitialTimecodeFrame (/* in */ uint32_t aFrameTimecode) = 0;
+    virtual HRESULT Get32PulldownSequenceInitialTimecodeFrame (/* out */ uint32_t *aFrameTimecode) = 0;
+	
+    virtual HRESULT SetVancSourceLineMapping (/* in */ uint32_t activeLine1VANCsource, /* in */ uint32_t activeLine2VANCsource, /* in */ uint32_t activeLine3VANCsource) = 0;
+    virtual HRESULT GetVancSourceLineMapping (/* out */ uint32_t *activeLine1VANCsource, /* out */ uint32_t *activeLine2VANCsource, /* out */ uint32_t *activeLine3VANCsource) = 0;
+	
+    /* Audio Input Configuration */
+	
+    virtual HRESULT SetAudioInputFormat (/* in */ BMDAudioConnection audioInputFormat) = 0;
+    virtual HRESULT GetAudioInputFormat (/* out */ BMDAudioConnection *audioInputFormat) = 0;
+};
+
+
+
+/* Functions */
+
+extern "C" {
+
+	IDeckLinkIterator*							CreateDeckLinkIteratorInstance_v7_6 (void);
+	IDeckLinkGLScreenPreviewHelper_v7_6*		CreateOpenGLScreenPreviewHelper_v7_6 (void);
+    IDeckLinkCocoaScreenPreviewCallback_v7_6*	CreateCocoaScreenPreview_v7_6 (void* /* (NSView*) */ parentView);
+    IDeckLinkVideoConversion_v7_6*				CreateVideoConversionInstance_v7_6 (void);
+
+};
+
+
+#endif      // defined(__cplusplus)
+#endif      // __DeckLink_API_v7_6_h__
diff --git a/DeckLinkSDK/Mac/include/DeckLinkAPI_v7_9.h b/DeckLinkSDK/Mac/include/DeckLinkAPI_v7_9.h
new file mode 100644
index 0000000000..4ea8e58f24
--- /dev/null
+++ b/DeckLinkSDK/Mac/include/DeckLinkAPI_v7_9.h
@@ -0,0 +1,104 @@
+/* -LICENSE-START-
+** Copyright (c) 2010 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+/* DeckLinkAPI_v7_9.h */
+
+#ifndef __DeckLink_API_v7_9_h__
+#define __DeckLink_API_v7_9_h__
+
+#include "DeckLinkAPI.h"
+
+// Interface ID Declarations
+
+#define IID_IDeckLinkDeckControl_v7_9                    /* A4D81043-0619-42B7-8ED6-602D29041DF7 */ (REFIID){0xA4,0xD8,0x10,0x43,0x06,0x19,0x42,0xB7,0x8E,0xD6,0x60,0x2D,0x29,0x04,0x1D,0xF7}
+
+
+#if defined(__cplusplus)
+
+// Forward Declarations
+
+class IDeckLinkDeckControl_v7_9;
+
+
+/* Interface IDeckLinkDeckControl_v7_9 - Deck Control main interface */
+
+class IDeckLinkDeckControl_v7_9 : public IUnknown
+{
+public:
+    virtual HRESULT Open (/* in */ BMDTimeScale timeScale, /* in */ BMDTimeValue timeValue, /* in */ bool timecodeIsDropFrame, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT Close (/* in */ bool standbyOn) = 0;
+    virtual HRESULT GetCurrentState (/* out */ BMDDeckControlMode *mode, /* out */ BMDDeckControlVTRControlState *vtrControlState, /* out */ BMDDeckControlStatusFlags *flags) = 0;
+    virtual HRESULT SetStandby (/* in */ bool standbyOn) = 0;
+    virtual HRESULT Play (/* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT Stop (/* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT TogglePlayStop (/* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT Eject (/* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT GoToTimecode (/* in */ BMDTimecodeBCD timecode, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT FastForward (/* in */ bool viewTape, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT Rewind (/* in */ bool viewTape, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT StepForward (/* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT StepBack (/* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT Jog (/* in */ double rate, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT Shuttle (/* in */ double rate, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT GetTimecodeString (/* out */ BMDstring *currentTimeCode, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT GetTimecode (/* out */ IDeckLinkTimecode **currentTimecode, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT GetTimecodeBCD (/* out */ BMDTimecodeBCD *currentTimecode, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT SetPreroll (/* in */ uint32_t prerollSeconds) = 0;
+    virtual HRESULT GetPreroll (/* out */ uint32_t *prerollSeconds) = 0;
+    virtual HRESULT SetExportOffset (/* in */ int32_t exportOffsetFields) = 0;
+    virtual HRESULT GetExportOffset (/* out */ int32_t *exportOffsetFields) = 0;
+    virtual HRESULT GetManualExportOffset (/* out */ int32_t *deckManualExportOffsetFields) = 0;
+    virtual HRESULT SetCaptureOffset (/* in */ int32_t captureOffsetFields) = 0;
+    virtual HRESULT GetCaptureOffset (/* out */ int32_t *captureOffsetFields) = 0;
+    virtual HRESULT StartExport (/* in */ BMDTimecodeBCD inTimecode, /* in */ BMDTimecodeBCD outTimecode, /* in */ BMDDeckControlExportModeOpsFlags exportModeOps, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT StartCapture (/* in */ bool useVITC, /* in */ BMDTimecodeBCD inTimecode, /* in */ BMDTimecodeBCD outTimecode, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT GetDeviceID (/* out */ uint16_t *deviceId, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT Abort (void) = 0;
+    virtual HRESULT CrashRecordStart (/* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT CrashRecordStop (/* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT SetCallback (/* in */ IDeckLinkDeckControlStatusCallback *callback) = 0;
+
+protected:
+    virtual ~IDeckLinkDeckControl_v7_9 () {}; // call Release method to drop reference count
+};
+
+
+#endif      // defined(__cplusplus)
+#endif      // __DeckLink_API_v7_9_h__
diff --git a/DeckLinkSDK/Mac/include/DeckLinkAPI_v8_0.h b/DeckLinkSDK/Mac/include/DeckLinkAPI_v8_0.h
new file mode 100644
index 0000000000..0239ab6126
--- /dev/null
+++ b/DeckLinkSDK/Mac/include/DeckLinkAPI_v8_0.h
@@ -0,0 +1,76 @@
+/* -LICENSE-START-
+** Copyright (c) 2011 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPI_v8_0_H
+#define BMD_DECKLINKAPI_v8_0_H
+
+#include "DeckLinkAPI.h"
+
+// Interface ID Declarations
+
+#define IID_IDeckLink_v8_0                                    /* 62BFF75D-6569-4E55-8D4D-66AA03829ABC */ (REFIID){0x62,0xBF,0xF7,0x5D,0x65,0x69,0x4E,0x55,0x8D,0x4D,0x66,0xAA,0x03,0x82,0x9A,0xBC}
+#define IID_IDeckLinkIterator_v8_0                            /* 74E936FC-CC28-4A67-81A0-1E94E52D4E69 */ (REFIID){0x74,0xE9,0x36,0xFC,0xCC,0x28,0x4A,0x67,0x81,0xA0,0x1E,0x94,0xE5,0x2D,0x4E,0x69}
+
+#if defined (__cplusplus)
+
+/* Interface IDeckLink_v8_0 - represents a DeckLink device */
+
+class IDeckLink_v8_0 : public IUnknown
+{
+public:
+    virtual HRESULT GetModelName (/* out */ CFStringRef *modelName) = 0;
+};
+
+/* Interface IDeckLinkIterator_v8_0 - enumerates installed DeckLink hardware */
+
+class IDeckLinkIterator_v8_0 : public IUnknown
+{
+public:
+    virtual HRESULT Next (/* out */ IDeckLink_v8_0 **deckLinkInstance) = 0;
+};
+
+extern "C" {
+    IDeckLinkIterator_v8_0*                     CreateDeckLinkIteratorInstance_v8_0 (void);
+};
+
+
+#endif	// defined __cplusplus
+
+#endif /* defined(BMD_DECKLINKAPI_v8_0_H) */
diff --git a/DeckLinkSDK/Mac/include/DeckLinkAPI_v8_1.h b/DeckLinkSDK/Mac/include/DeckLinkAPI_v8_1.h
new file mode 100644
index 0000000000..33c77f5575
--- /dev/null
+++ b/DeckLinkSDK/Mac/include/DeckLinkAPI_v8_1.h
@@ -0,0 +1,124 @@
+/* -LICENSE-START-
+ ** Copyright (c) 2011 Blackmagic Design
+ **  
+ ** Permission is hereby granted, free of charge, to any person or organization 
+ ** obtaining a copy of the software and accompanying documentation (the 
+ ** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+ ** and transmit the Software, and to prepare derivative works of the Software, 
+ ** and to permit third-parties to whom the Software is furnished to do so, in 
+ ** accordance with:
+ ** 
+ ** (1) if the Software is obtained from Blackmagic Design, the End User License 
+ ** Agreement for the Software Development Kit (“EULA”) available at 
+ ** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+ ** 
+ ** (2) if the Software is obtained from any third party, such licensing terms 
+ ** as notified by that third party,
+ ** 
+ ** and all subject to the following:
+ ** 
+ ** (3) the copyright notices in the Software and this entire statement, 
+ ** including the above license grant, this restriction and the following 
+ ** disclaimer, must be included in all copies of the Software, in whole or in 
+ ** part, and all derivative works of the Software, unless such copies or 
+ ** derivative works are solely in the form of machine-executable object code 
+ ** generated by a source language processor.
+ ** 
+ ** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+ ** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+ ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+ ** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+ ** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+ ** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+ ** DEALINGS IN THE SOFTWARE.
+ ** 
+ ** A copy of the Software is available free of charge at 
+ ** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+ ** 
+ ** -LICENSE-END-
+ */
+
+#ifndef BMD_DECKLINKAPI_v8_1_H
+#define BMD_DECKLINKAPI_v8_1_H
+
+#include "DeckLinkAPI.h"
+
+
+// Interface ID Declarations
+
+#define IID_IDeckLinkDeckControlStatusCallback_v8_1           /* E5F693C1-4283-4716-B18F-C1431521955B */ (REFIID){0xE5,0xF6,0x93,0xC1,0x42,0x83,0x47,0x16,0xB1,0x8F,0xC1,0x43,0x15,0x21,0x95,0x5B}
+#define IID_IDeckLinkDeckControl_v8_1                         /* 522A9E39-0F3C-4742-94EE-D80DE335DA1D */ (REFIID){0x52,0x2A,0x9E,0x39,0x0F,0x3C,0x47,0x42,0x94,0xEE,0xD8,0x0D,0xE3,0x35,0xDA,0x1D}
+
+
+/* Enum BMDDeckControlVTRControlState_v8_1 - VTR Control state */
+
+typedef uint32_t BMDDeckControlVTRControlState_v8_1;
+enum _BMDDeckControlVTRControlState_v8_1 {
+    bmdDeckControlNotInVTRControlMode_v8_1                            = 'nvcm',
+    bmdDeckControlVTRControlPlaying_v8_1                              = 'vtrp',
+    bmdDeckControlVTRControlRecording_v8_1                            = 'vtrr',
+    bmdDeckControlVTRControlStill_v8_1                                = 'vtra',
+    bmdDeckControlVTRControlSeeking_v8_1                              = 'vtrs',
+    bmdDeckControlVTRControlStopped_v8_1                              = 'vtro'
+};
+
+
+/* Interface IDeckLinkDeckControlStatusCallback_v8_1 - Deck control state change callback. */
+
+class IDeckLinkDeckControlStatusCallback_v8_1 : public IUnknown
+{
+public:
+    virtual HRESULT TimecodeUpdate (/* in */ BMDTimecodeBCD currentTimecode) = 0;
+    virtual HRESULT VTRControlStateChanged (/* in */ BMDDeckControlVTRControlState_v8_1 newState, /* in */ BMDDeckControlError error) = 0;
+    virtual HRESULT DeckControlEventReceived (/* in */ BMDDeckControlEvent event, /* in */ BMDDeckControlError error) = 0;
+    virtual HRESULT DeckControlStatusChanged (/* in */ BMDDeckControlStatusFlags flags, /* in */ uint32_t mask) = 0;
+	
+protected:
+    virtual ~IDeckLinkDeckControlStatusCallback_v8_1 () {}; // call Release method to drop reference count
+};
+
+/* Interface IDeckLinkDeckControl_v8_1 - Deck Control main interface */
+
+class IDeckLinkDeckControl_v8_1 : public IUnknown
+{
+public:
+    virtual HRESULT Open (/* in */ BMDTimeScale timeScale, /* in */ BMDTimeValue timeValue, /* in */ bool timecodeIsDropFrame, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT Close (/* in */ bool standbyOn) = 0;
+    virtual HRESULT GetCurrentState (/* out */ BMDDeckControlMode *mode, /* out */ BMDDeckControlVTRControlState_v8_1 *vtrControlState, /* out */ BMDDeckControlStatusFlags *flags) = 0;
+    virtual HRESULT SetStandby (/* in */ bool standbyOn) = 0;
+    virtual HRESULT SendCommand (/* in */ uint8_t *inBuffer, /* in */ uint32_t inBufferSize, /* out */ uint8_t *outBuffer, /* out */ uint32_t *outDataSize, /* in */ uint32_t outBufferSize, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT Play (/* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT Stop (/* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT TogglePlayStop (/* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT Eject (/* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT GoToTimecode (/* in */ BMDTimecodeBCD timecode, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT FastForward (/* in */ bool viewTape, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT Rewind (/* in */ bool viewTape, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT StepForward (/* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT StepBack (/* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT Jog (/* in */ double rate, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT Shuttle (/* in */ double rate, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT GetTimecodeString (/* out */ CFStringRef *currentTimeCode, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT GetTimecode (/* out */ IDeckLinkTimecode **currentTimecode, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT GetTimecodeBCD (/* out */ BMDTimecodeBCD *currentTimecode, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT SetPreroll (/* in */ uint32_t prerollSeconds) = 0;
+    virtual HRESULT GetPreroll (/* out */ uint32_t *prerollSeconds) = 0;
+    virtual HRESULT SetExportOffset (/* in */ int32_t exportOffsetFields) = 0;
+    virtual HRESULT GetExportOffset (/* out */ int32_t *exportOffsetFields) = 0;
+    virtual HRESULT GetManualExportOffset (/* out */ int32_t *deckManualExportOffsetFields) = 0;
+    virtual HRESULT SetCaptureOffset (/* in */ int32_t captureOffsetFields) = 0;
+    virtual HRESULT GetCaptureOffset (/* out */ int32_t *captureOffsetFields) = 0;
+    virtual HRESULT StartExport (/* in */ BMDTimecodeBCD inTimecode, /* in */ BMDTimecodeBCD outTimecode, /* in */ BMDDeckControlExportModeOpsFlags exportModeOps, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT StartCapture (/* in */ bool useVITC, /* in */ BMDTimecodeBCD inTimecode, /* in */ BMDTimecodeBCD outTimecode, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT GetDeviceID (/* out */ uint16_t *deviceId, /* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT Abort (void) = 0;
+    virtual HRESULT CrashRecordStart (/* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT CrashRecordStop (/* out */ BMDDeckControlError *error) = 0;
+    virtual HRESULT SetCallback (/* in */ IDeckLinkDeckControlStatusCallback_v8_1 *callback) = 0;
+	
+protected:
+    virtual ~IDeckLinkDeckControl_v8_1 () {}; // call Release method to drop reference count
+};
+
+
+#endif	// BMD_DECKLINKAPI_v8_1_H
diff --git a/DeckLinkSDK/Mac/include/DeckLinkAPI_v9_2.h b/DeckLinkSDK/Mac/include/DeckLinkAPI_v9_2.h
new file mode 100644
index 0000000000..e06210d9a1
--- /dev/null
+++ b/DeckLinkSDK/Mac/include/DeckLinkAPI_v9_2.h
@@ -0,0 +1,96 @@
+/* -LICENSE-START-
+** Copyright (c) 2012 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPI_v9_2_H
+#define BMD_DECKLINKAPI_v9_2_H
+
+#include "DeckLinkAPI.h"
+#include "DeckLinkAPI_v10_11.h"
+#include "DeckLinkAPIVideoInput_v11_5_1.h"
+
+
+// Interface ID Declarations
+
+#define IID_IDeckLinkInput_v9_2                          /* 6D40EF78-28B9-4E21-990D-95BB7750A04F */ (REFIID){0x6D,0x40,0xEF,0x78,0x28,0xB9,0x4E,0x21,0x99,0x0D,0x95,0xBB,0x77,0x50,0xA0,0x4F}
+
+
+#if defined(__cplusplus)
+
+/* Interface IDeckLinkInput - Created by QueryInterface from IDeckLink. */
+
+class IDeckLinkInput_v9_2 : public IUnknown
+{
+public:
+    virtual HRESULT DoesSupportVideoMode (/* in */ BMDDisplayMode displayMode, /* in */ BMDPixelFormat pixelFormat, /* in */ BMDVideoInputFlags flags, /* out */ BMDDisplayModeSupport_v10_11 *result, /* out */ IDeckLinkDisplayMode **resultDisplayMode) = 0;
+    virtual HRESULT GetDisplayModeIterator (/* out */ IDeckLinkDisplayModeIterator **iterator) = 0;
+
+    virtual HRESULT SetScreenPreviewCallback (/* in */ IDeckLinkScreenPreviewCallback *previewCallback) = 0;
+
+    /* Video Input */
+
+    virtual HRESULT EnableVideoInput (/* in */ BMDDisplayMode displayMode, /* in */ BMDPixelFormat pixelFormat, /* in */ BMDVideoInputFlags flags) = 0;
+    virtual HRESULT DisableVideoInput (void) = 0;
+    virtual HRESULT GetAvailableVideoFrameCount (/* out */ uint32_t *availableFrameCount) = 0;
+
+    /* Audio Input */
+
+    virtual HRESULT EnableAudioInput (/* in */ BMDAudioSampleRate sampleRate, /* in */ BMDAudioSampleType sampleType, /* in */ uint32_t channelCount) = 0;
+    virtual HRESULT DisableAudioInput (void) = 0;
+    virtual HRESULT GetAvailableAudioSampleFrameCount (/* out */ uint32_t *availableSampleFrameCount) = 0;
+
+    /* Input Control */
+
+    virtual HRESULT StartStreams (void) = 0;
+    virtual HRESULT StopStreams (void) = 0;
+    virtual HRESULT PauseStreams (void) = 0;
+    virtual HRESULT FlushStreams (void) = 0;
+    virtual HRESULT SetCallback (/* in */ IDeckLinkInputCallback_v11_5_1 *theCallback) = 0;
+
+    /* Hardware Timing */
+
+    virtual HRESULT GetHardwareReferenceClock (/* in */ BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue *hardwareTime, /* out */ BMDTimeValue *timeInFrame, /* out */ BMDTimeValue *ticksPerFrame) = 0;
+
+protected:
+    virtual ~IDeckLinkInput_v9_2 () {}; // call Release method to drop reference count
+};
+
+
+#endif      // defined(__cplusplus)
+#endif	// BMD_DECKLINKAPI_v9_2_H
diff --git a/DeckLinkSDK/Mac/include/DeckLinkAPI_v9_9.h b/DeckLinkSDK/Mac/include/DeckLinkAPI_v9_9.h
new file mode 100644
index 0000000000..095a1fed06
--- /dev/null
+++ b/DeckLinkSDK/Mac/include/DeckLinkAPI_v9_9.h
@@ -0,0 +1,115 @@
+/* -LICENSE-START-
+** Copyright (c) 2013 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+#ifndef BMD_DECKLINKAPI_v9_9_H
+#define BMD_DECKLINKAPI_v9_9_H
+
+#include "DeckLinkAPI.h"
+#include "DeckLinkAPI_v10_11.h"
+
+// Interface ID Declarations
+
+BMD_CONST REFIID IID_IDeckLinkOutput_v9_9                              = /* A3EF0963-0862-44ED-92A9-EE89ABF431C7 */ {0xA3,0xEF,0x09,0x63,0x08,0x62,0x44,0xED,0x92,0xA9,0xEE,0x89,0xAB,0xF4,0x31,0xC7};
+
+
+#if defined(__cplusplus)
+
+// Forward Declarations
+class IDeckLinkOutput_v9_9;
+
+/* Interface IDeckLinkOutput - Created by QueryInterface from IDeckLink. */
+
+class IDeckLinkOutput_v9_9 : public IUnknown
+{
+public:
+    virtual HRESULT DoesSupportVideoMode (/* in */ BMDDisplayMode displayMode, /* in */ BMDPixelFormat pixelFormat, /* in */ BMDVideoOutputFlags flags, /* out */ BMDDisplayModeSupport_v10_11 *result, /* out */ IDeckLinkDisplayMode **resultDisplayMode) = 0;
+    virtual HRESULT GetDisplayModeIterator (/* out */ IDeckLinkDisplayModeIterator **iterator) = 0;
+	
+    virtual HRESULT SetScreenPreviewCallback (/* in */ IDeckLinkScreenPreviewCallback *previewCallback) = 0;
+	
+    /* Video Output */
+	
+    virtual HRESULT EnableVideoOutput (/* in */ BMDDisplayMode displayMode, /* in */ BMDVideoOutputFlags flags) = 0;
+    virtual HRESULT DisableVideoOutput (void) = 0;
+	
+    virtual HRESULT SetVideoOutputFrameMemoryAllocator (/* in */ IDeckLinkMemoryAllocator *theAllocator) = 0;
+    virtual HRESULT CreateVideoFrame (/* in */ int32_t width, /* in */ int32_t height, /* in */ int32_t rowBytes, /* in */ BMDPixelFormat pixelFormat, /* in */ BMDFrameFlags flags, /* out */ IDeckLinkMutableVideoFrame **outFrame) = 0;
+    virtual HRESULT CreateAncillaryData (/* in */ BMDPixelFormat pixelFormat, /* out */ IDeckLinkVideoFrameAncillary **outBuffer) = 0;
+	
+    virtual HRESULT DisplayVideoFrameSync (/* in */ IDeckLinkVideoFrame *theFrame) = 0;
+    virtual HRESULT ScheduleVideoFrame (/* in */ IDeckLinkVideoFrame *theFrame, /* in */ BMDTimeValue displayTime, /* in */ BMDTimeValue displayDuration, /* in */ BMDTimeScale timeScale) = 0;
+    virtual HRESULT SetScheduledFrameCompletionCallback (/* in */ IDeckLinkVideoOutputCallback *theCallback) = 0;
+    virtual HRESULT GetBufferedVideoFrameCount (/* out */ uint32_t *bufferedFrameCount) = 0;
+	
+    /* Audio Output */
+	
+    virtual HRESULT EnableAudioOutput (/* in */ BMDAudioSampleRate sampleRate, /* in */ BMDAudioSampleType sampleType, /* in */ uint32_t channelCount, /* in */ BMDAudioOutputStreamType streamType) = 0;
+    virtual HRESULT DisableAudioOutput (void) = 0;
+	
+    virtual HRESULT WriteAudioSamplesSync (/* in */ void *buffer, /* in */ uint32_t sampleFrameCount, /* out */ uint32_t *sampleFramesWritten) = 0;
+	
+    virtual HRESULT BeginAudioPreroll (void) = 0;
+    virtual HRESULT EndAudioPreroll (void) = 0;
+    virtual HRESULT ScheduleAudioSamples (/* in */ void *buffer, /* in */ uint32_t sampleFrameCount, /* in */ BMDTimeValue streamTime, /* in */ BMDTimeScale timeScale, /* out */ uint32_t *sampleFramesWritten) = 0;
+	
+    virtual HRESULT GetBufferedAudioSampleFrameCount (/* out */ uint32_t *bufferedSampleFrameCount) = 0;
+    virtual HRESULT FlushBufferedAudioSamples (void) = 0;
+	
+    virtual HRESULT SetAudioCallback (/* in */ IDeckLinkAudioOutputCallback *theCallback) = 0;
+	
+    /* Output Control */
+	
+    virtual HRESULT StartScheduledPlayback (/* in */ BMDTimeValue playbackStartTime, /* in */ BMDTimeScale timeScale, /* in */ double playbackSpeed) = 0;
+    virtual HRESULT StopScheduledPlayback (/* in */ BMDTimeValue stopPlaybackAtTime, /* out */ BMDTimeValue *actualStopTime, /* in */ BMDTimeScale timeScale) = 0;
+    virtual HRESULT IsScheduledPlaybackRunning (/* out */ bool *active) = 0;
+    virtual HRESULT GetScheduledStreamTime (/* in */ BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue *streamTime, /* out */ double *playbackSpeed) = 0;
+    virtual HRESULT GetReferenceStatus (/* out */ BMDReferenceStatus *referenceStatus) = 0;
+	
+    /* Hardware Timing */
+	
+    virtual HRESULT GetHardwareReferenceClock (/* in */ BMDTimeScale desiredTimeScale, /* out */ BMDTimeValue *hardwareTime, /* out */ BMDTimeValue *timeInFrame, /* out */ BMDTimeValue *ticksPerFrame) = 0;
+	
+protected:
+    virtual ~IDeckLinkOutput_v9_9 () {}; // call Release method to drop reference count
+};
+
+#endif      // defined(__cplusplus)
+#endif /* defined(BMD_DECKLINKAPI_v9_9_H) */
+
diff --git a/DeckLinkSDK/Win/include/DeckLinkAPI.idl b/DeckLinkSDK/Win/include/DeckLinkAPI.idl
new file mode 100644
index 0000000000..4179aeff6e
--- /dev/null
+++ b/DeckLinkSDK/Win/include/DeckLinkAPI.idl
@@ -0,0 +1,1376 @@
+/* -LICENSE-START-
+ ** Copyright (c) 2022 Blackmagic Design
+ **  
+ ** Permission is hereby granted, free of charge, to any person or organization 
+ ** obtaining a copy of the software and accompanying documentation (the 
+ ** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+ ** and transmit the Software, and to prepare derivative works of the Software, 
+ ** and to permit third-parties to whom the Software is furnished to do so, in 
+ ** accordance with:
+ ** 
+ ** (1) if the Software is obtained from Blackmagic Design, the End User License 
+ ** Agreement for the Software Development Kit ("EULA") available at 
+ ** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+ ** 
+ ** (2) if the Software is obtained from any third party, such licensing terms 
+ ** as notified by that third party,
+ ** 
+ ** and all subject to the following:
+ ** 
+ ** (3) the copyright notices in the Software and this entire statement, 
+ ** including the above license grant, this restriction and the following 
+ ** disclaimer, must be included in all copies of the Software, in whole or in 
+ ** part, and all derivative works of the Software, unless such copies or 
+ ** derivative works are solely in the form of machine-executable object code 
+ ** generated by a source language processor.
+ ** 
+ ** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+ ** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+ ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+ ** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+ ** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+ ** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+ ** DEALINGS IN THE SOFTWARE.
+ ** 
+ ** A copy of the Software is available free of charge at 
+ ** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+ ** 
+ ** -LICENSE-END-
+ */
+
+
+#ifndef BMD_CONST
+    #if defined(_MSC_VER)
+        #define BMD_CONST __declspec(selectany) static const
+    #else
+        #define BMD_CONST static const
+    #endif
+#endif
+
+/* DeckLink API */
+
+import "unknwn.idl";
+
+[uuid(D864517A-EDD5-466D-867D-C819F1C052BB),
+version(1.0), helpstring("DeckLink API Library")]
+library DeckLinkAPI
+{
+
+#include "DeckLinkAPITypes.idl"
+#include "DeckLinkAPIModes.idl"
+#include "DeckLinkAPIDiscovery.idl"
+#include "DeckLinkAPIConfiguration.idl"
+#include "DeckLinkAPIDeckControl.idl"
+#include "DeckLinkAPIStreaming.idl"
+
+// Type Declarations
+
+
+// Enumeration Mapping
+
+cpp_quote("typedef unsigned int BMDFrameFlags;")
+cpp_quote("typedef unsigned int BMDVideoInputFlags;")
+cpp_quote("typedef unsigned int BMDVideoInputFormatChangedEvents;")
+cpp_quote("typedef unsigned int BMDDetectedVideoInputFormatFlags;")
+cpp_quote("typedef unsigned int BMDDeckLinkCapturePassthroughMode;")
+cpp_quote("typedef unsigned int BMDAnalogVideoFlags;")
+cpp_quote("typedef unsigned int BMDDeviceBusyState;")
+cpp_quote("#if 0")
+typedef enum _BMDFrameFlags BMDFrameFlags;
+typedef enum _BMDVideoInputFlags BMDVideoInputFlags;
+typedef enum _BMDVideoInputFormatChangedEvents BMDVideoInputFormatChangedEvents;
+typedef enum _BMDDetectedVideoInputFormatFlags BMDDetectedVideoInputFormatFlags;
+typedef enum _BMDDeckLinkCapturePassthroughMode BMDDeckLinkCapturePassthroughMode;
+typedef enum _BMDAnalogVideoFlags BMDAnalogVideoFlags;
+typedef enum _BMDDeviceBusyState BMDDeviceBusyState;
+cpp_quote("#endif")
+
+/* Enum BMDVideoOutputFlags - Flags to control the output of ancillary data along with video. */
+
+typedef [v1_enum] enum _BMDVideoOutputFlags {
+    bmdVideoOutputFlagDefault                                    = 0,
+    bmdVideoOutputVANC                                           = 1 << 0,
+    bmdVideoOutputVITC                                           = 1 << 1,
+    bmdVideoOutputRP188                                          = 1 << 2,
+    bmdVideoOutputDualStream3D                                   = 1 << 4,
+    bmdVideoOutputSynchronizeToPlaybackGroup                     = 1 << 6
+} BMDVideoOutputFlags;
+
+/* Enum BMDSupportedVideoModeFlags - Flags to describe supported video modes */
+
+typedef [v1_enum] enum _BMDSupportedVideoModeFlags {
+    bmdSupportedVideoModeDefault                                 = 0,
+    bmdSupportedVideoModeKeying                                  = 1 << 0,
+    bmdSupportedVideoModeDualStream3D                            = 1 << 1,
+    bmdSupportedVideoModeSDISingleLink                           = 1 << 2,
+    bmdSupportedVideoModeSDIDualLink                             = 1 << 3,
+    bmdSupportedVideoModeSDIQuadLink                             = 1 << 4,
+    bmdSupportedVideoModeInAnyProfile                            = 1 << 5
+} BMDSupportedVideoModeFlags;
+
+/* Enum BMDPacketType - Type of packet */
+
+typedef [v1_enum] enum _BMDPacketType {
+    bmdPacketTypeStreamInterruptedMarker                         = /* 'sint' */ 0x73696E74,	// A packet of this type marks the time when a video stream was interrupted, for example by a disconnected cable
+    bmdPacketTypeStreamData                                      = /* 'sdat' */ 0x73646174	// Regular stream data
+} BMDPacketType;
+
+/* Enum BMDFrameFlags - Frame flags */
+
+[v1_enum] enum _BMDFrameFlags {
+    bmdFrameFlagDefault                                          = 0,
+    bmdFrameFlagFlipVertical                                     = 1 << 0,
+    bmdFrameContainsHDRMetadata                                  = 1 << 1,
+
+    /* Flags that are applicable only to instances of IDeckLinkVideoInputFrame */
+
+    bmdFrameCapturedAsPsF                                        = 1 << 30,
+    bmdFrameHasNoInputSource                                     = 1 << 31
+};
+
+/* Enum BMDVideoInputFlags - Flags applicable to video input */
+
+[v1_enum] enum _BMDVideoInputFlags {
+    bmdVideoInputFlagDefault                                     = 0,
+    bmdVideoInputEnableFormatDetection                           = 1 << 0,
+    bmdVideoInputDualStream3D                                    = 1 << 1,
+    bmdVideoInputSynchronizeToCaptureGroup                       = 1 << 2
+};
+
+/* Enum BMDVideoInputFormatChangedEvents - Bitmask passed to the VideoInputFormatChanged notification to identify the properties of the input signal that have changed */
+
+[v1_enum] enum _BMDVideoInputFormatChangedEvents {
+    bmdVideoInputDisplayModeChanged                              = 1 << 0,
+    bmdVideoInputFieldDominanceChanged                           = 1 << 1,
+    bmdVideoInputColorspaceChanged                               = 1 << 2
+};
+
+/* Enum BMDDetectedVideoInputFormatFlags - Flags passed to the VideoInputFormatChanged notification to describe the detected video input signal */
+
+[v1_enum] enum _BMDDetectedVideoInputFormatFlags {
+    bmdDetectedVideoInputYCbCr422                                = 1 << 0,
+    bmdDetectedVideoInputRGB444                                  = 1 << 1,
+    bmdDetectedVideoInputDualStream3D                            = 1 << 2,
+    bmdDetectedVideoInput12BitDepth                              = 1 << 3,
+    bmdDetectedVideoInput10BitDepth                              = 1 << 4,
+    bmdDetectedVideoInput8BitDepth                               = 1 << 5
+};
+
+/* Enum BMDDeckLinkCapturePassthroughMode - Enumerates whether the video output is electrically connected to the video input or if the clean switching mode is enabled */
+
+[v1_enum] enum _BMDDeckLinkCapturePassthroughMode {
+    bmdDeckLinkCapturePassthroughModeDisabled                    = /* 'pdis' */ 0x70646973,
+    bmdDeckLinkCapturePassthroughModeDirect                      = /* 'pdir' */ 0x70646972,
+    bmdDeckLinkCapturePassthroughModeCleanSwitch                 = /* 'pcln' */ 0x70636C6E
+};
+
+/* Enum BMDOutputFrameCompletionResult - Frame Completion Callback */
+
+typedef [v1_enum] enum _BMDOutputFrameCompletionResult {
+    bmdOutputFrameCompleted,
+    bmdOutputFrameDisplayedLate,
+    bmdOutputFrameDropped,
+    bmdOutputFrameFlushed
+} BMDOutputFrameCompletionResult;
+
+/* Enum BMDReferenceStatus - GenLock input status */
+
+typedef [v1_enum] enum _BMDReferenceStatus {
+    bmdReferenceUnlocked                                         = 0,
+    bmdReferenceNotSupportedByHardware                           = 1 << 0,
+    bmdReferenceLocked                                           = 1 << 1
+} BMDReferenceStatus;
+
+/* Enum BMDAudioFormat - Audio Format */
+
+typedef [v1_enum] enum _BMDAudioFormat {
+    bmdAudioFormatPCM                                            = /* 'lpcm' */ 0x6C70636D	// Linear signed PCM samples
+} BMDAudioFormat;
+
+/* Enum BMDAudioSampleRate - Audio sample rates supported for output/input */
+
+typedef [v1_enum] enum _BMDAudioSampleRate {
+    bmdAudioSampleRate48kHz                                      = 48000
+} BMDAudioSampleRate;
+
+/* Enum BMDAudioSampleType - Audio sample sizes supported for output/input */
+
+typedef [v1_enum] enum _BMDAudioSampleType {
+    bmdAudioSampleType16bitInteger                               = 16,
+    bmdAudioSampleType32bitInteger                               = 32
+} BMDAudioSampleType;
+
+/* Enum BMDAudioOutputStreamType - Audio output stream type */
+
+typedef [v1_enum] enum _BMDAudioOutputStreamType {
+    bmdAudioOutputStreamContinuous,
+    bmdAudioOutputStreamContinuousDontResample,
+    bmdAudioOutputStreamTimestamped
+} BMDAudioOutputStreamType;
+
+/* Enum BMDAncillaryPacketFormat - Ancillary packet format */
+
+typedef [v1_enum] enum _BMDAncillaryPacketFormat {
+    bmdAncillaryPacketFormatUInt8                                = /* 'ui08' */ 0x75693038,
+    bmdAncillaryPacketFormatUInt16                               = /* 'ui16' */ 0x75693136,
+    bmdAncillaryPacketFormatYCbCr10                              = /* 'v210' */ 0x76323130
+} BMDAncillaryPacketFormat;
+
+/* Enum BMDTimecodeFormat - Timecode formats for frame metadata */
+
+typedef [v1_enum] enum _BMDTimecodeFormat {
+    bmdTimecodeRP188VITC1                                        = /* 'rpv1' */ 0x72707631,	// RP188 timecode where DBB1 equals VITC1 (line 9)
+    bmdTimecodeRP188VITC2                                        = /* 'rp12' */ 0x72703132,	// RP188 timecode where DBB1 equals VITC2 (line 9 for progressive or line 571 for interlaced/PsF)
+    bmdTimecodeRP188LTC                                          = /* 'rplt' */ 0x72706C74,	// RP188 timecode where DBB1 equals LTC (line 10)
+    bmdTimecodeRP188HighFrameRate                                = /* 'rphr' */ 0x72706872,	// RP188 timecode where DBB1 is an HFRTC (SMPTE ST 12-3), the only timecode allowing the frame value to go above 30
+    bmdTimecodeRP188Any                                          = /* 'rp18' */ 0x72703138,	// Convenience for capture, returning the first valid timecode in {HFRTC (if supported), VITC1, VITC2, LTC }
+    bmdTimecodeVITC                                              = /* 'vitc' */ 0x76697463,
+    bmdTimecodeVITCField2                                        = /* 'vit2' */ 0x76697432,
+    bmdTimecodeSerial                                            = /* 'seri' */ 0x73657269
+} BMDTimecodeFormat;
+
+/* Enum BMDAnalogVideoFlags - Analog video display flags */
+
+[v1_enum] enum _BMDAnalogVideoFlags {
+    bmdAnalogVideoFlagCompositeSetup75                           = 1 << 0,
+    bmdAnalogVideoFlagComponentBetacamLevels                     = 1 << 1
+};
+
+/* Enum BMDAudioOutputAnalogAESSwitch - Audio output Analog/AESEBU switch */
+
+typedef [v1_enum] enum _BMDAudioOutputAnalogAESSwitch {
+    bmdAudioOutputSwitchAESEBU                                   = /* 'aes ' */ 0x61657320,
+    bmdAudioOutputSwitchAnalog                                   = /* 'anlg' */ 0x616E6C67
+} BMDAudioOutputAnalogAESSwitch;
+
+/* Enum BMDVideoOutputConversionMode - Video/audio conversion mode */
+
+typedef [v1_enum] enum _BMDVideoOutputConversionMode {
+    bmdNoVideoOutputConversion                                   = /* 'none' */ 0x6E6F6E65,
+    bmdVideoOutputLetterboxDownconversion                        = /* 'ltbx' */ 0x6C746278,
+    bmdVideoOutputAnamorphicDownconversion                       = /* 'amph' */ 0x616D7068,
+    bmdVideoOutputHD720toHD1080Conversion                        = /* '720c' */ 0x37323063,
+    bmdVideoOutputHardwareLetterboxDownconversion                = /* 'HWlb' */ 0x48576C62,
+    bmdVideoOutputHardwareAnamorphicDownconversion               = /* 'HWam' */ 0x4857616D,
+    bmdVideoOutputHardwareCenterCutDownconversion                = /* 'HWcc' */ 0x48576363,
+    bmdVideoOutputHardware720p1080pCrossconversion               = /* 'xcap' */ 0x78636170,
+    bmdVideoOutputHardwareAnamorphic720pUpconversion             = /* 'ua7p' */ 0x75613770,
+    bmdVideoOutputHardwareAnamorphic1080iUpconversion            = /* 'ua1i' */ 0x75613169,
+    bmdVideoOutputHardwareAnamorphic149To720pUpconversion        = /* 'u47p' */ 0x75343770,
+    bmdVideoOutputHardwareAnamorphic149To1080iUpconversion       = /* 'u41i' */ 0x75343169,
+    bmdVideoOutputHardwarePillarbox720pUpconversion              = /* 'up7p' */ 0x75703770,
+    bmdVideoOutputHardwarePillarbox1080iUpconversion             = /* 'up1i' */ 0x75703169
+} BMDVideoOutputConversionMode;
+
+/* Enum BMDVideoInputConversionMode - Video input conversion mode */
+
+typedef [v1_enum] enum _BMDVideoInputConversionMode {
+    bmdNoVideoInputConversion                                    = /* 'none' */ 0x6E6F6E65,
+    bmdVideoInputLetterboxDownconversionFromHD1080               = /* '10lb' */ 0x31306C62,
+    bmdVideoInputAnamorphicDownconversionFromHD1080              = /* '10am' */ 0x3130616D,
+    bmdVideoInputLetterboxDownconversionFromHD720                = /* '72lb' */ 0x37326C62,
+    bmdVideoInputAnamorphicDownconversionFromHD720               = /* '72am' */ 0x3732616D,
+    bmdVideoInputLetterboxUpconversion                           = /* 'lbup' */ 0x6C627570,
+    bmdVideoInputAnamorphicUpconversion                          = /* 'amup' */ 0x616D7570
+} BMDVideoInputConversionMode;
+
+/* Enum BMDVideo3DPackingFormat - Video 3D packing format */
+
+typedef [v1_enum] enum _BMDVideo3DPackingFormat {
+    bmdVideo3DPackingSidebySideHalf                              = /* 'sbsh' */ 0x73627368,
+    bmdVideo3DPackingLinebyLine                                  = /* 'lbyl' */ 0x6C62796C,
+    bmdVideo3DPackingTopAndBottom                                = /* 'tabo' */ 0x7461626F,
+    bmdVideo3DPackingFramePacking                                = /* 'frpk' */ 0x6672706B,
+    bmdVideo3DPackingLeftOnly                                    = /* 'left' */ 0x6C656674,
+    bmdVideo3DPackingRightOnly                                   = /* 'righ' */ 0x72696768
+} BMDVideo3DPackingFormat;
+
+/* Enum BMDIdleVideoOutputOperation - Video output operation when not playing video */
+
+typedef [v1_enum] enum _BMDIdleVideoOutputOperation {
+    bmdIdleVideoOutputBlack                                      = /* 'blac' */ 0x626C6163,
+    bmdIdleVideoOutputLastFrame                                  = /* 'lafa' */ 0x6C616661
+} BMDIdleVideoOutputOperation;
+
+/* Enum BMDVideoEncoderFrameCodingMode - Video frame coding mode */
+
+typedef [v1_enum] enum _BMDVideoEncoderFrameCodingMode {
+    bmdVideoEncoderFrameCodingModeInter                          = /* 'inte' */ 0x696E7465,
+    bmdVideoEncoderFrameCodingModeIntra                          = /* 'intr' */ 0x696E7472
+} BMDVideoEncoderFrameCodingMode;
+
+/* Enum BMDDNxHRLevel - DNxHR Levels */
+
+typedef [v1_enum] enum _BMDDNxHRLevel {
+    bmdDNxHRLevelSQ                                              = /* 'dnsq' */ 0x646E7371,
+    bmdDNxHRLevelLB                                              = /* 'dnlb' */ 0x646E6C62,
+    bmdDNxHRLevelHQ                                              = /* 'dnhq' */ 0x646E6871,
+    bmdDNxHRLevelHQX                                             = /* 'dhqx' */ 0x64687178,
+    bmdDNxHRLevel444                                             = /* 'd444' */ 0x64343434
+} BMDDNxHRLevel;
+
+/* Enum BMDLinkConfiguration - Video link configuration */
+
+typedef [v1_enum] enum _BMDLinkConfiguration {
+    bmdLinkConfigurationSingleLink                               = /* 'lcsl' */ 0x6C63736C,
+    bmdLinkConfigurationDualLink                                 = /* 'lcdl' */ 0x6C63646C,
+    bmdLinkConfigurationQuadLink                                 = /* 'lcql' */ 0x6C63716C
+} BMDLinkConfiguration;
+
+/* Enum BMDDeviceInterface - Device interface type */
+
+typedef [v1_enum] enum _BMDDeviceInterface {
+    bmdDeviceInterfacePCI                                        = /* 'pci ' */ 0x70636920,
+    bmdDeviceInterfaceUSB                                        = /* 'usb ' */ 0x75736220,
+    bmdDeviceInterfaceThunderbolt                                = /* 'thun' */ 0x7468756E
+} BMDDeviceInterface;
+
+/* Enum BMDColorspace - Colorspace */
+
+typedef [v1_enum] enum _BMDColorspace {
+    bmdColorspaceRec601                                          = /* 'r601' */ 0x72363031,
+    bmdColorspaceRec709                                          = /* 'r709' */ 0x72373039,
+    bmdColorspaceRec2020                                         = /* '2020' */ 0x32303230
+} BMDColorspace;
+
+/* Enum BMDDynamicRange - SDR or HDR */
+
+typedef [v1_enum] enum _BMDDynamicRange {
+    bmdDynamicRangeSDR                                           = 0,	// Standard Dynamic Range in accordance with SMPTE ST 2036-1
+    bmdDynamicRangeHDRStaticPQ                                   = 1 << 29,	// High Dynamic Range PQ in accordance with SMPTE ST 2084
+    bmdDynamicRangeHDRStaticHLG                                  = 1 << 30	// High Dynamic Range HLG in accordance with ITU-R BT.2100-0
+} BMDDynamicRange;
+
+/* Enum BMDDeckLinkHDMIInputEDIDID - DeckLink HDMI Input EDID ID */
+
+typedef [v1_enum] enum _BMDDeckLinkHDMIInputEDIDID {
+
+    /* Integers */
+
+    bmdDeckLinkHDMIInputEDIDDynamicRange                         = /* 'HIDy' */ 0x48494479	// Parameter is of type BMDDynamicRange. Default is (bmdDynamicRangeSDR|bmdDynamicRangeHDRStaticPQ)
+} BMDDeckLinkHDMIInputEDIDID;
+
+/* Enum BMDDeckLinkFrameMetadataID - DeckLink Frame Metadata ID */
+
+typedef [v1_enum] enum _BMDDeckLinkFrameMetadataID {
+
+    /* Colorspace Metadata - Integers */
+
+    bmdDeckLinkFrameMetadataColorspace                           = /* 'cspc' */ 0x63737063,	// Colorspace of video frame (see BMDColorspace)
+
+    /* HDR Metadata - Integers */
+
+    bmdDeckLinkFrameMetadataHDRElectroOpticalTransferFunc        = /* 'eotf' */ 0x656F7466,	// EOTF in range 0-7 as per CEA 861.3
+
+    /* HDR Metadata - Floats */
+
+    bmdDeckLinkFrameMetadataHDRDisplayPrimariesRedX              = /* 'hdrx' */ 0x68647278,	// Red display primaries in range 0.0 - 1.0
+    bmdDeckLinkFrameMetadataHDRDisplayPrimariesRedY              = /* 'hdry' */ 0x68647279,	// Red display primaries in range 0.0 - 1.0
+    bmdDeckLinkFrameMetadataHDRDisplayPrimariesGreenX            = /* 'hdgx' */ 0x68646778,	// Green display primaries in range 0.0 - 1.0
+    bmdDeckLinkFrameMetadataHDRDisplayPrimariesGreenY            = /* 'hdgy' */ 0x68646779,	// Green display primaries in range 0.0 - 1.0
+    bmdDeckLinkFrameMetadataHDRDisplayPrimariesBlueX             = /* 'hdbx' */ 0x68646278,	// Blue display primaries in range 0.0 - 1.0
+    bmdDeckLinkFrameMetadataHDRDisplayPrimariesBlueY             = /* 'hdby' */ 0x68646279,	// Blue display primaries in range 0.0 - 1.0
+    bmdDeckLinkFrameMetadataHDRWhitePointX                       = /* 'hdwx' */ 0x68647778,	// White point in range 0.0 - 1.0
+    bmdDeckLinkFrameMetadataHDRWhitePointY                       = /* 'hdwy' */ 0x68647779,	// White point in range 0.0 - 1.0
+    bmdDeckLinkFrameMetadataHDRMaxDisplayMasteringLuminance      = /* 'hdml' */ 0x68646D6C,	// Max display mastering luminance in range 1 cd/m2 - 65535 cd/m2
+    bmdDeckLinkFrameMetadataHDRMinDisplayMasteringLuminance      = /* 'hmil' */ 0x686D696C,	// Min display mastering luminance in range 0.0001 cd/m2 - 6.5535 cd/m2
+    bmdDeckLinkFrameMetadataHDRMaximumContentLightLevel          = /* 'mcll' */ 0x6D636C6C,	// Maximum Content Light Level in range 1 cd/m2 - 65535 cd/m2
+    bmdDeckLinkFrameMetadataHDRMaximumFrameAverageLightLevel     = /* 'fall' */ 0x66616C6C	// Maximum Frame Average Light Level in range 1 cd/m2 - 65535 cd/m2
+} BMDDeckLinkFrameMetadataID;
+
+/* Enum BMDProfileID - Identifies a profile */
+
+typedef [v1_enum] enum _BMDProfileID {
+    bmdProfileOneSubDeviceFullDuplex                             = /* '1dfd' */ 0x31646664,
+    bmdProfileOneSubDeviceHalfDuplex                             = /* '1dhd' */ 0x31646864,
+    bmdProfileTwoSubDevicesFullDuplex                            = /* '2dfd' */ 0x32646664,
+    bmdProfileTwoSubDevicesHalfDuplex                            = /* '2dhd' */ 0x32646864,
+    bmdProfileFourSubDevicesHalfDuplex                           = /* '4dhd' */ 0x34646864
+} BMDProfileID;
+
+/* Enum BMDHDMITimecodePacking - Packing form of timecode on HDMI */
+
+typedef [v1_enum] enum _BMDHDMITimecodePacking {
+    bmdHDMITimecodePackingIEEEOUI000085                          = 0x00008500,
+    bmdHDMITimecodePackingIEEEOUI080046                          = 0x08004601,
+    bmdHDMITimecodePackingIEEEOUI5CF9F0                          = 0x5CF9F003
+} BMDHDMITimecodePacking;
+
+/* Enum BMDInternalKeyingAncillaryDataSource - Source for VANC and timecode data when performing internal keying */
+
+typedef [v1_enum] enum _BMDInternalKeyingAncillaryDataSource {
+    bmdInternalKeyingUsesAncillaryDataFromInputSignal            = /* 'ikai' */ 0x696B6169,
+    bmdInternalKeyingUsesAncillaryDataFromKeyFrame               = /* 'ikak' */ 0x696B616B
+} BMDInternalKeyingAncillaryDataSource;
+
+/* Enum BMDDeckLinkAttributeID - DeckLink Attribute ID */
+
+typedef [v1_enum] enum _BMDDeckLinkAttributeID {
+
+    /* Flags */
+
+    BMDDeckLinkSupportsInternalKeying                            = /* 'keyi' */ 0x6B657969,
+    BMDDeckLinkSupportsExternalKeying                            = /* 'keye' */ 0x6B657965,
+    BMDDeckLinkSupportsInputFormatDetection                      = /* 'infd' */ 0x696E6664,
+    BMDDeckLinkHasReferenceInput                                 = /* 'hrin' */ 0x6872696E,
+    BMDDeckLinkHasSerialPort                                     = /* 'hspt' */ 0x68737074,
+    BMDDeckLinkHasAnalogVideoOutputGain                          = /* 'avog' */ 0x61766F67,
+    BMDDeckLinkCanOnlyAdjustOverallVideoOutputGain               = /* 'ovog' */ 0x6F766F67,
+    BMDDeckLinkHasVideoInputAntiAliasingFilter                   = /* 'aafl' */ 0x6161666C,
+    BMDDeckLinkHasBypass                                         = /* 'byps' */ 0x62797073,
+    BMDDeckLinkSupportsClockTimingAdjustment                     = /* 'ctad' */ 0x63746164,
+    BMDDeckLinkSupportsFullFrameReferenceInputTimingOffset       = /* 'frin' */ 0x6672696E,
+    BMDDeckLinkSupportsSMPTELevelAOutput                         = /* 'lvla' */ 0x6C766C61,
+    BMDDeckLinkSupportsAutoSwitchingPPsFOnInput                  = /* 'apsf' */ 0x61707366,
+    BMDDeckLinkSupportsDualLinkSDI                               = /* 'sdls' */ 0x73646C73,
+    BMDDeckLinkSupportsQuadLinkSDI                               = /* 'sqls' */ 0x73716C73,
+    BMDDeckLinkSupportsIdleOutput                                = /* 'idou' */ 0x69646F75,
+    BMDDeckLinkVANCRequires10BitYUVVideoFrames                   = /* 'vioY' */ 0x76696F59,	// Legacy product requires v210 active picture for IDeckLinkVideoFrameAncillaryPackets or 10-bit VANC
+    BMDDeckLinkHasLTCTimecodeInput                               = /* 'hltc' */ 0x686C7463,
+    BMDDeckLinkSupportsHDRMetadata                               = /* 'hdrm' */ 0x6864726D,
+    BMDDeckLinkSupportsColorspaceMetadata                        = /* 'cmet' */ 0x636D6574,
+    BMDDeckLinkSupportsHDMITimecode                              = /* 'htim' */ 0x6874696D,
+    BMDDeckLinkSupportsHighFrameRateTimecode                     = /* 'HFRT' */ 0x48465254,
+    BMDDeckLinkSupportsSynchronizeToCaptureGroup                 = /* 'stcg' */ 0x73746367,
+    BMDDeckLinkSupportsSynchronizeToPlaybackGroup                = /* 'stpg' */ 0x73747067,
+
+    /* Integers */
+
+    BMDDeckLinkMaximumAudioChannels                              = /* 'mach' */ 0x6D616368,
+    BMDDeckLinkMaximumAnalogAudioInputChannels                   = /* 'iach' */ 0x69616368,
+    BMDDeckLinkMaximumAnalogAudioOutputChannels                  = /* 'aach' */ 0x61616368,
+    BMDDeckLinkNumberOfSubDevices                                = /* 'nsbd' */ 0x6E736264,
+    BMDDeckLinkSubDeviceIndex                                    = /* 'subi' */ 0x73756269,
+    BMDDeckLinkPersistentID                                      = /* 'peid' */ 0x70656964,
+    BMDDeckLinkDeviceGroupID                                     = /* 'dgid' */ 0x64676964,
+    BMDDeckLinkTopologicalID                                     = /* 'toid' */ 0x746F6964,
+    BMDDeckLinkVideoOutputConnections                            = /* 'vocn' */ 0x766F636E,	// Returns a BMDVideoConnection bit field
+    BMDDeckLinkVideoInputConnections                             = /* 'vicn' */ 0x7669636E,	// Returns a BMDVideoConnection bit field
+    BMDDeckLinkAudioOutputConnections                            = /* 'aocn' */ 0x616F636E,	// Returns a BMDAudioConnection bit field
+    BMDDeckLinkAudioInputConnections                             = /* 'aicn' */ 0x6169636E,	// Returns a BMDAudioConnection bit field
+    BMDDeckLinkVideoIOSupport                                    = /* 'vios' */ 0x76696F73,	// Returns a BMDVideoIOSupport bit field
+    BMDDeckLinkDeckControlConnections                            = /* 'dccn' */ 0x6463636E,	// Returns a BMDDeckControlConnection bit field
+    BMDDeckLinkDeviceInterface                                   = /* 'dbus' */ 0x64627573,	// Returns a BMDDeviceInterface
+    BMDDeckLinkAudioInputRCAChannelCount                         = /* 'airc' */ 0x61697263,
+    BMDDeckLinkAudioInputXLRChannelCount                         = /* 'aixc' */ 0x61697863,
+    BMDDeckLinkAudioOutputRCAChannelCount                        = /* 'aorc' */ 0x616F7263,
+    BMDDeckLinkAudioOutputXLRChannelCount                        = /* 'aoxc' */ 0x616F7863,
+    BMDDeckLinkProfileID                                         = /* 'prid' */ 0x70726964,	// Returns a BMDProfileID
+    BMDDeckLinkDuplex                                            = /* 'dupx' */ 0x64757078,
+    BMDDeckLinkMinimumPrerollFrames                              = /* 'mprf' */ 0x6D707266,
+    BMDDeckLinkSupportedDynamicRange                             = /* 'sudr' */ 0x73756472,
+
+    /* Floats */
+
+    BMDDeckLinkVideoInputGainMinimum                             = /* 'vigm' */ 0x7669676D,
+    BMDDeckLinkVideoInputGainMaximum                             = /* 'vigx' */ 0x76696778,
+    BMDDeckLinkVideoOutputGainMinimum                            = /* 'vogm' */ 0x766F676D,
+    BMDDeckLinkVideoOutputGainMaximum                            = /* 'vogx' */ 0x766F6778,
+    BMDDeckLinkMicrophoneInputGainMinimum                        = /* 'migm' */ 0x6D69676D,
+    BMDDeckLinkMicrophoneInputGainMaximum                        = /* 'migx' */ 0x6D696778,
+
+    /* Strings */
+
+    BMDDeckLinkSerialPortDeviceName                              = /* 'slpn' */ 0x736C706E,
+    BMDDeckLinkVendorName                                        = /* 'vndr' */ 0x766E6472,
+    BMDDeckLinkDisplayName                                       = /* 'dspn' */ 0x6473706E,
+    BMDDeckLinkModelName                                         = /* 'mdln' */ 0x6D646C6E,
+    BMDDeckLinkDeviceHandle                                      = /* 'devh' */ 0x64657668
+} BMDDeckLinkAttributeID;
+
+/* Enum BMDDeckLinkAPIInformationID - DeckLinkAPI information ID */
+
+typedef [v1_enum] enum _BMDDeckLinkAPIInformationID {
+
+    /* Integer or String */
+
+    BMDDeckLinkAPIVersion                                        = /* 'vers' */ 0x76657273
+} BMDDeckLinkAPIInformationID;
+
+/* Enum BMDDeckLinkStatusID - DeckLink Status ID */
+
+typedef [v1_enum] enum _BMDDeckLinkStatusID {
+
+    /* Integers */
+
+    bmdDeckLinkStatusDetectedVideoInputMode                      = /* 'dvim' */ 0x6476696D,
+    bmdDeckLinkStatusDetectedVideoInputFormatFlags               = /* 'dvff' */ 0x64766666,
+    bmdDeckLinkStatusDetectedVideoInputFieldDominance            = /* 'dvfd' */ 0x64766664,
+    bmdDeckLinkStatusDetectedVideoInputColorspace                = /* 'dscl' */ 0x6473636C,
+    bmdDeckLinkStatusDetectedVideoInputDynamicRange              = /* 'dsdr' */ 0x64736472,
+    bmdDeckLinkStatusDetectedSDILinkConfiguration                = /* 'dslc' */ 0x64736C63,
+    bmdDeckLinkStatusCurrentVideoInputMode                       = /* 'cvim' */ 0x6376696D,
+    bmdDeckLinkStatusCurrentVideoInputPixelFormat                = /* 'cvip' */ 0x63766970,
+    bmdDeckLinkStatusCurrentVideoInputFlags                      = /* 'cvif' */ 0x63766966,
+    bmdDeckLinkStatusCurrentVideoOutputMode                      = /* 'cvom' */ 0x63766F6D,
+    bmdDeckLinkStatusCurrentVideoOutputFlags                     = /* 'cvof' */ 0x63766F66,
+    bmdDeckLinkStatusPCIExpressLinkWidth                         = /* 'pwid' */ 0x70776964,
+    bmdDeckLinkStatusPCIExpressLinkSpeed                         = /* 'plnk' */ 0x706C6E6B,
+    bmdDeckLinkStatusLastVideoOutputPixelFormat                  = /* 'opix' */ 0x6F706978,
+    bmdDeckLinkStatusReferenceSignalMode                         = /* 'refm' */ 0x7265666D,
+    bmdDeckLinkStatusReferenceSignalFlags                        = /* 'reff' */ 0x72656666,
+    bmdDeckLinkStatusBusy                                        = /* 'busy' */ 0x62757379,
+    bmdDeckLinkStatusInterchangeablePanelType                    = /* 'icpt' */ 0x69637074,
+    bmdDeckLinkStatusDeviceTemperature                           = /* 'dtmp' */ 0x64746D70,
+
+    /* Flags */
+
+    bmdDeckLinkStatusVideoInputSignalLocked                      = /* 'visl' */ 0x7669736C,
+    bmdDeckLinkStatusReferenceSignalLocked                       = /* 'refl' */ 0x7265666C,
+
+    /* Bytes */
+
+    bmdDeckLinkStatusReceivedEDID                                = /* 'edid' */ 0x65646964
+} BMDDeckLinkStatusID;
+
+/* Enum BMDDeckLinkVideoStatusFlags -  */
+
+typedef [v1_enum] enum _BMDDeckLinkVideoStatusFlags {
+    bmdDeckLinkVideoStatusPsF                                    = 1 << 0,
+    bmdDeckLinkVideoStatusDualStream3D                           = 1 << 1
+} BMDDeckLinkVideoStatusFlags;
+
+/* Enum BMDDuplexMode - Duplex of the device */
+
+typedef [v1_enum] enum _BMDDuplexMode {
+    bmdDuplexFull                                                = /* 'dxfu' */ 0x64786675,
+    bmdDuplexHalf                                                = /* 'dxha' */ 0x64786861,
+    bmdDuplexSimplex                                             = /* 'dxsp' */ 0x64787370,
+    bmdDuplexInactive                                            = /* 'dxin' */ 0x6478696E
+} BMDDuplexMode;
+
+/* Enum BMDPanelType - The type of interchangeable panel */
+
+typedef [v1_enum] enum _BMDPanelType {
+    bmdPanelNotDetected                                          = /* 'npnl' */ 0x6E706E6C,
+    bmdPanelTeranexMiniSmartPanel                                = /* 'tmsm' */ 0x746D736D
+} BMDPanelType;
+
+/* Enum BMDDeviceBusyState - Current device busy state */
+
+[v1_enum] enum _BMDDeviceBusyState {
+    bmdDeviceCaptureBusy                                         = 1 << 0,
+    bmdDevicePlaybackBusy                                        = 1 << 1,
+    bmdDeviceSerialPortBusy                                      = 1 << 2
+};
+
+/* Enum BMDVideoIOSupport - Device video input/output support */
+
+typedef [v1_enum] enum _BMDVideoIOSupport {
+    bmdDeviceSupportsCapture                                     = 1 << 0,
+    bmdDeviceSupportsPlayback                                    = 1 << 1
+} BMDVideoIOSupport;
+
+/* Enum BMD3DPreviewFormat - Linked Frame preview format */
+
+typedef [v1_enum] enum _BMD3DPreviewFormat {
+    bmd3DPreviewFormatDefault                                    = /* 'defa' */ 0x64656661,
+    bmd3DPreviewFormatLeftOnly                                   = /* 'left' */ 0x6C656674,
+    bmd3DPreviewFormatRightOnly                                  = /* 'righ' */ 0x72696768,
+    bmd3DPreviewFormatSideBySide                                 = /* 'side' */ 0x73696465,
+    bmd3DPreviewFormatTopBottom                                  = /* 'topb' */ 0x746F7062
+} BMD3DPreviewFormat;
+
+/* Enum BMDNotifications - Events that can be subscribed through IDeckLinkNotification */
+
+typedef [v1_enum] enum _BMDNotifications {
+    bmdPreferencesChanged                                        = /* 'pref' */ 0x70726566,
+    bmdStatusChanged                                             = /* 'stat' */ 0x73746174
+} BMDNotifications;
+
+// Forward Declarations
+
+interface IDeckLinkVideoOutputCallback;
+interface IDeckLinkInputCallback;
+interface IDeckLinkEncoderInputCallback;
+interface IDeckLinkMemoryAllocator;
+interface IDeckLinkAudioOutputCallback;
+interface IDeckLinkIterator;
+interface IDeckLinkAPIInformation;
+interface IDeckLinkOutput;
+interface IDeckLinkInput;
+interface IDeckLinkHDMIInputEDID;
+interface IDeckLinkEncoderInput;
+interface IDeckLinkVideoFrame;
+interface IDeckLinkMutableVideoFrame;
+interface IDeckLinkVideoFrame3DExtensions;
+interface IDeckLinkVideoFrameMetadataExtensions;
+interface IDeckLinkVideoInputFrame;
+interface IDeckLinkAncillaryPacket;
+interface IDeckLinkAncillaryPacketIterator;
+interface IDeckLinkVideoFrameAncillaryPackets;
+interface IDeckLinkVideoFrameAncillary;
+interface IDeckLinkEncoderPacket;
+interface IDeckLinkEncoderVideoPacket;
+interface IDeckLinkEncoderAudioPacket;
+interface IDeckLinkH265NALPacket;
+interface IDeckLinkAudioInputPacket;
+interface IDeckLinkScreenPreviewCallback;
+interface IDeckLinkGLScreenPreviewHelper;
+interface IDeckLinkDX9ScreenPreviewHelper;
+interface IDeckLinkWPFDX9ScreenPreviewHelper;
+interface IDeckLinkNotificationCallback;
+interface IDeckLinkNotification;
+interface IDeckLinkProfileAttributes;
+interface IDeckLinkProfileIterator;
+interface IDeckLinkProfile;
+interface IDeckLinkProfileCallback;
+interface IDeckLinkProfileManager;
+interface IDeckLinkStatus;
+interface IDeckLinkKeyer;
+interface IDeckLinkVideoConversion;
+interface IDeckLinkDeviceNotificationCallback;
+interface IDeckLinkDiscovery;
+
+/* Interface IDeckLinkVideoOutputCallback - Frame completion callback. */
+
+[
+    object,
+    uuid(20AA5225-1958-47CB-820B-80A8D521A6EE),
+    helpstring("Frame completion callback.")
+] interface IDeckLinkVideoOutputCallback : IUnknown
+{
+    HRESULT ScheduledFrameCompleted ([in] IDeckLinkVideoFrame* completedFrame, [in] BMDOutputFrameCompletionResult result);
+    HRESULT ScheduledPlaybackHasStopped (void);
+};
+
+/* Interface IDeckLinkInputCallback - Frame arrival callback. */
+
+[
+    object,
+    uuid(C6FCE4C9-C4E4-4047-82FB-5D238232A902),
+    helpstring("Frame arrival callback.")
+] interface IDeckLinkInputCallback : IUnknown
+{
+    HRESULT VideoInputFormatChanged ([in] BMDVideoInputFormatChangedEvents notificationEvents, [in] IDeckLinkDisplayMode* newDisplayMode, [in] BMDDetectedVideoInputFormatFlags detectedSignalFlags);
+    HRESULT VideoInputFrameArrived ([in] IDeckLinkVideoInputFrame* videoFrame, [in] IDeckLinkAudioInputPacket* audioPacket);
+};
+
+/* Interface IDeckLinkEncoderInputCallback - Frame arrival callback. */
+
+[
+    object,
+    uuid(ACF13E61-F4A0-4974-A6A7-59AFF6268B31),
+    helpstring("Frame arrival callback.")
+] interface IDeckLinkEncoderInputCallback : IUnknown
+{
+    HRESULT VideoInputSignalChanged ([in] BMDVideoInputFormatChangedEvents notificationEvents, [in] IDeckLinkDisplayMode* newDisplayMode, [in] BMDDetectedVideoInputFormatFlags detectedSignalFlags);
+    HRESULT VideoPacketArrived ([in] IDeckLinkEncoderVideoPacket* videoPacket);
+    HRESULT AudioPacketArrived ([in] IDeckLinkEncoderAudioPacket* audioPacket);
+};
+
+/* Interface IDeckLinkMemoryAllocator - Memory allocator for video frames. */
+
+[
+    object,
+    uuid(B36EB6E7-9D29-4AA8-92EF-843B87A289E8),
+    local,
+    helpstring("Memory allocator for video frames.")
+] interface IDeckLinkMemoryAllocator : IUnknown
+{
+    HRESULT AllocateBuffer ([in] unsigned int bufferSize, [out] void** allocatedBuffer);
+    HRESULT ReleaseBuffer ([in] void* buffer);
+    HRESULT Commit (void);
+    HRESULT Decommit (void);
+};
+
+/* Interface IDeckLinkAudioOutputCallback - Optional callback to allow audio samples to be pulled as required. */
+
+[
+    object,
+    uuid(403C681B-7F46-4A12-B993-2BB127084EE6),
+    local,
+    helpstring("Optional callback to allow audio samples to be pulled as required.")
+] interface IDeckLinkAudioOutputCallback : IUnknown
+{
+    HRESULT RenderAudioSamples ([in] BOOL preroll);
+};
+
+/* Interface IDeckLinkIterator - Enumerates installed DeckLink hardware */
+
+[
+    object,
+    uuid(50FB36CD-3063-4B73-BDBB-958087F2D8BA),
+    helpstring("Enumerates installed DeckLink hardware")
+] interface IDeckLinkIterator : IUnknown
+{
+    HRESULT Next ([out] IDeckLink** deckLinkInstance);
+};
+
+/* Interface IDeckLinkAPIInformation - DeckLinkAPI attribute interface */
+
+[
+    object,
+    uuid(7BEA3C68-730D-4322-AF34-8A7152B532A4),
+    helpstring("DeckLinkAPI attribute interface")
+] interface IDeckLinkAPIInformation : IUnknown
+{
+    HRESULT GetFlag ([in] BMDDeckLinkAPIInformationID cfgID, [out] BOOL* value);
+    HRESULT GetInt ([in] BMDDeckLinkAPIInformationID cfgID, [out] LONGLONG* value);
+    HRESULT GetFloat ([in] BMDDeckLinkAPIInformationID cfgID, [out] double* value);
+    HRESULT GetString ([in] BMDDeckLinkAPIInformationID cfgID, [out] BSTR* value);
+};
+
+/* Interface IDeckLinkOutput - Created by QueryInterface from IDeckLink. */
+
+[
+    object,
+    uuid(BE2D9020-461E-442F-84B7-E949CB953B9D),
+    local,
+    helpstring("Created by QueryInterface from IDeckLink.")
+] interface IDeckLinkOutput : IUnknown
+{
+    HRESULT DoesSupportVideoMode ([in] BMDVideoConnection connection /* If a value of bmdVideoConnectionUnspecified is specified, the caller does not care about the connection */, [in] BMDDisplayMode requestedMode, [in] BMDPixelFormat requestedPixelFormat, [in] BMDVideoOutputConversionMode conversionMode, [in] BMDSupportedVideoModeFlags flags, [out] BMDDisplayMode* actualMode, [out] BOOL* supported);
+    HRESULT GetDisplayMode ([in] BMDDisplayMode displayMode, [out] IDeckLinkDisplayMode** resultDisplayMode);
+    HRESULT GetDisplayModeIterator ([out] IDeckLinkDisplayModeIterator** iterator);
+    HRESULT SetScreenPreviewCallback ([in] IDeckLinkScreenPreviewCallback* previewCallback);
+
+    /* Video Output */
+
+    HRESULT EnableVideoOutput ([in] BMDDisplayMode displayMode, [in] BMDVideoOutputFlags flags);
+    HRESULT DisableVideoOutput (void);
+    HRESULT SetVideoOutputFrameMemoryAllocator ([in] IDeckLinkMemoryAllocator* theAllocator);
+    HRESULT CreateVideoFrame ([in] int width, [in] int height, [in] int rowBytes, [in] BMDPixelFormat pixelFormat, [in] BMDFrameFlags flags, [out] IDeckLinkMutableVideoFrame** outFrame);
+    HRESULT CreateAncillaryData ([in] BMDPixelFormat pixelFormat, [out] IDeckLinkVideoFrameAncillary** outBuffer);	// Use of IDeckLinkVideoFrameAncillaryPackets is preferred
+    HRESULT DisplayVideoFrameSync ([in] IDeckLinkVideoFrame* theFrame);
+    HRESULT ScheduleVideoFrame ([in] IDeckLinkVideoFrame* theFrame, [in] BMDTimeValue displayTime, [in] BMDTimeValue displayDuration, [in] BMDTimeScale timeScale);
+    HRESULT SetScheduledFrameCompletionCallback ([in] IDeckLinkVideoOutputCallback* theCallback);
+    HRESULT GetBufferedVideoFrameCount ([out] unsigned int* bufferedFrameCount);
+
+    /* Audio Output */
+
+    HRESULT EnableAudioOutput ([in] BMDAudioSampleRate sampleRate, [in] BMDAudioSampleType sampleType, [in] unsigned int channelCount, [in] BMDAudioOutputStreamType streamType);
+    HRESULT DisableAudioOutput (void);
+    HRESULT WriteAudioSamplesSync ([in] void* buffer, [in] unsigned int sampleFrameCount, [out] unsigned int* sampleFramesWritten);
+    HRESULT BeginAudioPreroll (void);
+    HRESULT EndAudioPreroll (void);
+    HRESULT ScheduleAudioSamples ([in] void* buffer, [in] unsigned int sampleFrameCount, [in] BMDTimeValue streamTime, [in] BMDTimeScale timeScale, [out] unsigned int* sampleFramesWritten);
+    HRESULT GetBufferedAudioSampleFrameCount ([out] unsigned int* bufferedSampleFrameCount);
+    HRESULT FlushBufferedAudioSamples (void);
+    HRESULT SetAudioCallback ([in] IDeckLinkAudioOutputCallback* theCallback);
+
+    /* Output Control */
+
+    HRESULT StartScheduledPlayback ([in] BMDTimeValue playbackStartTime, [in] BMDTimeScale timeScale, [in] double playbackSpeed);
+    HRESULT StopScheduledPlayback ([in] BMDTimeValue stopPlaybackAtTime, [out] BMDTimeValue* actualStopTime, [in] BMDTimeScale timeScale);
+    HRESULT IsScheduledPlaybackRunning ([out] BOOL* active);
+    HRESULT GetScheduledStreamTime ([in] BMDTimeScale desiredTimeScale, [out] BMDTimeValue* streamTime, [out] double* playbackSpeed);
+    HRESULT GetReferenceStatus ([out] BMDReferenceStatus* referenceStatus);
+
+    /* Hardware Timing */
+
+    HRESULT GetHardwareReferenceClock ([in] BMDTimeScale desiredTimeScale, [out] BMDTimeValue* hardwareTime, [out] BMDTimeValue* timeInFrame, [out] BMDTimeValue* ticksPerFrame);
+    HRESULT GetFrameCompletionReferenceTimestamp ([in] IDeckLinkVideoFrame* theFrame, [in] BMDTimeScale desiredTimeScale, [out] BMDTimeValue* frameCompletionTimestamp);
+};
+
+/* Interface IDeckLinkInput - Created by QueryInterface from IDeckLink. */
+
+[
+    object,
+    uuid(C21CDB6E-F414-46E4-A636-80A566E0ED37),
+    helpstring("Created by QueryInterface from IDeckLink.")
+] interface IDeckLinkInput : IUnknown
+{
+    HRESULT DoesSupportVideoMode ([in] BMDVideoConnection connection /* If a value of bmdVideoConnectionUnspecified is specified, the caller does not care about the connection */, [in] BMDDisplayMode requestedMode, [in] BMDPixelFormat requestedPixelFormat, [in] BMDVideoInputConversionMode conversionMode, [in] BMDSupportedVideoModeFlags flags, [out] BMDDisplayMode* actualMode, [out] BOOL* supported);
+    HRESULT GetDisplayMode ([in] BMDDisplayMode displayMode, [out] IDeckLinkDisplayMode** resultDisplayMode);
+    HRESULT GetDisplayModeIterator ([out] IDeckLinkDisplayModeIterator** iterator);
+    HRESULT SetScreenPreviewCallback ([in] IDeckLinkScreenPreviewCallback* previewCallback);
+
+    /* Video Input */
+
+    HRESULT EnableVideoInput ([in] BMDDisplayMode displayMode, [in] BMDPixelFormat pixelFormat, [in] BMDVideoInputFlags flags);
+    HRESULT DisableVideoInput (void);
+    HRESULT GetAvailableVideoFrameCount ([out] unsigned int* availableFrameCount);
+    HRESULT SetVideoInputFrameMemoryAllocator ([in] IDeckLinkMemoryAllocator* theAllocator);
+
+    /* Audio Input */
+
+    HRESULT EnableAudioInput ([in] BMDAudioSampleRate sampleRate, [in] BMDAudioSampleType sampleType, [in] unsigned int channelCount);
+    HRESULT DisableAudioInput (void);
+    HRESULT GetAvailableAudioSampleFrameCount ([out] unsigned int* availableSampleFrameCount);
+
+    /* Input Control */
+
+    HRESULT StartStreams (void);
+    HRESULT StopStreams (void);
+    HRESULT PauseStreams (void);
+    HRESULT FlushStreams (void);
+    HRESULT SetCallback ([in] IDeckLinkInputCallback* theCallback);
+
+    /* Hardware Timing */
+
+    HRESULT GetHardwareReferenceClock ([in] BMDTimeScale desiredTimeScale, [out] BMDTimeValue* hardwareTime, [out] BMDTimeValue* timeInFrame, [out] BMDTimeValue* ticksPerFrame);
+};
+
+/* Interface IDeckLinkHDMIInputEDID - Created by QueryInterface from IDeckLink. Releasing all references will restore EDID to default */
+
+[
+    object,
+    uuid(ABBBACBC-45BC-4665-9D92-ACE6E5A97902),
+    helpstring("Created by QueryInterface from IDeckLink. Releasing all references will restore EDID to default")
+] interface IDeckLinkHDMIInputEDID : IUnknown
+{
+    HRESULT SetInt ([in] BMDDeckLinkHDMIInputEDIDID cfgID, [in] LONGLONG value);
+    HRESULT GetInt ([in] BMDDeckLinkHDMIInputEDIDID cfgID, [out] LONGLONG* value);
+    HRESULT WriteToEDID (void);
+};
+
+/* Interface IDeckLinkEncoderInput - Created by QueryInterface from IDeckLink. */
+
+[
+    object,
+    uuid(F222551D-13DF-4FD8-B587-9D4F19EC12C9),
+    helpstring("Created by QueryInterface from IDeckLink.")
+] interface IDeckLinkEncoderInput : IUnknown
+{
+    HRESULT DoesSupportVideoMode ([in] BMDVideoConnection connection /* If a value of bmdVideoConnectionUnspecified is specified, the caller does not care about the connection */, [in] BMDDisplayMode requestedMode, [in] BMDPixelFormat requestedCodec, [in] unsigned int requestedCodecProfile, [in] BMDSupportedVideoModeFlags flags, [out] BOOL* supported);
+    HRESULT GetDisplayMode ([in] BMDDisplayMode displayMode, [out] IDeckLinkDisplayMode** resultDisplayMode);
+    HRESULT GetDisplayModeIterator ([out] IDeckLinkDisplayModeIterator** iterator);
+
+    /* Video Input */
+
+    HRESULT EnableVideoInput ([in] BMDDisplayMode displayMode, [in] BMDPixelFormat pixelFormat, [in] BMDVideoInputFlags flags);
+    HRESULT DisableVideoInput (void);
+    HRESULT GetAvailablePacketsCount ([out] unsigned int* availablePacketsCount);
+    HRESULT SetMemoryAllocator ([in] IDeckLinkMemoryAllocator* theAllocator);
+
+    /* Audio Input */
+
+    HRESULT EnableAudioInput ([in] BMDAudioFormat audioFormat, [in] BMDAudioSampleRate sampleRate, [in] BMDAudioSampleType sampleType, [in] unsigned int channelCount);
+    HRESULT DisableAudioInput (void);
+    HRESULT GetAvailableAudioSampleFrameCount ([out] unsigned int* availableSampleFrameCount);
+
+    /* Input Control */
+
+    HRESULT StartStreams (void);
+    HRESULT StopStreams (void);
+    HRESULT PauseStreams (void);
+    HRESULT FlushStreams (void);
+    HRESULT SetCallback ([in] IDeckLinkEncoderInputCallback* theCallback);
+
+    /* Hardware Timing */
+
+    HRESULT GetHardwareReferenceClock ([in] BMDTimeScale desiredTimeScale, [out] BMDTimeValue* hardwareTime, [out] BMDTimeValue* timeInFrame, [out] BMDTimeValue* ticksPerFrame);
+};
+
+/* Interface IDeckLinkVideoFrame - Interface to encapsulate a video frame; can be caller-implemented. */
+
+[
+    object,
+    uuid(3F716FE0-F023-4111-BE5D-EF4414C05B17),
+    local,
+    helpstring("Interface to encapsulate a video frame; can be caller-implemented.")
+] interface IDeckLinkVideoFrame : IUnknown
+{
+    long GetWidth (void);
+    long GetHeight (void);
+    long GetRowBytes (void);
+    BMDPixelFormat GetPixelFormat (void);
+    BMDFrameFlags GetFlags (void);
+    HRESULT GetBytes ([out] void** buffer);
+    HRESULT GetTimecode ([in] BMDTimecodeFormat format, [out] IDeckLinkTimecode** timecode);
+    HRESULT GetAncillaryData ([out] IDeckLinkVideoFrameAncillary** ancillary);	// Use of IDeckLinkVideoFrameAncillaryPackets is preferred
+};
+
+/* Interface IDeckLinkMutableVideoFrame - Created by IDeckLinkOutput::CreateVideoFrame. */
+
+[
+    object,
+    uuid(69E2639F-40DA-4E19-B6F2-20ACE815C390),
+    local,
+    helpstring("Created by IDeckLinkOutput::CreateVideoFrame.")
+] interface IDeckLinkMutableVideoFrame : IDeckLinkVideoFrame
+{
+    HRESULT SetFlags ([in] BMDFrameFlags newFlags);
+    HRESULT SetTimecode ([in] BMDTimecodeFormat format, [in] IDeckLinkTimecode* timecode);
+    HRESULT SetTimecodeFromComponents ([in] BMDTimecodeFormat format, [in] unsigned char hours, [in] unsigned char minutes, [in] unsigned char seconds, [in] unsigned char frames, [in] BMDTimecodeFlags flags);
+    HRESULT SetAncillaryData ([in] IDeckLinkVideoFrameAncillary* ancillary);
+    HRESULT SetTimecodeUserBits ([in] BMDTimecodeFormat format, [in] BMDTimecodeUserBits userBits);
+};
+
+/* Interface IDeckLinkVideoFrame3DExtensions - Optional interface implemented on IDeckLinkVideoFrame to support 3D frames */
+
+[
+    object,
+    uuid(DA0F7E4A-EDC7-48A8-9CDD-2DB51C729CD7),
+    local,
+    helpstring("Optional interface implemented on IDeckLinkVideoFrame to support 3D frames")
+] interface IDeckLinkVideoFrame3DExtensions : IUnknown
+{
+    BMDVideo3DPackingFormat Get3DPackingFormat (void);
+    HRESULT GetFrameForRightEye ([out] IDeckLinkVideoFrame** rightEyeFrame);
+};
+
+/* Interface IDeckLinkVideoFrameMetadataExtensions - Optional interface implemented on IDeckLinkVideoFrame to support frame metadata such as HDR information */
+
+[
+    object,
+    uuid(E232A5B7-4DB4-44C9-9152-F47C12E5F051),
+    local,
+    helpstring("Optional interface implemented on IDeckLinkVideoFrame to support frame metadata such as HDR information")
+] interface IDeckLinkVideoFrameMetadataExtensions : IUnknown
+{
+    HRESULT GetInt ([in] BMDDeckLinkFrameMetadataID metadataID, [out] LONGLONG* value);
+    HRESULT GetFloat ([in] BMDDeckLinkFrameMetadataID metadataID, [out] double* value);
+    HRESULT GetFlag ([in] BMDDeckLinkFrameMetadataID metadataID, [out] BOOL* value);
+    HRESULT GetString ([in] BMDDeckLinkFrameMetadataID metadataID, [out] BSTR* value);
+    HRESULT GetBytes ([in] BMDDeckLinkFrameMetadataID metadataID, [out] void* buffer /* optional */, [in, out] unsigned int* bufferSize);
+};
+
+/* Interface IDeckLinkVideoInputFrame - Provided by the IDeckLinkVideoInput frame arrival callback. */
+
+[
+    object,
+    uuid(05CFE374-537C-4094-9A57-680525118F44),
+    local,
+    helpstring("Provided by the IDeckLinkVideoInput frame arrival callback.")
+] interface IDeckLinkVideoInputFrame : IDeckLinkVideoFrame
+{
+    HRESULT GetStreamTime ([out] BMDTimeValue* frameTime, [out] BMDTimeValue* frameDuration, [in] BMDTimeScale timeScale);
+    HRESULT GetHardwareReferenceTimestamp ([in] BMDTimeScale timeScale, [out] BMDTimeValue* frameTime, [out] BMDTimeValue* frameDuration);
+};
+
+/* Interface IDeckLinkAncillaryPacket - On output, user needs to implement this interface */
+
+[
+    object,
+    uuid(CC5BBF7E-029C-4D3B-9158-6000EF5E3670),
+    helpstring("On output, user needs to implement this interface")
+] interface IDeckLinkAncillaryPacket : IUnknown
+{
+    HRESULT GetBytes ([in] BMDAncillaryPacketFormat format /* For output, only one format need be offered */, [out] const void** data /* Optional */, [out] unsigned int* size /* Optional */);
+    unsigned char GetDID (void);
+    unsigned char GetSDID (void);
+    unsigned int GetLineNumber (void);	// On output, zero is auto
+    unsigned char GetDataStreamIndex (void);	// Usually zero. Can only be 1 if non-SD and the first data stream is completely full
+};
+
+/* Interface IDeckLinkAncillaryPacketIterator - Enumerates ancillary packets */
+
+[
+    object,
+    uuid(3FC8994B-88FB-4C17-968F-9AAB69D964A7),
+    helpstring("Enumerates ancillary packets")
+] interface IDeckLinkAncillaryPacketIterator : IUnknown
+{
+    HRESULT Next ([out] IDeckLinkAncillaryPacket** packet);
+};
+
+/* Interface IDeckLinkVideoFrameAncillaryPackets - Obtained through QueryInterface on an IDeckLinkVideoFrame object. */
+
+[
+    object,
+    uuid(6C186C0F-459E-41D8-AEE2-4812D81AEE68),
+    local,
+    helpstring("Obtained through QueryInterface on an IDeckLinkVideoFrame object.")
+] interface IDeckLinkVideoFrameAncillaryPackets : IUnknown
+{
+    HRESULT GetPacketIterator ([out] IDeckLinkAncillaryPacketIterator** iterator);
+    HRESULT GetFirstPacketByID ([in] unsigned char DID, [in] unsigned char SDID, [out] IDeckLinkAncillaryPacket** packet);
+    HRESULT AttachPacket ([in] IDeckLinkAncillaryPacket* packet);	// Implement IDeckLinkAncillaryPacket to output your own
+    HRESULT DetachPacket ([in] IDeckLinkAncillaryPacket* packet);
+    HRESULT DetachAllPackets (void);
+};
+
+/* Interface IDeckLinkVideoFrameAncillary - Use of IDeckLinkVideoFrameAncillaryPackets is preferred. Obtained through QueryInterface on an IDeckLinkVideoFrame object. */
+
+[
+    object,
+    uuid(732E723C-D1A4-4E29-9E8E-4A88797A0004),
+    local,
+    helpstring("Use of IDeckLinkVideoFrameAncillaryPackets is preferred. Obtained through QueryInterface on an IDeckLinkVideoFrame object.")
+] interface IDeckLinkVideoFrameAncillary : IUnknown
+{
+    HRESULT GetBufferForVerticalBlankingLine ([in] unsigned int lineNumber, [out] void** buffer);	// Pixels/rowbytes is same as display mode, except for above HD where it's 1920 pixels for UHD modes and 2048 pixels for DCI modes
+    BMDPixelFormat GetPixelFormat (void);
+    BMDDisplayMode GetDisplayMode (void);
+};
+
+/* Interface IDeckLinkEncoderPacket - Interface to encapsulate an encoded packet. */
+
+[
+    object,
+    uuid(B693F36C-316E-4AF1-B6C2-F389A4BCA620),
+    local,
+    helpstring("Interface to encapsulate an encoded packet.")
+] interface IDeckLinkEncoderPacket : IUnknown
+{
+    HRESULT GetBytes ([out] void** buffer);
+    long GetSize (void);
+    HRESULT GetStreamTime ([out] BMDTimeValue* frameTime, [in] BMDTimeScale timeScale);
+    BMDPacketType GetPacketType (void);
+};
+
+/* Interface IDeckLinkEncoderVideoPacket - Provided by the IDeckLinkEncoderInput video packet arrival callback. */
+
+[
+    object,
+    uuid(4E7FD944-E8C7-4EAC-B8C0-7B77F80F5AE0),
+    local,
+    helpstring("Provided by the IDeckLinkEncoderInput video packet arrival callback.")
+] interface IDeckLinkEncoderVideoPacket : IDeckLinkEncoderPacket
+{
+    BMDPixelFormat GetPixelFormat (void);
+    HRESULT GetHardwareReferenceTimestamp ([in] BMDTimeScale timeScale, [out] BMDTimeValue* frameTime, [out] BMDTimeValue* frameDuration);
+    HRESULT GetTimecode ([in] BMDTimecodeFormat format, [out] IDeckLinkTimecode** timecode);
+};
+
+/* Interface IDeckLinkEncoderAudioPacket - Provided by the IDeckLinkEncoderInput audio packet arrival callback. */
+
+[
+    object,
+    uuid(49E8EDC8-693B-4E14-8EF6-12C658F5A07A),
+    local,
+    helpstring("Provided by the IDeckLinkEncoderInput audio packet arrival callback.")
+] interface IDeckLinkEncoderAudioPacket : IDeckLinkEncoderPacket
+{
+    BMDAudioFormat GetAudioFormat (void);
+};
+
+/* Interface IDeckLinkH265NALPacket - Obtained through QueryInterface on an IDeckLinkEncoderVideoPacket object */
+
+[
+    object,
+    uuid(639C8E0B-68D5-4BDE-A6D4-95F3AEAFF2E7),
+    local,
+    helpstring("Obtained through QueryInterface on an IDeckLinkEncoderVideoPacket object")
+] interface IDeckLinkH265NALPacket : IDeckLinkEncoderVideoPacket
+{
+    HRESULT GetUnitType ([out] unsigned char* unitType);
+    HRESULT GetBytesNoPrefix ([out] void** buffer);
+    long GetSizeNoPrefix (void);
+};
+
+/* Interface IDeckLinkAudioInputPacket - Provided by the IDeckLinkInput callback. */
+
+[
+    object,
+    uuid(E43D5870-2894-11DE-8C30-0800200C9A66),
+    local,
+    helpstring("Provided by the IDeckLinkInput callback.")
+] interface IDeckLinkAudioInputPacket : IUnknown
+{
+    long GetSampleFrameCount (void);
+    HRESULT GetBytes ([out] void** buffer);
+    HRESULT GetPacketTime ([out] BMDTimeValue* packetTime, [in] BMDTimeScale timeScale);
+};
+
+/* Interface IDeckLinkScreenPreviewCallback - Screen preview callback */
+
+[
+    object,
+    uuid(B1D3F49A-85FE-4C5D-95C8-0B5D5DCCD438),
+    local,
+    helpstring("Screen preview callback")
+] interface IDeckLinkScreenPreviewCallback : IUnknown
+{
+    HRESULT DrawFrame ([in] IDeckLinkVideoFrame* theFrame);
+};
+
+/* Interface IDeckLinkGLScreenPreviewHelper - Created with CoCreateInstance on platforms with native COM support or from CreateOpenGLScreenPreviewHelper/CreateOpenGL3ScreenPreviewHelper on other platforms. */
+
+[
+    object,
+    uuid(504E2209-CAC7-4C1A-9FB4-C5BB6274D22F),
+    local,
+    helpstring("Created with CoCreateInstance on platforms with native COM support or from CreateOpenGLScreenPreviewHelper/CreateOpenGL3ScreenPreviewHelper on other platforms.")
+] interface IDeckLinkGLScreenPreviewHelper : IUnknown
+{
+
+    /* Methods must be called with OpenGL context set */
+
+    HRESULT InitializeGL (void);
+    HRESULT PaintGL (void);
+    HRESULT SetFrame ([in] IDeckLinkVideoFrame* theFrame);
+    HRESULT Set3DPreviewFormat ([in] BMD3DPreviewFormat previewFormat);
+};
+
+/* Interface IDeckLinkDX9ScreenPreviewHelper - Created with CoCreateInstance. */
+
+[
+    object,
+    uuid(2094B522-D1A1-40C0-9AC7-1C012218EF02),
+    local,
+    helpstring("Created with CoCreateInstance.")
+] interface IDeckLinkDX9ScreenPreviewHelper : IUnknown
+{
+    HRESULT Initialize ([in] void* device);
+    HRESULT Render ([in] RECT* rc);
+    HRESULT SetFrame ([in] IDeckLinkVideoFrame* theFrame);
+    HRESULT Set3DPreviewFormat ([in] BMD3DPreviewFormat previewFormat);
+};
+
+/* Interface IDeckLinkWPFDX9ScreenPreviewHelper - Created with CoCreateInstance(). */
+
+[
+    object,
+    uuid(AD8EC84A-7DDE-11E9-8F9E-2A86E4085A59),
+    local,
+    helpstring("Created with CoCreateInstance().")
+] interface IDeckLinkWPFDX9ScreenPreviewHelper : IUnknown
+{
+    HRESULT Initialize (void);
+    HRESULT Render (void);
+    HRESULT SetSurfaceSize ([in] unsigned int width, [in] unsigned int height);
+    HRESULT SetFrame ([in] IDeckLinkVideoFrame* theFrame);
+    HRESULT Set3DPreviewFormat ([in] BMD3DPreviewFormat previewFormat);
+    HRESULT GetBackBuffer ([out] void** backBuffer);
+};
+
+/* Interface IDeckLinkNotificationCallback - DeckLink Notification Callback Interface */
+
+[
+    object,
+    uuid(b002a1ec-070d-4288-8289-bd5d36e5ff0d),
+    local,
+    helpstring("DeckLink Notification Callback Interface")
+] interface IDeckLinkNotificationCallback : IUnknown
+{
+    HRESULT Notify ([in] BMDNotifications topic, [in] ULONGLONG param1, [in] ULONGLONG param2);
+};
+
+/* Interface IDeckLinkNotification - DeckLink Notification interface */
+
+[
+    object,
+    uuid(b85df4c8-bdf5-47c1-8064-28162ebdd4eb),
+    local,
+    helpstring("DeckLink Notification interface")
+] interface IDeckLinkNotification : IUnknown
+{
+    HRESULT Subscribe ([in] BMDNotifications topic, [in] IDeckLinkNotificationCallback* theCallback);
+    HRESULT Unsubscribe ([in] BMDNotifications topic, [in] IDeckLinkNotificationCallback* theCallback);
+};
+
+/* Interface IDeckLinkProfileAttributes - Created by QueryInterface from an IDeckLinkProfile, or from IDeckLink. When queried from IDeckLink, interrogates the active profile */
+
+[
+    object,
+    uuid(17D4BF8E-4911-473A-80A0-731CF6FF345B),
+    local,
+    helpstring("Created by QueryInterface from an IDeckLinkProfile, or from IDeckLink. When queried from IDeckLink, interrogates the active profile")
+] interface IDeckLinkProfileAttributes : IUnknown
+{
+    HRESULT GetFlag ([in] BMDDeckLinkAttributeID cfgID, [out] BOOL* value);
+    HRESULT GetInt ([in] BMDDeckLinkAttributeID cfgID, [out] LONGLONG* value);
+    HRESULT GetFloat ([in] BMDDeckLinkAttributeID cfgID, [out] double* value);
+    HRESULT GetString ([in] BMDDeckLinkAttributeID cfgID, [out] BSTR* value);
+};
+
+/* Interface IDeckLinkProfileIterator - Enumerates IDeckLinkProfile interfaces */
+
+[
+    object,
+    uuid(29E5A8C0-8BE4-46EB-93AC-31DAAB5B7BF2),
+    helpstring("Enumerates IDeckLinkProfile interfaces")
+] interface IDeckLinkProfileIterator : IUnknown
+{
+    HRESULT Next ([out] IDeckLinkProfile** profile);
+};
+
+/* Interface IDeckLinkProfile - Represents the active profile when queried from IDeckLink */
+
+[
+    object,
+    uuid(16093466-674A-432B-9DA0-1AC2C5A8241C),
+    local,
+    helpstring("Represents the active profile when queried from IDeckLink")
+] interface IDeckLinkProfile : IUnknown
+{
+    HRESULT GetDevice ([out] IDeckLink** device);	// Device affected when this profile becomes active
+    HRESULT IsActive ([out] BOOL* isActive);
+    HRESULT SetActive (void);	// Activating a profile will also change the profile on all devices enumerated by GetPeers. Activation is not complete until IDeckLinkProfileCallback::ProfileActivated is called
+    HRESULT GetPeers ([out] IDeckLinkProfileIterator** profileIterator);	// Profiles of other devices activated with this profile
+};
+
+/* Interface IDeckLinkProfileCallback - Receive notifications about profiles related to this device */
+
+[
+    object,
+    uuid(A4F9341E-97AA-4E04-8935-15F809898CEA),
+    helpstring("Receive notifications about profiles related to this device")
+] interface IDeckLinkProfileCallback : IUnknown
+{
+    HRESULT ProfileChanging ([in] IDeckLinkProfile* profileToBeActivated, [in] BOOL streamsWillBeForcedToStop);	// Called before this device changes profile. User has an opportunity for teardown if streamsWillBeForcedToStop
+    HRESULT ProfileActivated ([in] IDeckLinkProfile* activatedProfile);	// Called after this device has been activated with a new profile
+};
+
+/* Interface IDeckLinkProfileManager - Created by QueryInterface from IDeckLink when a device has multiple optional profiles */
+
+[
+    object,
+    uuid(30D41429-3998-4B6D-84F8-78C94A797C6E),
+    helpstring("Created by QueryInterface from IDeckLink when a device has multiple optional profiles")
+] interface IDeckLinkProfileManager : IUnknown
+{
+    HRESULT GetProfiles ([out] IDeckLinkProfileIterator** profileIterator);	// All available profiles for this device
+    HRESULT GetProfile ([in] BMDProfileID profileID, [out] IDeckLinkProfile** profile);
+    HRESULT SetCallback ([in] IDeckLinkProfileCallback* callback);
+};
+
+/* Interface IDeckLinkStatus - DeckLink Status interface */
+
+[
+    object,
+    uuid(5F558200-4028-49BC-BEAC-DB3FA4A96E46),
+    local,
+    helpstring("DeckLink Status interface")
+] interface IDeckLinkStatus : IUnknown
+{
+    HRESULT GetFlag ([in] BMDDeckLinkStatusID statusID, [out] BOOL* value);
+    HRESULT GetInt ([in] BMDDeckLinkStatusID statusID, [out] LONGLONG* value);
+    HRESULT GetFloat ([in] BMDDeckLinkStatusID statusID, [out] double* value);
+    HRESULT GetString ([in] BMDDeckLinkStatusID statusID, [out] BSTR* value);
+    HRESULT GetBytes ([in] BMDDeckLinkStatusID statusID, [out] void* buffer, [in, out] unsigned int* bufferSize);
+};
+
+/* Interface IDeckLinkKeyer - DeckLink Keyer interface */
+
+[
+    object,
+    uuid(89AFCAF5-65F8-421E-98F7-96FE5F5BFBA3),
+    local,
+    helpstring("DeckLink Keyer interface")
+] interface IDeckLinkKeyer : IUnknown
+{
+    HRESULT Enable ([in] BOOL isExternal);
+    HRESULT SetLevel ([in] unsigned char level);
+    HRESULT RampUp ([in] unsigned int numberOfFrames);
+    HRESULT RampDown ([in] unsigned int numberOfFrames);
+    HRESULT Disable (void);
+};
+
+/* Interface IDeckLinkVideoConversion - Created with CoCreateInstance. */
+
+[
+    object,
+    uuid(3BBCB8A2-DA2C-42D9-B5D8-88083644E99A),
+    local,
+    helpstring("Created with CoCreateInstance.")
+] interface IDeckLinkVideoConversion : IUnknown
+{
+    HRESULT ConvertFrame ([in] IDeckLinkVideoFrame* srcFrame, [in] IDeckLinkVideoFrame* dstFrame);
+};
+
+/* Interface IDeckLinkDeviceNotificationCallback - DeckLink device arrival/removal notification callbacks */
+
+[
+    object,
+    uuid(4997053B-0ADF-4CC8-AC70-7A50C4BE728F),
+    helpstring("DeckLink device arrival/removal notification callbacks")
+] interface IDeckLinkDeviceNotificationCallback : IUnknown
+{
+    HRESULT DeckLinkDeviceArrived ([in] IDeckLink* deckLinkDevice);
+    HRESULT DeckLinkDeviceRemoved ([in] IDeckLink* deckLinkDevice);
+};
+
+/* Interface IDeckLinkDiscovery - DeckLink device discovery */
+
+[
+    object,
+    uuid(CDBF631C-BC76-45FA-B44D-C55059BC6101),
+    helpstring("DeckLink device discovery")
+] interface IDeckLinkDiscovery : IUnknown
+{
+    HRESULT InstallDeviceNotifications ([in] IDeckLinkDeviceNotificationCallback* deviceNotificationCallback);
+    HRESULT UninstallDeviceNotifications (void);
+};
+
+/* Coclasses */
+
+importlib("stdole2.tlb");
+
+[
+    uuid(BA6C6F44-6DA5-4DCE-94AA-EE2D1372A676),
+    helpstring("CDeckLinkIterator Class")
+] coclass CDeckLinkIterator
+{
+    [default] interface IDeckLinkIterator;
+};
+
+[
+    uuid(263CA19F-ED09-482E-9F9D-84005783A237),
+    helpstring("CDeckLinkAPIInformation Class")
+] coclass CDeckLinkAPIInformation
+{
+    [default] interface IDeckLinkAPIInformation;
+};
+
+[
+    uuid(F63E77C7-B655-4A4A-9AD0-3CA85D394343),
+    helpstring("CDeckLinkGLScreenPreviewHelper Class")
+] coclass CDeckLinkGLScreenPreviewHelper
+{
+    [default] interface IDeckLinkGLScreenPreviewHelper;
+};
+
+[
+    uuid(00696A71-EBC7-491F-AC02-18D3393F33F0),
+    helpstring("CDeckLinkGL3ScreenPreviewHelper Class. Requires OpenGL 3.2 support and provides improved performance and color handling")
+] coclass CDeckLinkGL3ScreenPreviewHelper
+{
+    [default] interface IDeckLinkGLScreenPreviewHelper;
+};
+
+[
+    uuid(CC010023-E01D-4525-9D59-80C8AB3DC7A0),
+    helpstring("CDeckLinkDX9ScreenPreviewHelper Class")
+] coclass CDeckLinkDX9ScreenPreviewHelper
+{
+    [default] interface IDeckLinkDX9ScreenPreviewHelper;
+};
+
+[
+    uuid(EF2A8478-7DDF-11E9-8F9E-2A86E4085A59),
+    helpstring("CDeckLinkWPFDX9ScreenPreviewHelper Class")
+] coclass CDeckLinkWPFDX9ScreenPreviewHelper
+{
+    [default] interface IDeckLinkWPFDX9ScreenPreviewHelper;
+};
+
+[
+    uuid(7DBBBB11-5B7B-467D-AEA4-CEA468FD368C),
+    helpstring("CDeckLinkVideoConversion Class")
+] coclass CDeckLinkVideoConversion
+{
+    [default] interface IDeckLinkVideoConversion;
+};
+
+[
+    uuid(22FBFC33-8D07-495C-A5BF-DAB5EA9B82DB),
+    helpstring("CDeckLinkDiscovery Class")
+] coclass CDeckLinkDiscovery
+{
+    [default] interface IDeckLinkDiscovery;
+};
+
+[
+    uuid(F891AD29-D0C2-46E9-A926-4E2D0DD8CFAD),
+    helpstring("CDeckLinkVideoFrameAncillaryPackets Class")
+] coclass CDeckLinkVideoFrameAncillaryPackets
+{
+    [default] interface IDeckLinkVideoFrameAncillaryPackets;
+};
+
+// import deprecated interfaces
+
+#include "DeckLinkAPI_v11_5_1.idl"
+#include "DeckLinkAPI_v10_11.idl"
+#include "DeckLinkAPI_v10_9.idl"
+#include "DeckLinkAPIStreaming_v10_8.idl"
+#include "DeckLinkAPI_v10_4.idl"
+#include "DeckLinkAPI_v10_2.idl"
+#include "DeckLinkAPI_v11_5.idl"
+#include "DeckLinkAPI_v11_4.idl"
+#include "DeckLinkAPI_v10_8.idl"
+#include "DeckLinkAPI_v10_6.idl"
+#include "DeckLinkAPI_v10_5.idl"
+#include "DeckLinkAPI_v9_9.idl"
+#include "DeckLinkAPI_v9_2.idl"
+#include "DeckLinkAPI_v8_1.idl"
+#include "DeckLinkAPI_v8_0.idl"
+#include "DeckLinkAPI_v7_9.idl"
+#include "DeckLinkAPI_v7_6.idl"
+#include "DeckLinkAPI_v7_3.idl"
+#include "DeckLinkAPI_v7_1.idl"
+};
diff --git a/DeckLinkSDK/Win/include/DeckLinkAPIConfiguration.idl b/DeckLinkSDK/Win/include/DeckLinkAPIConfiguration.idl
new file mode 100644
index 0000000000..10ebc09cd6
--- /dev/null
+++ b/DeckLinkSDK/Win/include/DeckLinkAPIConfiguration.idl
@@ -0,0 +1,252 @@
+/* -LICENSE-START-
+** Copyright (c) 2022 Blackmagic Design
+**
+** Permission is hereby granted, free of charge, to any person or organization
+** obtaining a copy of the software and accompanying documentation covered by
+** this license (the "Software") to use, reproduce, display, distribute,
+** execute, and transmit the Software, and to prepare derivative works of the
+** Software, and to permit third-parties to whom the Software is furnished to
+** do so, all subject to the following:
+**
+** The copyright notices in the Software and this entire statement, including
+** the above license grant, this restriction and the following disclaimer,
+** must be included in all copies of the Software, in whole or in part, and
+** all derivative works of the Software, unless such copies or derivative
+** works are solely in the form of machine-executable object code generated by
+** a source language processor.
+**
+** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+** DEALINGS IN THE SOFTWARE.
+** -LICENSE-END-
+*/
+
+#ifndef BMD_CONST
+    #if defined(_MSC_VER)
+        #define BMD_CONST __declspec(selectany) static const
+    #else
+        #define BMD_CONST static const
+    #endif
+#endif
+
+// Type Declarations
+
+
+// Enumeration Mapping
+
+cpp_quote("#if 0")
+cpp_quote("#endif")
+
+/* Enum BMDDeckLinkConfigurationID - DeckLink Configuration ID */
+
+typedef [v1_enum] enum _BMDDeckLinkConfigurationID {
+
+    /* Serial port Flags */
+
+    bmdDeckLinkConfigSwapSerialRxTx                              = /* 'ssrt' */ 0x73737274,
+
+    /* Video Input/Output Integers */
+
+    bmdDeckLinkConfigHDMI3DPackingFormat                         = /* '3dpf' */ 0x33647066,
+    bmdDeckLinkConfigBypass                                      = /* 'byps' */ 0x62797073,
+    bmdDeckLinkConfigClockTimingAdjustment                       = /* 'ctad' */ 0x63746164,
+
+    /* Audio Input/Output Flags */
+
+    bmdDeckLinkConfigAnalogAudioConsumerLevels                   = /* 'aacl' */ 0x6161636C,
+    bmdDeckLinkConfigSwapHDMICh3AndCh4OnInput                    = /* 'hi34' */ 0x68693334,
+    bmdDeckLinkConfigSwapHDMICh3AndCh4OnOutput                   = /* 'ho34' */ 0x686F3334,
+
+    /* Video Output Flags */
+
+    bmdDeckLinkConfigFieldFlickerRemoval                         = /* 'fdfr' */ 0x66646672,
+    bmdDeckLinkConfigHD1080p24ToHD1080i5994Conversion            = /* 'to59' */ 0x746F3539,
+    bmdDeckLinkConfig444SDIVideoOutput                           = /* '444o' */ 0x3434346F,
+    bmdDeckLinkConfigBlackVideoOutputDuringCapture               = /* 'bvoc' */ 0x62766F63,
+    bmdDeckLinkConfigLowLatencyVideoOutput                       = /* 'llvo' */ 0x6C6C766F,
+    bmdDeckLinkConfigDownConversionOnAllAnalogOutput             = /* 'caao' */ 0x6361616F,
+    bmdDeckLinkConfigSMPTELevelAOutput                           = /* 'smta' */ 0x736D7461,
+    bmdDeckLinkConfigRec2020Output                               = /* 'rec2' */ 0x72656332,	// Ensure output is Rec.2020 colorspace
+    bmdDeckLinkConfigQuadLinkSDIVideoOutputSquareDivisionSplit   = /* 'SDQS' */ 0x53445153,
+    bmdDeckLinkConfigOutput1080pAsPsF                            = /* 'pfpr' */ 0x70667072,
+
+    /* Video Output Integers */
+
+    bmdDeckLinkConfigVideoOutputConnection                       = /* 'vocn' */ 0x766F636E,
+    bmdDeckLinkConfigVideoOutputConversionMode                   = /* 'vocm' */ 0x766F636D,
+    bmdDeckLinkConfigAnalogVideoOutputFlags                      = /* 'avof' */ 0x61766F66,
+    bmdDeckLinkConfigReferenceInputTimingOffset                  = /* 'glot' */ 0x676C6F74,
+    bmdDeckLinkConfigVideoOutputIdleOperation                    = /* 'voio' */ 0x766F696F,
+    bmdDeckLinkConfigDefaultVideoOutputMode                      = /* 'dvom' */ 0x64766F6D,
+    bmdDeckLinkConfigDefaultVideoOutputModeFlags                 = /* 'dvof' */ 0x64766F66,
+    bmdDeckLinkConfigSDIOutputLinkConfiguration                  = /* 'solc' */ 0x736F6C63,
+    bmdDeckLinkConfigHDMITimecodePacking                         = /* 'htpk' */ 0x6874706B,
+    bmdDeckLinkConfigPlaybackGroup                               = /* 'plgr' */ 0x706C6772,
+
+    /* Video Output Floats */
+
+    bmdDeckLinkConfigVideoOutputComponentLumaGain                = /* 'oclg' */ 0x6F636C67,
+    bmdDeckLinkConfigVideoOutputComponentChromaBlueGain          = /* 'occb' */ 0x6F636362,
+    bmdDeckLinkConfigVideoOutputComponentChromaRedGain           = /* 'occr' */ 0x6F636372,
+    bmdDeckLinkConfigVideoOutputCompositeLumaGain                = /* 'oilg' */ 0x6F696C67,
+    bmdDeckLinkConfigVideoOutputCompositeChromaGain              = /* 'oicg' */ 0x6F696367,
+    bmdDeckLinkConfigVideoOutputSVideoLumaGain                   = /* 'oslg' */ 0x6F736C67,
+    bmdDeckLinkConfigVideoOutputSVideoChromaGain                 = /* 'oscg' */ 0x6F736367,
+
+    /* Video Input Flags */
+
+    bmdDeckLinkConfigVideoInputScanning                          = /* 'visc' */ 0x76697363,	// Applicable to H264 Pro Recorder only
+    bmdDeckLinkConfigUseDedicatedLTCInput                        = /* 'dltc' */ 0x646C7463,	// Use timecode from LTC input instead of SDI stream
+    bmdDeckLinkConfigSDIInput3DPayloadOverride                   = /* '3dds' */ 0x33646473,
+    bmdDeckLinkConfigCapture1080pAsPsF                           = /* 'cfpr' */ 0x63667072,
+
+    /* Video Input Integers */
+
+    bmdDeckLinkConfigVideoInputConnection                        = /* 'vicn' */ 0x7669636E,
+    bmdDeckLinkConfigAnalogVideoInputFlags                       = /* 'avif' */ 0x61766966,
+    bmdDeckLinkConfigVideoInputConversionMode                    = /* 'vicm' */ 0x7669636D,
+    bmdDeckLinkConfig32PulldownSequenceInitialTimecodeFrame      = /* 'pdif' */ 0x70646966,
+    bmdDeckLinkConfigVANCSourceLine1Mapping                      = /* 'vsl1' */ 0x76736C31,
+    bmdDeckLinkConfigVANCSourceLine2Mapping                      = /* 'vsl2' */ 0x76736C32,
+    bmdDeckLinkConfigVANCSourceLine3Mapping                      = /* 'vsl3' */ 0x76736C33,
+    bmdDeckLinkConfigCapturePassThroughMode                      = /* 'cptm' */ 0x6370746D,
+    bmdDeckLinkConfigCaptureGroup                                = /* 'cpgr' */ 0x63706772,
+
+    /* Video Input Floats */
+
+    bmdDeckLinkConfigVideoInputComponentLumaGain                 = /* 'iclg' */ 0x69636C67,
+    bmdDeckLinkConfigVideoInputComponentChromaBlueGain           = /* 'iccb' */ 0x69636362,
+    bmdDeckLinkConfigVideoInputComponentChromaRedGain            = /* 'iccr' */ 0x69636372,
+    bmdDeckLinkConfigVideoInputCompositeLumaGain                 = /* 'iilg' */ 0x69696C67,
+    bmdDeckLinkConfigVideoInputCompositeChromaGain               = /* 'iicg' */ 0x69696367,
+    bmdDeckLinkConfigVideoInputSVideoLumaGain                    = /* 'islg' */ 0x69736C67,
+    bmdDeckLinkConfigVideoInputSVideoChromaGain                  = /* 'iscg' */ 0x69736367,
+
+    /* Keying Integers */
+
+    bmdDeckLinkConfigInternalKeyingAncillaryDataSource           = /* 'ikas' */ 0x696B6173,
+
+    /* Audio Input Flags */
+
+    bmdDeckLinkConfigMicrophonePhantomPower                      = /* 'mphp' */ 0x6D706870,
+
+    /* Audio Input Integers */
+
+    bmdDeckLinkConfigAudioInputConnection                        = /* 'aicn' */ 0x6169636E,
+
+    /* Audio Input Floats */
+
+    bmdDeckLinkConfigAnalogAudioInputScaleChannel1               = /* 'ais1' */ 0x61697331,
+    bmdDeckLinkConfigAnalogAudioInputScaleChannel2               = /* 'ais2' */ 0x61697332,
+    bmdDeckLinkConfigAnalogAudioInputScaleChannel3               = /* 'ais3' */ 0x61697333,
+    bmdDeckLinkConfigAnalogAudioInputScaleChannel4               = /* 'ais4' */ 0x61697334,
+    bmdDeckLinkConfigDigitalAudioInputScale                      = /* 'dais' */ 0x64616973,
+    bmdDeckLinkConfigMicrophoneInputGain                         = /* 'micg' */ 0x6D696367,
+
+    /* Audio Output Integers */
+
+    bmdDeckLinkConfigAudioOutputAESAnalogSwitch                  = /* 'aoaa' */ 0x616F6161,
+
+    /* Audio Output Floats */
+
+    bmdDeckLinkConfigAnalogAudioOutputScaleChannel1              = /* 'aos1' */ 0x616F7331,
+    bmdDeckLinkConfigAnalogAudioOutputScaleChannel2              = /* 'aos2' */ 0x616F7332,
+    bmdDeckLinkConfigAnalogAudioOutputScaleChannel3              = /* 'aos3' */ 0x616F7333,
+    bmdDeckLinkConfigAnalogAudioOutputScaleChannel4              = /* 'aos4' */ 0x616F7334,
+    bmdDeckLinkConfigDigitalAudioOutputScale                     = /* 'daos' */ 0x64616F73,
+    bmdDeckLinkConfigHeadphoneVolume                             = /* 'hvol' */ 0x68766F6C,
+
+    /* Device Information Strings */
+
+    bmdDeckLinkConfigDeviceInformationLabel                      = /* 'dila' */ 0x64696C61,
+    bmdDeckLinkConfigDeviceInformationSerialNumber               = /* 'disn' */ 0x6469736E,
+    bmdDeckLinkConfigDeviceInformationCompany                    = /* 'dico' */ 0x6469636F,
+    bmdDeckLinkConfigDeviceInformationPhone                      = /* 'diph' */ 0x64697068,
+    bmdDeckLinkConfigDeviceInformationEmail                      = /* 'diem' */ 0x6469656D,
+    bmdDeckLinkConfigDeviceInformationDate                       = /* 'dida' */ 0x64696461,
+
+    /* Deck Control Integers */
+
+    bmdDeckLinkConfigDeckControlConnection                       = /* 'dcco' */ 0x6463636F
+} BMDDeckLinkConfigurationID;
+
+/* Enum BMDDeckLinkEncoderConfigurationID - DeckLink Encoder Configuration ID */
+
+typedef [v1_enum] enum _BMDDeckLinkEncoderConfigurationID {
+
+    /* Video Encoder Integers */
+
+    bmdDeckLinkEncoderConfigPreferredBitDepth                    = /* 'epbr' */ 0x65706272,
+    bmdDeckLinkEncoderConfigFrameCodingMode                      = /* 'efcm' */ 0x6566636D,
+
+    /* HEVC/H.265 Encoder Integers */
+
+    bmdDeckLinkEncoderConfigH265TargetBitrate                    = /* 'htbr' */ 0x68746272,
+
+    /* DNxHR/DNxHD Compression ID */
+
+    bmdDeckLinkEncoderConfigDNxHRCompressionID                   = /* 'dcid' */ 0x64636964,
+
+    /* DNxHR/DNxHD Level */
+
+    bmdDeckLinkEncoderConfigDNxHRLevel                           = /* 'dlev' */ 0x646C6576,
+
+    /* Encoded Sample Decriptions */
+
+    bmdDeckLinkEncoderConfigMPEG4SampleDescription               = /* 'stsE' */ 0x73747345,	// Full MPEG4 sample description (aka SampleEntry of an 'stsd' atom-box). Useful for MediaFoundation, QuickTime, MKV and more
+    bmdDeckLinkEncoderConfigMPEG4CodecSpecificDesc               = /* 'esds' */ 0x65736473	// Sample description extensions only (atom stream, each with size and fourCC header). Useful for AVFoundation, VideoToolbox, MKV and more
+} BMDDeckLinkEncoderConfigurationID;
+
+// Forward Declarations
+
+interface IDeckLinkConfiguration;
+interface IDeckLinkEncoderConfiguration;
+
+/* Interface IDeckLinkConfiguration - DeckLink Configuration interface */
+
+[
+    object,
+    uuid(912F634B-2D4E-40A4-8AAB-8D80B73F1289),
+    local,
+    helpstring("DeckLink Configuration interface")
+] interface IDeckLinkConfiguration : IUnknown
+{
+    HRESULT SetFlag ([in] BMDDeckLinkConfigurationID cfgID, [in] BOOL value);
+    HRESULT GetFlag ([in] BMDDeckLinkConfigurationID cfgID, [out] BOOL* value);
+    HRESULT SetInt ([in] BMDDeckLinkConfigurationID cfgID, [in] LONGLONG value);
+    HRESULT GetInt ([in] BMDDeckLinkConfigurationID cfgID, [out] LONGLONG* value);
+    HRESULT SetFloat ([in] BMDDeckLinkConfigurationID cfgID, [in] double value);
+    HRESULT GetFloat ([in] BMDDeckLinkConfigurationID cfgID, [out] double* value);
+    HRESULT SetString ([in] BMDDeckLinkConfigurationID cfgID, [in] BSTR value);
+    HRESULT GetString ([in] BMDDeckLinkConfigurationID cfgID, [out] BSTR* value);
+    HRESULT WriteConfigurationToPreferences (void);
+};
+
+/* Interface IDeckLinkEncoderConfiguration - DeckLink Encoder Configuration interface. Obtained from IDeckLinkEncoderInput */
+
+[
+    object,
+    uuid(138050E5-C60A-4552-BF3F-0F358049327E),
+    local,
+    helpstring("DeckLink Encoder Configuration interface. Obtained from IDeckLinkEncoderInput")
+] interface IDeckLinkEncoderConfiguration : IUnknown
+{
+    HRESULT SetFlag ([in] BMDDeckLinkEncoderConfigurationID cfgID, [in] BOOL value);
+    HRESULT GetFlag ([in] BMDDeckLinkEncoderConfigurationID cfgID, [out] BOOL* value);
+    HRESULT SetInt ([in] BMDDeckLinkEncoderConfigurationID cfgID, [in] LONGLONG value);
+    HRESULT GetInt ([in] BMDDeckLinkEncoderConfigurationID cfgID, [out] LONGLONG* value);
+    HRESULT SetFloat ([in] BMDDeckLinkEncoderConfigurationID cfgID, [in] double value);
+    HRESULT GetFloat ([in] BMDDeckLinkEncoderConfigurationID cfgID, [out] double* value);
+    HRESULT SetString ([in] BMDDeckLinkEncoderConfigurationID cfgID, [in] BSTR value);
+    HRESULT GetString ([in] BMDDeckLinkEncoderConfigurationID cfgID, [out] BSTR* value);
+    HRESULT GetBytes ([in] BMDDeckLinkEncoderConfigurationID cfgID, [out] void* buffer /* optional */, [in, out] unsigned int* bufferSize);
+};
+
+/* Coclasses */
+
+importlib("stdole2.tlb");
+
diff --git a/DeckLinkSDK/Win/include/DeckLinkAPIDeckControl.idl b/DeckLinkSDK/Win/include/DeckLinkAPIDeckControl.idl
new file mode 100644
index 0000000000..70275040b5
--- /dev/null
+++ b/DeckLinkSDK/Win/include/DeckLinkAPIDeckControl.idl
@@ -0,0 +1,204 @@
+/* -LICENSE-START-
+** Copyright (c) 2022 Blackmagic Design
+**
+** Permission is hereby granted, free of charge, to any person or organization
+** obtaining a copy of the software and accompanying documentation covered by
+** this license (the "Software") to use, reproduce, display, distribute,
+** execute, and transmit the Software, and to prepare derivative works of the
+** Software, and to permit third-parties to whom the Software is furnished to
+** do so, all subject to the following:
+**
+** The copyright notices in the Software and this entire statement, including
+** the above license grant, this restriction and the following disclaimer,
+** must be included in all copies of the Software, in whole or in part, and
+** all derivative works of the Software, unless such copies or derivative
+** works are solely in the form of machine-executable object code generated by
+** a source language processor.
+**
+** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+** DEALINGS IN THE SOFTWARE.
+** -LICENSE-END-
+*/
+
+#ifndef BMD_CONST
+    #if defined(_MSC_VER)
+        #define BMD_CONST __declspec(selectany) static const
+    #else
+        #define BMD_CONST static const
+    #endif
+#endif
+
+// Type Declarations
+
+
+// Enumeration Mapping
+
+cpp_quote("typedef unsigned int BMDDeckControlStatusFlags;")
+cpp_quote("typedef unsigned int BMDDeckControlExportModeOpsFlags;")
+cpp_quote("#if 0")
+typedef enum _BMDDeckControlStatusFlags BMDDeckControlStatusFlags;
+typedef enum _BMDDeckControlExportModeOpsFlags BMDDeckControlExportModeOpsFlags;
+cpp_quote("#endif")
+
+/* Enum BMDDeckControlMode - DeckControl mode */
+
+typedef [v1_enum] enum _BMDDeckControlMode {
+    bmdDeckControlNotOpened                                      = /* 'ntop' */ 0x6E746F70,
+    bmdDeckControlVTRControlMode                                 = /* 'vtrc' */ 0x76747263,
+    bmdDeckControlExportMode                                     = /* 'expm' */ 0x6578706D,
+    bmdDeckControlCaptureMode                                    = /* 'capm' */ 0x6361706D
+} BMDDeckControlMode;
+
+/* Enum BMDDeckControlEvent - DeckControl event */
+
+typedef [v1_enum] enum _BMDDeckControlEvent {
+    bmdDeckControlAbortedEvent                                   = /* 'abte' */ 0x61627465,	// This event is triggered when a capture or edit-to-tape operation is aborted.
+
+    /* Export-To-Tape events */
+
+    bmdDeckControlPrepareForExportEvent                          = /* 'pfee' */ 0x70666565,	// This event is triggered a few frames before reaching the in-point. IDeckLinkInput::StartScheduledPlayback should be called at this point.
+    bmdDeckControlExportCompleteEvent                            = /* 'exce' */ 0x65786365,	// This event is triggered a few frames after reaching the out-point. At this point, it is safe to stop playback. Upon reception of this event the deck's control mode is set back to bmdDeckControlVTRControlMode.
+
+    /* Capture events */
+
+    bmdDeckControlPrepareForCaptureEvent                         = /* 'pfce' */ 0x70666365,	// This event is triggered a few frames before reaching the in-point. The serial timecode attached to IDeckLinkVideoInputFrames is now valid.
+    bmdDeckControlCaptureCompleteEvent                           = /* 'ccev' */ 0x63636576	// This event is triggered a few frames after reaching the out-point. Upon reception of this event the deck's control mode is set back to bmdDeckControlVTRControlMode.
+} BMDDeckControlEvent;
+
+/* Enum BMDDeckControlVTRControlState - VTR Control state */
+
+typedef [v1_enum] enum _BMDDeckControlVTRControlState {
+    bmdDeckControlNotInVTRControlMode                            = /* 'nvcm' */ 0x6E76636D,
+    bmdDeckControlVTRControlPlaying                              = /* 'vtrp' */ 0x76747270,
+    bmdDeckControlVTRControlRecording                            = /* 'vtrr' */ 0x76747272,
+    bmdDeckControlVTRControlStill                                = /* 'vtra' */ 0x76747261,
+    bmdDeckControlVTRControlShuttleForward                       = /* 'vtsf' */ 0x76747366,
+    bmdDeckControlVTRControlShuttleReverse                       = /* 'vtsr' */ 0x76747372,
+    bmdDeckControlVTRControlJogForward                           = /* 'vtjf' */ 0x76746A66,
+    bmdDeckControlVTRControlJogReverse                           = /* 'vtjr' */ 0x76746A72,
+    bmdDeckControlVTRControlStopped                              = /* 'vtro' */ 0x7674726F
+} BMDDeckControlVTRControlState;
+
+/* Enum BMDDeckControlStatusFlags - Deck Control status flags */
+
+[v1_enum] enum _BMDDeckControlStatusFlags {
+    bmdDeckControlStatusDeckConnected                            = 1 << 0,
+    bmdDeckControlStatusRemoteMode                               = 1 << 1,
+    bmdDeckControlStatusRecordInhibited                          = 1 << 2,
+    bmdDeckControlStatusCassetteOut                              = 1 << 3
+};
+
+/* Enum BMDDeckControlExportModeOpsFlags - Export mode flags */
+
+[v1_enum] enum _BMDDeckControlExportModeOpsFlags {
+    bmdDeckControlExportModeInsertVideo                          = 1 << 0,
+    bmdDeckControlExportModeInsertAudio1                         = 1 << 1,
+    bmdDeckControlExportModeInsertAudio2                         = 1 << 2,
+    bmdDeckControlExportModeInsertAudio3                         = 1 << 3,
+    bmdDeckControlExportModeInsertAudio4                         = 1 << 4,
+    bmdDeckControlExportModeInsertAudio5                         = 1 << 5,
+    bmdDeckControlExportModeInsertAudio6                         = 1 << 6,
+    bmdDeckControlExportModeInsertAudio7                         = 1 << 7,
+    bmdDeckControlExportModeInsertAudio8                         = 1 << 8,
+    bmdDeckControlExportModeInsertAudio9                         = 1 << 9,
+    bmdDeckControlExportModeInsertAudio10                        = 1 << 10,
+    bmdDeckControlExportModeInsertAudio11                        = 1 << 11,
+    bmdDeckControlExportModeInsertAudio12                        = 1 << 12,
+    bmdDeckControlExportModeInsertTimeCode                       = 1 << 13,
+    bmdDeckControlExportModeInsertAssemble                       = 1 << 14,
+    bmdDeckControlExportModeInsertPreview                        = 1 << 15,
+    bmdDeckControlUseManualExport                                = 1 << 16
+};
+
+/* Enum BMDDeckControlError - Deck Control error */
+
+typedef [v1_enum] enum _BMDDeckControlError {
+    bmdDeckControlNoError                                        = /* 'noer' */ 0x6E6F6572,
+    bmdDeckControlModeError                                      = /* 'moer' */ 0x6D6F6572,
+    bmdDeckControlMissedInPointError                             = /* 'mier' */ 0x6D696572,
+    bmdDeckControlDeckTimeoutError                               = /* 'dter' */ 0x64746572,
+    bmdDeckControlCommandFailedError                             = /* 'cfer' */ 0x63666572,
+    bmdDeckControlDeviceAlreadyOpenedError                       = /* 'dalo' */ 0x64616C6F,
+    bmdDeckControlFailedToOpenDeviceError                        = /* 'fder' */ 0x66646572,
+    bmdDeckControlInLocalModeError                               = /* 'lmer' */ 0x6C6D6572,
+    bmdDeckControlEndOfTapeError                                 = /* 'eter' */ 0x65746572,
+    bmdDeckControlUserAbortError                                 = /* 'uaer' */ 0x75616572,
+    bmdDeckControlNoTapeInDeckError                              = /* 'nter' */ 0x6E746572,
+    bmdDeckControlNoVideoFromCardError                           = /* 'nvfc' */ 0x6E766663,
+    bmdDeckControlNoCommunicationError                           = /* 'ncom' */ 0x6E636F6D,
+    bmdDeckControlBufferTooSmallError                            = /* 'btsm' */ 0x6274736D,
+    bmdDeckControlBadChecksumError                               = /* 'chks' */ 0x63686B73,
+    bmdDeckControlUnknownError                                   = /* 'uner' */ 0x756E6572
+} BMDDeckControlError;
+
+// Forward Declarations
+
+interface IDeckLinkDeckControlStatusCallback;
+interface IDeckLinkDeckControl;
+
+/* Interface IDeckLinkDeckControlStatusCallback - Deck control state change callback. */
+
+[
+    object,
+    uuid(53436FFB-B434-4906-BADC-AE3060FFE8EF),
+    helpstring("Deck control state change callback.")
+] interface IDeckLinkDeckControlStatusCallback : IUnknown
+{
+    HRESULT TimecodeUpdate ([in] BMDTimecodeBCD currentTimecode);
+    HRESULT VTRControlStateChanged ([in] BMDDeckControlVTRControlState newState, [in] BMDDeckControlError error);
+    HRESULT DeckControlEventReceived ([in] BMDDeckControlEvent event, [in] BMDDeckControlError error);
+    HRESULT DeckControlStatusChanged ([in] BMDDeckControlStatusFlags flags, [in] unsigned int mask);
+};
+
+/* Interface IDeckLinkDeckControl - Deck Control main interface */
+
+[
+    object,
+    uuid(8E1C3ACE-19C7-4E00-8B92-D80431D958BE),
+    helpstring("Deck Control main interface")
+] interface IDeckLinkDeckControl : IUnknown
+{
+    HRESULT Open ([in] BMDTimeScale timeScale, [in] BMDTimeValue timeValue, [in] BOOL timecodeIsDropFrame, [out] BMDDeckControlError* error);
+    HRESULT Close ([in] BOOL standbyOn);
+    HRESULT GetCurrentState ([out] BMDDeckControlMode* mode, [out] BMDDeckControlVTRControlState* vtrControlState, [out] BMDDeckControlStatusFlags* flags);
+    HRESULT SetStandby ([in] BOOL standbyOn);
+    HRESULT SendCommand ([in] unsigned char* inBuffer, [in] unsigned int inBufferSize, [out] unsigned char* outBuffer, [out] unsigned int* outDataSize, [in] unsigned int outBufferSize, [out] BMDDeckControlError* error);
+    HRESULT Play ([out] BMDDeckControlError* error);
+    HRESULT Stop ([out] BMDDeckControlError* error);
+    HRESULT TogglePlayStop ([out] BMDDeckControlError* error);
+    HRESULT Eject ([out] BMDDeckControlError* error);
+    HRESULT GoToTimecode ([in] BMDTimecodeBCD timecode, [out] BMDDeckControlError* error);
+    HRESULT FastForward ([in] BOOL viewTape, [out] BMDDeckControlError* error);
+    HRESULT Rewind ([in] BOOL viewTape, [out] BMDDeckControlError* error);
+    HRESULT StepForward ([out] BMDDeckControlError* error);
+    HRESULT StepBack ([out] BMDDeckControlError* error);
+    HRESULT Jog ([in] double rate, [out] BMDDeckControlError* error);
+    HRESULT Shuttle ([in] double rate, [out] BMDDeckControlError* error);
+    HRESULT GetTimecodeString ([out] BSTR* currentTimeCode, [out] BMDDeckControlError* error);
+    HRESULT GetTimecode ([out] IDeckLinkTimecode** currentTimecode, [out] BMDDeckControlError* error);
+    HRESULT GetTimecodeBCD ([out] BMDTimecodeBCD* currentTimecode, [out] BMDDeckControlError* error);
+    HRESULT SetPreroll ([in] unsigned int prerollSeconds);
+    HRESULT GetPreroll ([out] unsigned int* prerollSeconds);
+    HRESULT SetExportOffset ([in] int exportOffsetFields);
+    HRESULT GetExportOffset ([out] int* exportOffsetFields);
+    HRESULT GetManualExportOffset ([out] int* deckManualExportOffsetFields);
+    HRESULT SetCaptureOffset ([in] int captureOffsetFields);
+    HRESULT GetCaptureOffset ([out] int* captureOffsetFields);
+    HRESULT StartExport ([in] BMDTimecodeBCD inTimecode, [in] BMDTimecodeBCD outTimecode, [in] BMDDeckControlExportModeOpsFlags exportModeOps, [out] BMDDeckControlError* error);
+    HRESULT StartCapture ([in] BOOL useVITC, [in] BMDTimecodeBCD inTimecode, [in] BMDTimecodeBCD outTimecode, [out] BMDDeckControlError* error);
+    HRESULT GetDeviceID ([out] unsigned short* deviceId, [out] BMDDeckControlError* error);
+    HRESULT Abort (void);
+    HRESULT CrashRecordStart ([out] BMDDeckControlError* error);
+    HRESULT CrashRecordStop ([out] BMDDeckControlError* error);
+    HRESULT SetCallback ([in] IDeckLinkDeckControlStatusCallback* callback);
+};
+
+/* Coclasses */
+
+importlib("stdole2.tlb");
+
diff --git a/DeckLinkSDK/Win/include/DeckLinkAPIDiscovery.idl b/DeckLinkSDK/Win/include/DeckLinkAPIDiscovery.idl
new file mode 100644
index 0000000000..4ba8ae1817
--- /dev/null
+++ b/DeckLinkSDK/Win/include/DeckLinkAPIDiscovery.idl
@@ -0,0 +1,63 @@
+/* -LICENSE-START-
+** Copyright (c) 2022 Blackmagic Design
+**
+** Permission is hereby granted, free of charge, to any person or organization
+** obtaining a copy of the software and accompanying documentation covered by
+** this license (the "Software") to use, reproduce, display, distribute,
+** execute, and transmit the Software, and to prepare derivative works of the
+** Software, and to permit third-parties to whom the Software is furnished to
+** do so, all subject to the following:
+**
+** The copyright notices in the Software and this entire statement, including
+** the above license grant, this restriction and the following disclaimer,
+** must be included in all copies of the Software, in whole or in part, and
+** all derivative works of the Software, unless such copies or derivative
+** works are solely in the form of machine-executable object code generated by
+** a source language processor.
+**
+** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+** DEALINGS IN THE SOFTWARE.
+** -LICENSE-END-
+*/
+
+#ifndef BMD_CONST
+    #if defined(_MSC_VER)
+        #define BMD_CONST __declspec(selectany) static const
+    #else
+        #define BMD_CONST static const
+    #endif
+#endif
+
+// Type Declarations
+
+
+// Enumeration Mapping
+
+cpp_quote("#if 0")
+cpp_quote("#endif")
+
+// Forward Declarations
+
+interface IDeckLink;
+
+/* Interface IDeckLink - Represents a DeckLink device */
+
+[
+    object,
+    uuid(C418FBDD-0587-48ED-8FE5-640F0A14AF91),
+    helpstring("Represents a DeckLink device")
+] interface IDeckLink : IUnknown
+{
+    HRESULT GetModelName ([out] BSTR* modelName);
+    HRESULT GetDisplayName ([out] BSTR* displayName);
+};
+
+/* Coclasses */
+
+importlib("stdole2.tlb");
+
diff --git a/DeckLinkSDK/Win/include/DeckLinkAPIModes.idl b/DeckLinkSDK/Win/include/DeckLinkAPIModes.idl
new file mode 100644
index 0000000000..46b0fa21ff
--- /dev/null
+++ b/DeckLinkSDK/Win/include/DeckLinkAPIModes.idl
@@ -0,0 +1,270 @@
+/* -LICENSE-START-
+** Copyright (c) 2022 Blackmagic Design
+**
+** Permission is hereby granted, free of charge, to any person or organization
+** obtaining a copy of the software and accompanying documentation covered by
+** this license (the "Software") to use, reproduce, display, distribute,
+** execute, and transmit the Software, and to prepare derivative works of the
+** Software, and to permit third-parties to whom the Software is furnished to
+** do so, all subject to the following:
+**
+** The copyright notices in the Software and this entire statement, including
+** the above license grant, this restriction and the following disclaimer,
+** must be included in all copies of the Software, in whole or in part, and
+** all derivative works of the Software, unless such copies or derivative
+** works are solely in the form of machine-executable object code generated by
+** a source language processor.
+**
+** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+** DEALINGS IN THE SOFTWARE.
+** -LICENSE-END-
+*/
+
+#ifndef BMD_CONST
+    #if defined(_MSC_VER)
+        #define BMD_CONST __declspec(selectany) static const
+    #else
+        #define BMD_CONST static const
+    #endif
+#endif
+
+// Type Declarations
+
+
+// Enumeration Mapping
+
+cpp_quote("typedef unsigned int BMDDisplayModeFlags;")
+cpp_quote("#if 0")
+typedef enum _BMDDisplayModeFlags BMDDisplayModeFlags;
+cpp_quote("#endif")
+
+/* Enum BMDDisplayMode - BMDDisplayMode enumerates the video modes supported. */
+
+typedef [v1_enum] enum _BMDDisplayMode {
+
+    /* SD Modes */
+
+    bmdModeNTSC                                                  = /* 'ntsc' */ 0x6E747363,
+    bmdModeNTSC2398                                              = /* 'nt23' */ 0x6E743233,	// 3:2 pulldown
+    bmdModePAL                                                   = /* 'pal ' */ 0x70616C20,
+    bmdModeNTSCp                                                 = /* 'ntsp' */ 0x6E747370,
+    bmdModePALp                                                  = /* 'palp' */ 0x70616C70,
+
+    /* HD 1080 Modes */
+
+    bmdModeHD1080p2398                                           = /* '23ps' */ 0x32337073,
+    bmdModeHD1080p24                                             = /* '24ps' */ 0x32347073,
+    bmdModeHD1080p25                                             = /* 'Hp25' */ 0x48703235,
+    bmdModeHD1080p2997                                           = /* 'Hp29' */ 0x48703239,
+    bmdModeHD1080p30                                             = /* 'Hp30' */ 0x48703330,
+    bmdModeHD1080p4795                                           = /* 'Hp47' */ 0x48703437,
+    bmdModeHD1080p48                                             = /* 'Hp48' */ 0x48703438,
+    bmdModeHD1080p50                                             = /* 'Hp50' */ 0x48703530,
+    bmdModeHD1080p5994                                           = /* 'Hp59' */ 0x48703539,
+    bmdModeHD1080p6000                                           = /* 'Hp60' */ 0x48703630,	// N.B. This _really_ is 60.00 Hz.
+    bmdModeHD1080p9590                                           = /* 'Hp95' */ 0x48703935,
+    bmdModeHD1080p96                                             = /* 'Hp96' */ 0x48703936,
+    bmdModeHD1080p100                                            = /* 'Hp10' */ 0x48703130,
+    bmdModeHD1080p11988                                          = /* 'Hp11' */ 0x48703131,
+    bmdModeHD1080p120                                            = /* 'Hp12' */ 0x48703132,
+    bmdModeHD1080i50                                             = /* 'Hi50' */ 0x48693530,
+    bmdModeHD1080i5994                                           = /* 'Hi59' */ 0x48693539,
+    bmdModeHD1080i6000                                           = /* 'Hi60' */ 0x48693630,	// N.B. This _really_ is 60.00 Hz.
+
+    /* HD 720 Modes */
+
+    bmdModeHD720p50                                              = /* 'hp50' */ 0x68703530,
+    bmdModeHD720p5994                                            = /* 'hp59' */ 0x68703539,
+    bmdModeHD720p60                                              = /* 'hp60' */ 0x68703630,
+
+    /* 2K Modes */
+
+    bmdMode2k2398                                                = /* '2k23' */ 0x326B3233,
+    bmdMode2k24                                                  = /* '2k24' */ 0x326B3234,
+    bmdMode2k25                                                  = /* '2k25' */ 0x326B3235,
+
+    /* 2K DCI Modes */
+
+    bmdMode2kDCI2398                                             = /* '2d23' */ 0x32643233,
+    bmdMode2kDCI24                                               = /* '2d24' */ 0x32643234,
+    bmdMode2kDCI25                                               = /* '2d25' */ 0x32643235,
+    bmdMode2kDCI2997                                             = /* '2d29' */ 0x32643239,
+    bmdMode2kDCI30                                               = /* '2d30' */ 0x32643330,
+    bmdMode2kDCI4795                                             = /* '2d47' */ 0x32643437,
+    bmdMode2kDCI48                                               = /* '2d48' */ 0x32643438,
+    bmdMode2kDCI50                                               = /* '2d50' */ 0x32643530,
+    bmdMode2kDCI5994                                             = /* '2d59' */ 0x32643539,
+    bmdMode2kDCI60                                               = /* '2d60' */ 0x32643630,
+    bmdMode2kDCI9590                                             = /* '2d95' */ 0x32643935,
+    bmdMode2kDCI96                                               = /* '2d96' */ 0x32643936,
+    bmdMode2kDCI100                                              = /* '2d10' */ 0x32643130,
+    bmdMode2kDCI11988                                            = /* '2d11' */ 0x32643131,
+    bmdMode2kDCI120                                              = /* '2d12' */ 0x32643132,
+
+    /* 4K UHD Modes */
+
+    bmdMode4K2160p2398                                           = /* '4k23' */ 0x346B3233,
+    bmdMode4K2160p24                                             = /* '4k24' */ 0x346B3234,
+    bmdMode4K2160p25                                             = /* '4k25' */ 0x346B3235,
+    bmdMode4K2160p2997                                           = /* '4k29' */ 0x346B3239,
+    bmdMode4K2160p30                                             = /* '4k30' */ 0x346B3330,
+    bmdMode4K2160p4795                                           = /* '4k47' */ 0x346B3437,
+    bmdMode4K2160p48                                             = /* '4k48' */ 0x346B3438,
+    bmdMode4K2160p50                                             = /* '4k50' */ 0x346B3530,
+    bmdMode4K2160p5994                                           = /* '4k59' */ 0x346B3539,
+    bmdMode4K2160p60                                             = /* '4k60' */ 0x346B3630,
+    bmdMode4K2160p9590                                           = /* '4k95' */ 0x346B3935,
+    bmdMode4K2160p96                                             = /* '4k96' */ 0x346B3936,
+    bmdMode4K2160p100                                            = /* '4k10' */ 0x346B3130,
+    bmdMode4K2160p11988                                          = /* '4k11' */ 0x346B3131,
+    bmdMode4K2160p120                                            = /* '4k12' */ 0x346B3132,
+
+    /* 4K DCI Modes */
+
+    bmdMode4kDCI2398                                             = /* '4d23' */ 0x34643233,
+    bmdMode4kDCI24                                               = /* '4d24' */ 0x34643234,
+    bmdMode4kDCI25                                               = /* '4d25' */ 0x34643235,
+    bmdMode4kDCI2997                                             = /* '4d29' */ 0x34643239,
+    bmdMode4kDCI30                                               = /* '4d30' */ 0x34643330,
+    bmdMode4kDCI4795                                             = /* '4d47' */ 0x34643437,
+    bmdMode4kDCI48                                               = /* '4d48' */ 0x34643438,
+    bmdMode4kDCI50                                               = /* '4d50' */ 0x34643530,
+    bmdMode4kDCI5994                                             = /* '4d59' */ 0x34643539,
+    bmdMode4kDCI60                                               = /* '4d60' */ 0x34643630,
+    bmdMode4kDCI9590                                             = /* '4d95' */ 0x34643935,
+    bmdMode4kDCI96                                               = /* '4d96' */ 0x34643936,
+    bmdMode4kDCI100                                              = /* '4d10' */ 0x34643130,
+    bmdMode4kDCI11988                                            = /* '4d11' */ 0x34643131,
+    bmdMode4kDCI120                                              = /* '4d12' */ 0x34643132,
+
+    /* 8K UHD Modes */
+
+    bmdMode8K4320p2398                                           = /* '8k23' */ 0x386B3233,
+    bmdMode8K4320p24                                             = /* '8k24' */ 0x386B3234,
+    bmdMode8K4320p25                                             = /* '8k25' */ 0x386B3235,
+    bmdMode8K4320p2997                                           = /* '8k29' */ 0x386B3239,
+    bmdMode8K4320p30                                             = /* '8k30' */ 0x386B3330,
+    bmdMode8K4320p4795                                           = /* '8k47' */ 0x386B3437,
+    bmdMode8K4320p48                                             = /* '8k48' */ 0x386B3438,
+    bmdMode8K4320p50                                             = /* '8k50' */ 0x386B3530,
+    bmdMode8K4320p5994                                           = /* '8k59' */ 0x386B3539,
+    bmdMode8K4320p60                                             = /* '8k60' */ 0x386B3630,
+
+    /* 8K DCI Modes */
+
+    bmdMode8kDCI2398                                             = /* '8d23' */ 0x38643233,
+    bmdMode8kDCI24                                               = /* '8d24' */ 0x38643234,
+    bmdMode8kDCI25                                               = /* '8d25' */ 0x38643235,
+    bmdMode8kDCI2997                                             = /* '8d29' */ 0x38643239,
+    bmdMode8kDCI30                                               = /* '8d30' */ 0x38643330,
+    bmdMode8kDCI4795                                             = /* '8d47' */ 0x38643437,
+    bmdMode8kDCI48                                               = /* '8d48' */ 0x38643438,
+    bmdMode8kDCI50                                               = /* '8d50' */ 0x38643530,
+    bmdMode8kDCI5994                                             = /* '8d59' */ 0x38643539,
+    bmdMode8kDCI60                                               = /* '8d60' */ 0x38643630,
+
+    /* PC Modes */
+
+    bmdMode640x480p60                                            = /* 'vga6' */ 0x76676136,
+    bmdMode800x600p60                                            = /* 'svg6' */ 0x73766736,
+    bmdMode1440x900p50                                           = /* 'wxg5' */ 0x77786735,
+    bmdMode1440x900p60                                           = /* 'wxg6' */ 0x77786736,
+    bmdMode1440x1080p50                                          = /* 'sxg5' */ 0x73786735,
+    bmdMode1440x1080p60                                          = /* 'sxg6' */ 0x73786736,
+    bmdMode1600x1200p50                                          = /* 'uxg5' */ 0x75786735,
+    bmdMode1600x1200p60                                          = /* 'uxg6' */ 0x75786736,
+    bmdMode1920x1200p50                                          = /* 'wux5' */ 0x77757835,
+    bmdMode1920x1200p60                                          = /* 'wux6' */ 0x77757836,
+    bmdMode1920x1440p50                                          = /* '1945' */ 0x31393435,
+    bmdMode1920x1440p60                                          = /* '1946' */ 0x31393436,
+    bmdMode2560x1440p50                                          = /* 'wqh5' */ 0x77716835,
+    bmdMode2560x1440p60                                          = /* 'wqh6' */ 0x77716836,
+    bmdMode2560x1600p50                                          = /* 'wqx5' */ 0x77717835,
+    bmdMode2560x1600p60                                          = /* 'wqx6' */ 0x77717836,
+
+    /* Special Modes */
+
+    bmdModeUnknown                                               = /* 'iunk' */ 0x69756E6B
+} BMDDisplayMode;
+
+/* Enum BMDFieldDominance - BMDFieldDominance enumerates settings applicable to video fields. */
+
+typedef [v1_enum] enum _BMDFieldDominance {
+    bmdUnknownFieldDominance                                     = 0,
+    bmdLowerFieldFirst                                           = /* 'lowr' */ 0x6C6F7772,
+    bmdUpperFieldFirst                                           = /* 'uppr' */ 0x75707072,
+    bmdProgressiveFrame                                          = /* 'prog' */ 0x70726F67,
+    bmdProgressiveSegmentedFrame                                 = /* 'psf ' */ 0x70736620
+} BMDFieldDominance;
+
+/* Enum BMDPixelFormat - Video pixel formats supported for output/input */
+
+typedef [v1_enum] enum _BMDPixelFormat {
+    bmdFormatUnspecified                                         = 0,
+    bmdFormat8BitYUV                                             = /* '2vuy' */ 0x32767579,
+    bmdFormat10BitYUV                                            = /* 'v210' */ 0x76323130,
+    bmdFormat8BitARGB                                            = 32,
+    bmdFormat8BitBGRA                                            = /* 'BGRA' */ 0x42475241,
+    bmdFormat10BitRGB                                            = /* 'r210' */ 0x72323130,	// Big-endian RGB 10-bit per component with SMPTE video levels (64-960). Packed as 2:10:10:10
+    bmdFormat12BitRGB                                            = /* 'R12B' */ 0x52313242,	// Big-endian RGB 12-bit per component with full range (0-4095). Packed as 12-bit per component
+    bmdFormat12BitRGBLE                                          = /* 'R12L' */ 0x5231324C,	// Little-endian RGB 12-bit per component with full range (0-4095). Packed as 12-bit per component
+    bmdFormat10BitRGBXLE                                         = /* 'R10l' */ 0x5231306C,	// Little-endian 10-bit RGB with SMPTE video levels (64-940)
+    bmdFormat10BitRGBX                                           = /* 'R10b' */ 0x52313062,	// Big-endian 10-bit RGB with SMPTE video levels (64-940)
+    bmdFormatH265                                                = /* 'hev1' */ 0x68657631,	// High Efficiency Video Coding (HEVC/h.265)
+
+    /* AVID DNxHR */
+
+    bmdFormatDNxHR                                               = /* 'AVdh' */ 0x41566468
+} BMDPixelFormat;
+
+/* Enum BMDDisplayModeFlags - Flags to describe the characteristics of an IDeckLinkDisplayMode. */
+
+[v1_enum] enum _BMDDisplayModeFlags {
+    bmdDisplayModeSupports3D                                     = 1 << 0,
+    bmdDisplayModeColorspaceRec601                               = 1 << 1,
+    bmdDisplayModeColorspaceRec709                               = 1 << 2,
+    bmdDisplayModeColorspaceRec2020                              = 1 << 3
+};
+
+// Forward Declarations
+
+interface IDeckLinkDisplayModeIterator;
+interface IDeckLinkDisplayMode;
+
+/* Interface IDeckLinkDisplayModeIterator - Enumerates over supported input/output display modes. */
+
+[
+    object,
+    uuid(9C88499F-F601-4021-B80B-032E4EB41C35),
+    helpstring("Enumerates over supported input/output display modes.")
+] interface IDeckLinkDisplayModeIterator : IUnknown
+{
+    HRESULT Next ([out] IDeckLinkDisplayMode** deckLinkDisplayMode);
+};
+
+/* Interface IDeckLinkDisplayMode - Represents a display mode */
+
+[
+    object,
+    uuid(3EB2C1AB-0A3D-4523-A3AD-F40D7FB14E78),
+    helpstring("Represents a display mode")
+] interface IDeckLinkDisplayMode : IUnknown
+{
+    HRESULT GetName ([out] BSTR* name);
+    BMDDisplayMode GetDisplayMode (void);
+    long GetWidth (void);
+    long GetHeight (void);
+    HRESULT GetFrameRate ([out] BMDTimeValue* frameDuration, [out] BMDTimeScale* timeScale);
+    BMDFieldDominance GetFieldDominance (void);
+    BMDDisplayModeFlags GetFlags (void);
+};
+
+/* Coclasses */
+
+importlib("stdole2.tlb");
+
diff --git a/DeckLinkSDK/Win/include/DeckLinkAPIStreaming.idl b/DeckLinkSDK/Win/include/DeckLinkAPIStreaming.idl
new file mode 100644
index 0000000000..066ce17750
--- /dev/null
+++ b/DeckLinkSDK/Win/include/DeckLinkAPIStreaming.idl
@@ -0,0 +1,362 @@
+/* -LICENSE-START-
+** Copyright (c) 2022 Blackmagic Design
+**
+** Permission is hereby granted, free of charge, to any person or organization
+** obtaining a copy of the software and accompanying documentation covered by
+** this license (the "Software") to use, reproduce, display, distribute,
+** execute, and transmit the Software, and to prepare derivative works of the
+** Software, and to permit third-parties to whom the Software is furnished to
+** do so, all subject to the following:
+**
+** The copyright notices in the Software and this entire statement, including
+** the above license grant, this restriction and the following disclaimer,
+** must be included in all copies of the Software, in whole or in part, and
+** all derivative works of the Software, unless such copies or derivative
+** works are solely in the form of machine-executable object code generated by
+** a source language processor.
+**
+** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+** DEALINGS IN THE SOFTWARE.
+** -LICENSE-END-
+*/
+
+#ifndef BMD_CONST
+    #if defined(_MSC_VER)
+        #define BMD_CONST __declspec(selectany) static const
+    #else
+        #define BMD_CONST static const
+    #endif
+#endif
+
+// Type Declarations
+
+
+// Enumeration Mapping
+
+cpp_quote("#if 0")
+cpp_quote("#endif")
+
+/* Enum BMDStreamingDeviceMode - Device modes */
+
+typedef [v1_enum] enum _BMDStreamingDeviceMode {
+    bmdStreamingDeviceIdle                                       = /* 'idle' */ 0x69646C65,
+    bmdStreamingDeviceEncoding                                   = /* 'enco' */ 0x656E636F,
+    bmdStreamingDeviceStopping                                   = /* 'stop' */ 0x73746F70,
+    bmdStreamingDeviceUnknown                                    = /* 'munk' */ 0x6D756E6B
+} BMDStreamingDeviceMode;
+
+/* Enum BMDStreamingEncodingFrameRate - Encoded frame rates */
+
+typedef [v1_enum] enum _BMDStreamingEncodingFrameRate {
+
+    /* Interlaced rates */
+
+    bmdStreamingEncodedFrameRate50i                              = /* 'e50i' */ 0x65353069,
+    bmdStreamingEncodedFrameRate5994i                            = /* 'e59i' */ 0x65353969,
+    bmdStreamingEncodedFrameRate60i                              = /* 'e60i' */ 0x65363069,
+
+    /* Progressive rates */
+
+    bmdStreamingEncodedFrameRate2398p                            = /* 'e23p' */ 0x65323370,
+    bmdStreamingEncodedFrameRate24p                              = /* 'e24p' */ 0x65323470,
+    bmdStreamingEncodedFrameRate25p                              = /* 'e25p' */ 0x65323570,
+    bmdStreamingEncodedFrameRate2997p                            = /* 'e29p' */ 0x65323970,
+    bmdStreamingEncodedFrameRate30p                              = /* 'e30p' */ 0x65333070,
+    bmdStreamingEncodedFrameRate50p                              = /* 'e50p' */ 0x65353070,
+    bmdStreamingEncodedFrameRate5994p                            = /* 'e59p' */ 0x65353970,
+    bmdStreamingEncodedFrameRate60p                              = /* 'e60p' */ 0x65363070
+} BMDStreamingEncodingFrameRate;
+
+/* Enum BMDStreamingEncodingSupport - Output encoding mode supported flag */
+
+typedef [v1_enum] enum _BMDStreamingEncodingSupport {
+    bmdStreamingEncodingModeNotSupported                         = 0,
+    bmdStreamingEncodingModeSupported,
+    bmdStreamingEncodingModeSupportedWithChanges
+} BMDStreamingEncodingSupport;
+
+/* Enum BMDStreamingVideoCodec - Video codecs */
+
+typedef [v1_enum] enum _BMDStreamingVideoCodec {
+    bmdStreamingVideoCodecH264                                   = /* 'H264' */ 0x48323634
+} BMDStreamingVideoCodec;
+
+/* Enum BMDStreamingH264Profile - H264 encoding profile */
+
+typedef [v1_enum] enum _BMDStreamingH264Profile {
+    bmdStreamingH264ProfileHigh                                  = /* 'high' */ 0x68696768,
+    bmdStreamingH264ProfileMain                                  = /* 'main' */ 0x6D61696E,
+    bmdStreamingH264ProfileBaseline                              = /* 'base' */ 0x62617365
+} BMDStreamingH264Profile;
+
+/* Enum BMDStreamingH264Level - H264 encoding level */
+
+typedef [v1_enum] enum _BMDStreamingH264Level {
+    bmdStreamingH264Level12                                      = /* 'lv12' */ 0x6C763132,
+    bmdStreamingH264Level13                                      = /* 'lv13' */ 0x6C763133,
+    bmdStreamingH264Level2                                       = /* 'lv2 ' */ 0x6C763220,
+    bmdStreamingH264Level21                                      = /* 'lv21' */ 0x6C763231,
+    bmdStreamingH264Level22                                      = /* 'lv22' */ 0x6C763232,
+    bmdStreamingH264Level3                                       = /* 'lv3 ' */ 0x6C763320,
+    bmdStreamingH264Level31                                      = /* 'lv31' */ 0x6C763331,
+    bmdStreamingH264Level32                                      = /* 'lv32' */ 0x6C763332,
+    bmdStreamingH264Level4                                       = /* 'lv4 ' */ 0x6C763420,
+    bmdStreamingH264Level41                                      = /* 'lv41' */ 0x6C763431,
+    bmdStreamingH264Level42                                      = /* 'lv42' */ 0x6C763432
+} BMDStreamingH264Level;
+
+/* Enum BMDStreamingH264EntropyCoding - H264 entropy coding */
+
+typedef [v1_enum] enum _BMDStreamingH264EntropyCoding {
+    bmdStreamingH264EntropyCodingCAVLC                           = /* 'EVLC' */ 0x45564C43,
+    bmdStreamingH264EntropyCodingCABAC                           = /* 'EBAC' */ 0x45424143
+} BMDStreamingH264EntropyCoding;
+
+/* Enum BMDStreamingAudioCodec - Audio codecs */
+
+typedef [v1_enum] enum _BMDStreamingAudioCodec {
+    bmdStreamingAudioCodecAAC                                    = /* 'AAC ' */ 0x41414320
+} BMDStreamingAudioCodec;
+
+/* Enum BMDStreamingEncodingModePropertyID - Encoding mode properties */
+
+typedef [v1_enum] enum _BMDStreamingEncodingModePropertyID {
+
+    /* Integers, Video Properties */
+
+    bmdStreamingEncodingPropertyVideoFrameRate                   = /* 'vfrt' */ 0x76667274,	// Uses values of type BMDStreamingEncodingFrameRate
+    bmdStreamingEncodingPropertyVideoBitRateKbps                 = /* 'vbrt' */ 0x76627274,
+
+    /* Integers, H264 Properties */
+
+    bmdStreamingEncodingPropertyH264Profile                      = /* 'hprf' */ 0x68707266,
+    bmdStreamingEncodingPropertyH264Level                        = /* 'hlvl' */ 0x686C766C,
+    bmdStreamingEncodingPropertyH264EntropyCoding                = /* 'hent' */ 0x68656E74,
+
+    /* Flags, H264 Properties */
+
+    bmdStreamingEncodingPropertyH264HasBFrames                   = /* 'hBfr' */ 0x68426672,
+
+    /* Integers, Audio Properties */
+
+    bmdStreamingEncodingPropertyAudioCodec                       = /* 'acdc' */ 0x61636463,
+    bmdStreamingEncodingPropertyAudioSampleRate                  = /* 'asrt' */ 0x61737274,
+    bmdStreamingEncodingPropertyAudioChannelCount                = /* 'achc' */ 0x61636863,
+    bmdStreamingEncodingPropertyAudioBitRateKbps                 = /* 'abrt' */ 0x61627274
+} BMDStreamingEncodingModePropertyID;
+
+// Forward Declarations
+
+interface IBMDStreamingDeviceNotificationCallback;
+interface IBMDStreamingH264InputCallback;
+interface IBMDStreamingDiscovery;
+interface IBMDStreamingVideoEncodingMode;
+interface IBMDStreamingMutableVideoEncodingMode;
+interface IBMDStreamingVideoEncodingModePresetIterator;
+interface IBMDStreamingDeviceInput;
+interface IBMDStreamingH264NALPacket;
+interface IBMDStreamingAudioPacket;
+interface IBMDStreamingMPEG2TSPacket;
+interface IBMDStreamingH264NALParser;
+
+/* Interface IBMDStreamingDeviceNotificationCallback - Device notification callbacks. */
+
+[
+    object,
+    uuid(F9531D64-3305-4B29-A387-7F74BB0D0E84),
+    helpstring("Device notification callbacks.")
+] interface IBMDStreamingDeviceNotificationCallback : IUnknown
+{
+    HRESULT StreamingDeviceArrived ([in] IDeckLink* device);
+    HRESULT StreamingDeviceRemoved ([in] IDeckLink* device);
+    HRESULT StreamingDeviceModeChanged ([in] IDeckLink* device, [in] BMDStreamingDeviceMode mode);
+};
+
+/* Interface IBMDStreamingH264InputCallback - H264 input callbacks. */
+
+[
+    object,
+    uuid(823C475F-55AE-46F9-890C-537CC5CEDCCA),
+    helpstring("H264 input callbacks.")
+] interface IBMDStreamingH264InputCallback : IUnknown
+{
+    HRESULT H264NALPacketArrived ([in] IBMDStreamingH264NALPacket* nalPacket);
+    HRESULT H264AudioPacketArrived ([in] IBMDStreamingAudioPacket* audioPacket);
+    HRESULT MPEG2TSPacketArrived ([in] IBMDStreamingMPEG2TSPacket* tsPacket);
+    HRESULT H264VideoInputConnectorScanningChanged (void);
+    HRESULT H264VideoInputConnectorChanged (void);
+    HRESULT H264VideoInputModeChanged (void);
+};
+
+/* Interface IBMDStreamingDiscovery - Installs device notifications */
+
+[
+    object,
+    uuid(2C837444-F989-4D87-901A-47C8A36D096D),
+    helpstring("Installs device notifications")
+] interface IBMDStreamingDiscovery : IUnknown
+{
+    HRESULT InstallDeviceNotifications ([in] IBMDStreamingDeviceNotificationCallback* theCallback);
+    HRESULT UninstallDeviceNotifications (void);
+};
+
+/* Interface IBMDStreamingVideoEncodingMode - Represents an encoded video mode. */
+
+[
+    object,
+    uuid(1AB8035B-CD13-458D-B6DF-5E8F7C2141D9),
+    helpstring("Represents an encoded video mode.")
+] interface IBMDStreamingVideoEncodingMode : IUnknown
+{
+    HRESULT GetName ([out] BSTR* name);
+    unsigned int GetPresetID (void);
+    unsigned int GetSourcePositionX (void);
+    unsigned int GetSourcePositionY (void);
+    unsigned int GetSourceWidth (void);
+    unsigned int GetSourceHeight (void);
+    unsigned int GetDestWidth (void);
+    unsigned int GetDestHeight (void);
+    HRESULT GetFlag ([in] BMDStreamingEncodingModePropertyID cfgID, [out] BOOL* value);
+    HRESULT GetInt ([in] BMDStreamingEncodingModePropertyID cfgID, [out] LONGLONG* value);
+    HRESULT GetFloat ([in] BMDStreamingEncodingModePropertyID cfgID, [out] double* value);
+    HRESULT GetString ([in] BMDStreamingEncodingModePropertyID cfgID, [out] BSTR* value);
+    HRESULT CreateMutableVideoEncodingMode ([out] IBMDStreamingMutableVideoEncodingMode** newEncodingMode);	// Creates a mutable copy of the encoding mode
+};
+
+/* Interface IBMDStreamingMutableVideoEncodingMode - Represents a mutable encoded video mode. */
+
+[
+    object,
+    uuid(19BF7D90-1E0A-400D-B2C6-FFC4E78AD49D),
+    helpstring("Represents a mutable encoded video mode.")
+] interface IBMDStreamingMutableVideoEncodingMode : IBMDStreamingVideoEncodingMode
+{
+    HRESULT SetSourceRect ([in] unsigned int posX, [in] unsigned int posY, [in] unsigned int width, [in] unsigned int height);
+    HRESULT SetDestSize ([in] unsigned int width, [in] unsigned int height);
+    HRESULT SetFlag ([in] BMDStreamingEncodingModePropertyID cfgID, [in] BOOL value);
+    HRESULT SetInt ([in] BMDStreamingEncodingModePropertyID cfgID, [in] LONGLONG value);
+    HRESULT SetFloat ([in] BMDStreamingEncodingModePropertyID cfgID, [in] double value);
+    HRESULT SetString ([in] BMDStreamingEncodingModePropertyID cfgID, [in] BSTR value);
+};
+
+/* Interface IBMDStreamingVideoEncodingModePresetIterator - Enumerates encoding mode presets */
+
+[
+    object,
+    uuid(7AC731A3-C950-4AD0-804A-8377AA51C6C4),
+    helpstring("Enumerates encoding mode presets")
+] interface IBMDStreamingVideoEncodingModePresetIterator : IUnknown
+{
+    HRESULT Next ([out] IBMDStreamingVideoEncodingMode** videoEncodingMode);
+};
+
+/* Interface IBMDStreamingDeviceInput - Created by QueryInterface from IDeckLink */
+
+[
+    object,
+    uuid(24B6B6EC-1727-44BB-9818-34FF086ACF98),
+    helpstring("Created by QueryInterface from IDeckLink")
+] interface IBMDStreamingDeviceInput : IUnknown
+{
+
+    /* Input modes */
+
+    HRESULT DoesSupportVideoInputMode ([in] BMDDisplayMode inputMode, [out] BOOL* result);
+    HRESULT GetVideoInputModeIterator ([out] IDeckLinkDisplayModeIterator** iterator);
+    HRESULT SetVideoInputMode ([in] BMDDisplayMode inputMode);
+    HRESULT GetCurrentDetectedVideoInputMode ([out] BMDDisplayMode* detectedMode);
+
+    /* Capture modes */
+
+    HRESULT GetVideoEncodingMode ([out] IBMDStreamingVideoEncodingMode** encodingMode);
+    HRESULT GetVideoEncodingModePresetIterator ([in] BMDDisplayMode inputMode, [out] IBMDStreamingVideoEncodingModePresetIterator** iterator);
+    HRESULT DoesSupportVideoEncodingMode ([in] BMDDisplayMode inputMode, [in] IBMDStreamingVideoEncodingMode* encodingMode, [out] BMDStreamingEncodingSupport* result, [out] IBMDStreamingVideoEncodingMode** changedEncodingMode);
+    HRESULT SetVideoEncodingMode ([in] IBMDStreamingVideoEncodingMode* encodingMode);
+
+    /* Input control */
+
+    HRESULT StartCapture (void);
+    HRESULT StopCapture (void);
+    HRESULT SetCallback ([in] IUnknown* theCallback);
+};
+
+/* Interface IBMDStreamingH264NALPacket - Represent an H.264 NAL packet */
+
+[
+    object,
+    uuid(E260E955-14BE-4395-9775-9F02CC0A9D89),
+    helpstring("Represent an H.264 NAL packet")
+] interface IBMDStreamingH264NALPacket : IUnknown
+{
+    long GetPayloadSize (void);
+    HRESULT GetBytes ([out] void** buffer);
+    HRESULT GetBytesWithSizePrefix ([out] void** buffer);	// Contains a 32-bit unsigned big endian size prefix
+    HRESULT GetDisplayTime ([in] ULONGLONG requestedTimeScale, [out] ULONGLONG* displayTime);
+    HRESULT GetPacketIndex ([out] unsigned int* packetIndex);	// Deprecated
+};
+
+/* Interface IBMDStreamingAudioPacket - Represents a chunk of audio data */
+
+[
+    object,
+    uuid(D9EB5902-1AD2-43F4-9E2C-3CFA50B5EE19),
+    helpstring("Represents a chunk of audio data")
+] interface IBMDStreamingAudioPacket : IUnknown
+{
+    BMDStreamingAudioCodec GetCodec (void);
+    long GetPayloadSize (void);
+    HRESULT GetBytes ([out] void** buffer);
+    HRESULT GetPlayTime ([in] ULONGLONG requestedTimeScale, [out] ULONGLONG* playTime);
+    HRESULT GetPacketIndex ([out] unsigned int* packetIndex);	// Deprecated
+};
+
+/* Interface IBMDStreamingMPEG2TSPacket - Represent an MPEG2 Transport Stream packet */
+
+[
+    object,
+    uuid(91810D1C-4FB3-4AAA-AE56-FA301D3DFA4C),
+    helpstring("Represent an MPEG2 Transport Stream packet")
+] interface IBMDStreamingMPEG2TSPacket : IUnknown
+{
+    long GetPayloadSize (void);
+    HRESULT GetBytes ([out] void** buffer);
+};
+
+/* Interface IBMDStreamingH264NALParser - For basic NAL parsing */
+
+[
+    object,
+    uuid(5867F18C-5BFA-4CCC-B2A7-9DFD140417D2),
+    helpstring("For basic NAL parsing")
+] interface IBMDStreamingH264NALParser : IUnknown
+{
+    HRESULT IsNALSequenceParameterSet ([in] IBMDStreamingH264NALPacket* nal);
+    HRESULT IsNALPictureParameterSet ([in] IBMDStreamingH264NALPacket* nal);
+    HRESULT GetProfileAndLevelFromSPS ([in] IBMDStreamingH264NALPacket* nal, [out] unsigned int* profileIdc, [out] unsigned int* profileCompatability, [out] unsigned int* levelIdc);
+};
+
+/* Coclasses */
+
+importlib("stdole2.tlb");
+
+[
+    uuid(23A4EDF5-A0E5-432C-94EF-3BABB5F81C82),
+    helpstring("CBMDStreamingDiscovery Class")
+] coclass CBMDStreamingDiscovery
+{
+    [default] interface IBMDStreamingDiscovery;
+};
+
+[
+    uuid(7753EFBD-951C-407C-97A5-23C737B73B52),
+    helpstring("CBMDStreamingH264NALParser Class")
+] coclass CBMDStreamingH264NALParser
+{
+    [default] interface IBMDStreamingH264NALParser;
+};
+
diff --git a/DeckLinkSDK/Win/include/DeckLinkAPIStreaming_v10_8.idl b/DeckLinkSDK/Win/include/DeckLinkAPIStreaming_v10_8.idl
new file mode 100644
index 0000000000..1a63027081
--- /dev/null
+++ b/DeckLinkSDK/Win/include/DeckLinkAPIStreaming_v10_8.idl
@@ -0,0 +1,53 @@
+/* -LICENSE-START-
+** Copyright (c) 2016 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+
+
+/* Coclasses */
+
+importlib("stdole2.tlb");
+
+[
+    uuid(0CAA31F6-8A26-40B0-86A4-BF58DCCA710C),
+    helpstring("CBMDStreamingDiscovery Class")
+] coclass CBMDStreamingDiscovery_v10_8
+{
+    [default] interface IBMDStreamingDiscovery;
+};
diff --git a/DeckLinkSDK/Win/include/DeckLinkAPITypes.idl b/DeckLinkSDK/Win/include/DeckLinkAPITypes.idl
new file mode 100644
index 0000000000..d0a05313b7
--- /dev/null
+++ b/DeckLinkSDK/Win/include/DeckLinkAPITypes.idl
@@ -0,0 +1,114 @@
+/* -LICENSE-START-
+** Copyright (c) 2022 Blackmagic Design
+**
+** Permission is hereby granted, free of charge, to any person or organization
+** obtaining a copy of the software and accompanying documentation covered by
+** this license (the "Software") to use, reproduce, display, distribute,
+** execute, and transmit the Software, and to prepare derivative works of the
+** Software, and to permit third-parties to whom the Software is furnished to
+** do so, all subject to the following:
+**
+** The copyright notices in the Software and this entire statement, including
+** the above license grant, this restriction and the following disclaimer,
+** must be included in all copies of the Software, in whole or in part, and
+** all derivative works of the Software, unless such copies or derivative
+** works are solely in the form of machine-executable object code generated by
+** a source language processor.
+**
+** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+** DEALINGS IN THE SOFTWARE.
+** -LICENSE-END-
+*/
+
+#ifndef BMD_CONST
+    #if defined(_MSC_VER)
+        #define BMD_CONST __declspec(selectany) static const
+    #else
+        #define BMD_CONST static const
+    #endif
+#endif
+
+// Type Declarations
+
+typedef LONGLONG BMDTimeValue;
+typedef LONGLONG BMDTimeScale;
+typedef unsigned int BMDTimecodeBCD;
+typedef unsigned int BMDTimecodeUserBits;
+
+// Enumeration Mapping
+
+cpp_quote("typedef unsigned int BMDTimecodeFlags;")
+cpp_quote("#if 0")
+typedef enum _BMDTimecodeFlags BMDTimecodeFlags;
+cpp_quote("#endif")
+
+/* Enum BMDTimecodeFlags - Timecode flags */
+
+[v1_enum] enum _BMDTimecodeFlags {
+    bmdTimecodeFlagDefault                                       = 0,
+    bmdTimecodeIsDropFrame                                       = 1 << 0,
+    bmdTimecodeFieldMark                                         = 1 << 1,
+    bmdTimecodeColorFrame                                        = 1 << 2,
+    bmdTimecodeEmbedRecordingTrigger                             = 1 << 3,	// On SDI recording trigger utilises a user-bit.
+    bmdTimecodeRecordingTriggered                                = 1 << 4
+};
+
+/* Enum BMDVideoConnection - Video connection types */
+
+typedef [v1_enum] enum _BMDVideoConnection {
+    bmdVideoConnectionUnspecified                                = 0,
+    bmdVideoConnectionSDI                                        = 1 << 0,
+    bmdVideoConnectionHDMI                                       = 1 << 1,
+    bmdVideoConnectionOpticalSDI                                 = 1 << 2,
+    bmdVideoConnectionComponent                                  = 1 << 3,
+    bmdVideoConnectionComposite                                  = 1 << 4,
+    bmdVideoConnectionSVideo                                     = 1 << 5
+} BMDVideoConnection;
+
+/* Enum BMDAudioConnection - Audio connection types */
+
+typedef [v1_enum] enum _BMDAudioConnection {
+    bmdAudioConnectionEmbedded                                   = 1 << 0,
+    bmdAudioConnectionAESEBU                                     = 1 << 1,
+    bmdAudioConnectionAnalog                                     = 1 << 2,
+    bmdAudioConnectionAnalogXLR                                  = 1 << 3,
+    bmdAudioConnectionAnalogRCA                                  = 1 << 4,
+    bmdAudioConnectionMicrophone                                 = 1 << 5,
+    bmdAudioConnectionHeadphones                                 = 1 << 6
+} BMDAudioConnection;
+
+/* Enum BMDDeckControlConnection - Deck control connections */
+
+typedef [v1_enum] enum _BMDDeckControlConnection {
+    bmdDeckControlConnectionRS422Remote1                         = 1 << 0,
+    bmdDeckControlConnectionRS422Remote2                         = 1 << 1
+} BMDDeckControlConnection;
+
+// Forward Declarations
+
+interface IDeckLinkTimecode;
+
+/* Interface IDeckLinkTimecode - Used for video frame timecode representation. */
+
+[
+    object,
+    uuid(BC6CFBD3-8317-4325-AC1C-1216391E9340),
+    helpstring("Used for video frame timecode representation.")
+] interface IDeckLinkTimecode : IUnknown
+{
+    BMDTimecodeBCD GetBCD (void);
+    HRESULT GetComponents ([out] unsigned char* hours, [out] unsigned char* minutes, [out] unsigned char* seconds, [out] unsigned char* frames);
+    HRESULT GetString ([out] BSTR* timecode);
+    BMDTimecodeFlags GetFlags (void);
+    HRESULT GetTimecodeUserBits ([out] BMDTimecodeUserBits* userBits);
+};
+
+/* Coclasses */
+
+importlib("stdole2.tlb");
+
diff --git a/DeckLinkSDK/Win/include/DeckLinkAPIVersion.h b/DeckLinkSDK/Win/include/DeckLinkAPIVersion.h
new file mode 100644
index 0000000000..679ef92584
--- /dev/null
+++ b/DeckLinkSDK/Win/include/DeckLinkAPIVersion.h
@@ -0,0 +1,50 @@
+/* -LICENSE-START-
+ * ** Copyright (c) 2014 Blackmagic Design
+ * **  
+ * ** Permission is hereby granted, free of charge, to any person or organization 
+ * ** obtaining a copy of the software and accompanying documentation (the 
+ * ** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+ * ** and transmit the Software, and to prepare derivative works of the Software, 
+ * ** and to permit third-parties to whom the Software is furnished to do so, in 
+ * ** accordance with:
+ * ** 
+ * ** (1) if the Software is obtained from Blackmagic Design, the End User License 
+ * ** Agreement for the Software Development Kit (“EULA”) available at 
+ * ** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+ * ** 
+ * ** (2) if the Software is obtained from any third party, such licensing terms 
+ * ** as notified by that third party,
+ * ** 
+ * ** and all subject to the following:
+ * ** 
+ * ** (3) the copyright notices in the Software and this entire statement, 
+ * ** including the above license grant, this restriction and the following 
+ * ** disclaimer, must be included in all copies of the Software, in whole or in 
+ * ** part, and all derivative works of the Software, unless such copies or 
+ * ** derivative works are solely in the form of machine-executable object code 
+ * ** generated by a source language processor.
+ * ** 
+ * ** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+ * ** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+ * ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+ * ** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+ * ** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+ * ** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+ * ** DEALINGS IN THE SOFTWARE.
+ * ** 
+ * ** A copy of the Software is available free of charge at 
+ * ** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+ * ** 
+ * ** -LICENSE-END-
+ * */
+
+/* DeckLinkAPIVersion.h */
+
+#ifndef __DeckLink_API_Version_h__
+#define __DeckLink_API_Version_h__
+
+#define BLACKMAGIC_DECKLINK_API_VERSION					0x0c040200
+#define BLACKMAGIC_DECKLINK_API_VERSION_STRING			"12.4.2"
+
+#endif	// __DeckLink_API_Version_h__
+
diff --git a/DeckLinkSDK/Win/include/DeckLinkAPI_v10_11.idl b/DeckLinkSDK/Win/include/DeckLinkAPI_v10_11.idl
new file mode 100644
index 0000000000..8b3317ab1d
--- /dev/null
+++ b/DeckLinkSDK/Win/include/DeckLinkAPI_v10_11.idl
@@ -0,0 +1,302 @@
+/* -LICENSE-START-
+** Copyright (c) 2018 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+/* DeckLinkAPI_v10_11.idl */
+
+// Enumeration Mapping
+
+/* Enum BMDDisplayModeSupport_v10_11 - Output mode supported flags */
+
+typedef [v1_enum] enum	_BMDDisplayModeSupport_v10_11 {
+    bmdDisplayModeNotSupported_v10_11                               = 0,
+    bmdDisplayModeSupported_v10_11,
+    bmdDisplayModeSupportedWithConversion_v10_11
+} BMDDisplayModeSupport_v10_11;
+
+/* Enum BMDDuplexMode - Duplex for configurable ports */
+
+typedef [v1_enum] enum	_BMDDuplexMode_v10_11 {
+    bmdDuplexModeFull_v10_11                                        = /* 'fdup' */ 0x66647570,
+    bmdDuplexModeHalf_v10_11                                        = /* 'hdup' */ 0x68647570
+} BMDDuplexMode_v10_11;
+
+/* Enum BMDDeckLinkConfigurationID - DeckLink Configuration ID */
+
+typedef [v1_enum] enum	_BMDDeckLinkConfigurationID_v10_11 {
+
+    /* Video Input/Output Integers */
+
+    bmdDeckLinkConfigDuplexMode_v10_11                              = /* 'dupx' */ 0x64757078,
+
+} BMDDeckLinkConfigurationID_v10_11;
+
+/* Enum BMDDeckLinkAttributeID - DeckLink Attribute ID */
+
+typedef [v1_enum] enum	_BMDDeckLinkAttributeID_v10_11 {
+
+    /* Flags */
+
+    BMDDeckLinkSupportsDuplexModeConfiguration_v10_11               = /* 'dupx' */ 0x64757078,
+    BMDDeckLinkSupportsHDKeying_v10_11                              = /* 'keyh' */ 0x6B657968,
+
+    /* Integers */
+
+    BMDDeckLinkPairedDevicePersistentID_v10_11                      = /* 'ppid' */ 0x70706964,
+    BMDDeckLinkSupportsFullDuplex_v10_11                            = /* 'fdup' */ 0x66647570,
+
+} BMDDeckLinkAttributeID_v10_11;
+
+typedef [v1_enum] enum	_BMDDeckLinkStatusID_v10_11 {
+	bmdDeckLinkStatusDuplexMode_v10_11								= /* 'dupx' */ 0x64757078,
+} BMDDeckLinkStatusID_v10_11;
+
+/* Enum BMDDuplexStatus - Duplex status of the device */
+
+typedef [v1_enum] enum	_BMDDuplexStatus_v10_11 {
+    bmdDuplexFullDuplex_v10_11                                      = /* 'fdup' */ 0x66647570,
+    bmdDuplexHalfDuplex_v10_11                                      = /* 'hdup' */ 0x68647570,
+    bmdDuplexSimplex_v10_11                                         = /* 'splx' */ 0x73706C78,
+    bmdDuplexInactive_v10_11                                        = /* 'inac' */ 0x696E6163
+} BMDDuplexStatus_v10_11;
+
+// Forward Declarations
+
+interface IDeckLinkConfiguration_v10_11;
+interface IDeckLinkAttributes_v10_11;
+interface IDeckLinkNotification_v10_11;
+
+/* Interface IDeckLinkConfiguration_v10_11 - DeckLink Configuration interface */
+
+[
+    object,
+    uuid(EF90380B-4AE5-4346-9077-E288E149F129),
+    local, 
+    helpstring("DeckLink Configuration interface")
+] interface IDeckLinkConfiguration_v10_11 : IUnknown
+{
+    HRESULT SetFlag([in] BMDDeckLinkConfigurationID cfgID, [in] BOOL value);
+    HRESULT GetFlag([in] BMDDeckLinkConfigurationID cfgID, [out] BOOL *value);
+    HRESULT SetInt([in] BMDDeckLinkConfigurationID cfgID, [in] LONGLONG value);
+    HRESULT GetInt([in] BMDDeckLinkConfigurationID cfgID, [out] LONGLONG *value);
+    HRESULT SetFloat([in] BMDDeckLinkConfigurationID cfgID, [in] double value);
+    HRESULT GetFloat([in] BMDDeckLinkConfigurationID cfgID, [out] double *value);
+    HRESULT SetString([in] BMDDeckLinkConfigurationID cfgID, [in] BSTR value);
+    HRESULT GetString([in] BMDDeckLinkConfigurationID cfgID, [out] BSTR *value);
+    HRESULT WriteConfigurationToPreferences(void);
+};
+
+/* Interface IDeckLinkAttributes_v10_11 - DeckLink Attribute interface */
+
+[
+    object,
+    uuid(ABC11843-D966-44CB-96E2-A1CB5D3135C4),
+    local, 
+    helpstring("DeckLink Attribute interface")
+] interface IDeckLinkAttributes_v10_11 : IUnknown
+{
+    HRESULT GetFlag([in] BMDDeckLinkAttributeID cfgID, [out] BOOL *value);
+    HRESULT GetInt([in] BMDDeckLinkAttributeID cfgID, [out] LONGLONG *value);
+    HRESULT GetFloat([in] BMDDeckLinkAttributeID cfgID, [out] double *value);
+    HRESULT GetString([in] BMDDeckLinkAttributeID cfgID, [out] BSTR *value);
+};
+
+/* Interface IDeckLinkOutput_v10_11 - DeckLink output interface. */
+
+[
+    object,
+    uuid(CC5C8A6E-3F2F-4B3A-87EA-FD78AF300564),
+    local,
+    helpstring("Created by QueryInterface from IDeckLink.")
+] interface IDeckLinkOutput_v10_11 : IUnknown
+{
+    HRESULT DoesSupportVideoMode([in] BMDDisplayMode displayMode, [in] BMDPixelFormat pixelFormat, [in] BMDVideoOutputFlags flags, [out] BMDDisplayModeSupport_v10_11 *result, [out] IDeckLinkDisplayMode **resultDisplayMode);
+    HRESULT GetDisplayModeIterator([out] IDeckLinkDisplayModeIterator **iterator);
+
+    HRESULT SetScreenPreviewCallback([in] IDeckLinkScreenPreviewCallback *previewCallback);
+
+    /* Video Output */
+
+    HRESULT EnableVideoOutput([in] BMDDisplayMode displayMode, [in] BMDVideoOutputFlags flags);
+    HRESULT DisableVideoOutput(void);
+
+    HRESULT SetVideoOutputFrameMemoryAllocator([in] IDeckLinkMemoryAllocator *theAllocator);
+    HRESULT CreateVideoFrame([in] int width, [in] int height, [in] int rowBytes, [in] BMDPixelFormat pixelFormat, [in] BMDFrameFlags flags, [out] IDeckLinkMutableVideoFrame **outFrame);
+    HRESULT CreateAncillaryData([in] BMDPixelFormat pixelFormat, [out] IDeckLinkVideoFrameAncillary **outBuffer);
+
+    HRESULT DisplayVideoFrameSync([in] IDeckLinkVideoFrame *theFrame);
+    HRESULT ScheduleVideoFrame([in] IDeckLinkVideoFrame *theFrame, [in] BMDTimeValue displayTime, [in] BMDTimeValue displayDuration, [in] BMDTimeScale timeScale);
+    HRESULT SetScheduledFrameCompletionCallback([in] IDeckLinkVideoOutputCallback *theCallback);
+    HRESULT GetBufferedVideoFrameCount([out] unsigned int *bufferedFrameCount);
+
+    /* Audio Output */
+
+    HRESULT EnableAudioOutput([in] BMDAudioSampleRate sampleRate, [in] BMDAudioSampleType sampleType, [in] unsigned int channelCount, [in] BMDAudioOutputStreamType streamType);
+    HRESULT DisableAudioOutput(void);
+
+    HRESULT WriteAudioSamplesSync([in] void *buffer, [in] unsigned int sampleFrameCount, [out] unsigned int *sampleFramesWritten);
+
+    HRESULT BeginAudioPreroll(void);
+    HRESULT EndAudioPreroll(void);
+    HRESULT ScheduleAudioSamples([in] void *buffer, [in] unsigned int sampleFrameCount, [in] BMDTimeValue streamTime, [in] BMDTimeScale timeScale, [out] unsigned int *sampleFramesWritten);
+
+    HRESULT GetBufferedAudioSampleFrameCount([out] unsigned int *bufferedSampleFrameCount);
+    HRESULT FlushBufferedAudioSamples(void);
+
+    HRESULT SetAudioCallback([in] IDeckLinkAudioOutputCallback *theCallback);
+
+    /* Output Control */
+
+    HRESULT StartScheduledPlayback([in] BMDTimeValue playbackStartTime, [in] BMDTimeScale timeScale, [in] double playbackSpeed);
+    HRESULT StopScheduledPlayback([in] BMDTimeValue stopPlaybackAtTime, [out] BMDTimeValue *actualStopTime, [in] BMDTimeScale timeScale);
+    HRESULT IsScheduledPlaybackRunning([out] BOOL *active);
+    HRESULT GetScheduledStreamTime([in] BMDTimeScale desiredTimeScale, [out] BMDTimeValue *streamTime, [out] double *playbackSpeed);
+    HRESULT GetReferenceStatus([out] BMDReferenceStatus *referenceStatus);
+
+    /* Hardware Timing */
+
+    HRESULT GetHardwareReferenceClock([in] BMDTimeScale desiredTimeScale, [out] BMDTimeValue *hardwareTime, [out] BMDTimeValue *timeInFrame, [out] BMDTimeValue *ticksPerFrame);
+    HRESULT GetFrameCompletionReferenceTimestamp([in] IDeckLinkVideoFrame *theFrame, [in] BMDTimeScale desiredTimeScale, [out] BMDTimeValue *frameCompletionTimestamp);
+};
+
+/* Interface IDeckLinkInput_v10_11 - DeckLink input interface. */
+
+[
+    object,
+    uuid(AF22762B-DFAC-4846-AA79-FA8883560995),
+    helpstring("Created by QueryInterface from IDeckLink.")
+] interface IDeckLinkInput_v10_11 : IUnknown
+{
+    HRESULT DoesSupportVideoMode([in] BMDDisplayMode displayMode, [in] BMDPixelFormat pixelFormat, [in] BMDVideoInputFlags flags, [out] BMDDisplayModeSupport_v10_11 *result, [out] IDeckLinkDisplayMode **resultDisplayMode);
+    HRESULT GetDisplayModeIterator([out] IDeckLinkDisplayModeIterator **iterator);
+
+    HRESULT SetScreenPreviewCallback([in] IDeckLinkScreenPreviewCallback *previewCallback);
+
+    /* Video Input */
+
+    HRESULT EnableVideoInput([in] BMDDisplayMode displayMode, [in] BMDPixelFormat pixelFormat, [in] BMDVideoInputFlags flags);
+    HRESULT DisableVideoInput(void);
+    HRESULT GetAvailableVideoFrameCount([out] unsigned int *availableFrameCount);
+    HRESULT SetVideoInputFrameMemoryAllocator([in] IDeckLinkMemoryAllocator *theAllocator);
+
+    /* Audio Input */
+
+    HRESULT EnableAudioInput([in] BMDAudioSampleRate sampleRate, [in] BMDAudioSampleType sampleType, [in] unsigned int channelCount);
+    HRESULT DisableAudioInput(void);
+    HRESULT GetAvailableAudioSampleFrameCount([out] unsigned int *availableSampleFrameCount);
+
+    /* Input Control */
+
+    HRESULT StartStreams(void);
+    HRESULT StopStreams(void);
+    HRESULT PauseStreams(void);
+    HRESULT FlushStreams(void);
+    HRESULT SetCallback([in] IDeckLinkInputCallback_v11_5_1 *theCallback);
+
+    /* Hardware Timing */
+
+    HRESULT GetHardwareReferenceClock([in] BMDTimeScale desiredTimeScale, [out] BMDTimeValue *hardwareTime, [out] BMDTimeValue *timeInFrame, [out] BMDTimeValue *ticksPerFrame);
+};
+
+/* Interface IDeckLinkEncoderInput_v10_11 - Created by QueryInterface from IDeckLink. */
+
+[
+    object,
+    uuid(270587DA-6B7D-42E7-A1F0-6D853F581185),
+    helpstring("Created by QueryInterface from IDeckLink.")
+] interface IDeckLinkEncoderInput_v10_11 : IUnknown
+{
+    HRESULT DoesSupportVideoMode([in] BMDDisplayMode displayMode, [in] BMDPixelFormat pixelFormat, [in] BMDVideoInputFlags flags, [out] BMDDisplayModeSupport_v10_11 *result, [out] IDeckLinkDisplayMode **resultDisplayMode);
+    HRESULT GetDisplayModeIterator([out] IDeckLinkDisplayModeIterator **iterator);
+
+    /* Video Input */
+
+    HRESULT EnableVideoInput([in] BMDDisplayMode displayMode, [in] BMDPixelFormat pixelFormat, [in] BMDVideoInputFlags flags);
+    HRESULT DisableVideoInput(void);
+    HRESULT GetAvailablePacketsCount([out] unsigned int *availablePacketsCount);
+    HRESULT SetMemoryAllocator([in] IDeckLinkMemoryAllocator *theAllocator);
+
+    /* Audio Input */
+
+    HRESULT EnableAudioInput([in] BMDAudioFormat audioFormat, [in] BMDAudioSampleRate sampleRate, [in] BMDAudioSampleType sampleType, [in] unsigned int channelCount);
+    HRESULT DisableAudioInput(void);
+    HRESULT GetAvailableAudioSampleFrameCount([out] unsigned int *availableSampleFrameCount);
+
+    /* Input Control */
+
+    HRESULT StartStreams(void);
+    HRESULT StopStreams(void);
+    HRESULT PauseStreams(void);
+    HRESULT FlushStreams(void);
+    HRESULT SetCallback([in] IDeckLinkEncoderInputCallback *theCallback);
+
+    /* Hardware Timing */
+
+    HRESULT GetHardwareReferenceClock([in] BMDTimeScale desiredTimeScale, [out] BMDTimeValue *hardwareTime, [out] BMDTimeValue *timeInFrame, [out] BMDTimeValue *ticksPerFrame);
+};
+
+/* Interface IDeckLinkNotification_v10_11 - DeckLink Notification interface */
+
+[
+    object,
+    uuid(0A1FB207-E215-441B-9B19-6FA1575946C5),
+    local,
+    helpstring("DeckLink Notification interface")
+] interface IDeckLinkNotification_v10_11 : IUnknown
+{
+    HRESULT Subscribe([in] BMDNotifications topic, [in] IDeckLinkNotificationCallback *theCallback);
+    HRESULT Unsubscribe([in] BMDNotifications topic, [in] IDeckLinkNotificationCallback *theCallback);
+};
+
+importlib("stdole2.tlb");
+
+[
+    uuid(87D2693F-8D4A-45C7-B43F-10ACBA25E68F),
+    helpstring("CDeckLinkIterator_v10_11 Class")
+] coclass CDeckLinkIterator_v10_11
+{
+    [default] interface IDeckLinkIterator;
+};
+
+[
+    uuid(652615D4-26CD-4514-B161-2FD5072ED008),
+    helpstring("CDeckLinkDiscovery_v10_11 Class")
+] coclass CDeckLinkDiscovery_v10_11
+{
+    [default] interface IDeckLinkDiscovery;
+};
diff --git a/DeckLinkSDK/Win/include/DeckLinkAPI_v10_2.idl b/DeckLinkSDK/Win/include/DeckLinkAPI_v10_2.idl
new file mode 100644
index 0000000000..e31ff599d3
--- /dev/null
+++ b/DeckLinkSDK/Win/include/DeckLinkAPI_v10_2.idl
@@ -0,0 +1,86 @@
+/* -LICENSE-START-
+** Copyright (c) 2014 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+/* DeckLinkAPI_v10_2.idl */
+
+// Enumeration Mapping
+
+/* Enum BMDDeckLinkConfigurationID - DeckLink Configuration ID */
+
+typedef [v1_enum] enum  _BMDDeckLinkConfigurationID_v10_2 {
+
+    /* Video output flags */
+
+    bmdDeckLinkConfig3GBpsVideoOutput_v10_2                      = /* '3gbs' */ 0x33676273
+
+} BMDDeckLinkConfigurationID_v10_2;
+
+/* Enum BMDAudioConnection_v10_2 - Audio connection types */
+
+typedef [v1_enum] enum	_BMDAudioConnection_v10_2 {
+    bmdAudioConnectionEmbedded_v10_2                             = /* 'embd' */ 0x656D6264,
+    bmdAudioConnectionAESEBU_v10_2                               = /* 'aes ' */ 0x61657320,
+    bmdAudioConnectionAnalog_v10_2                               = /* 'anlg' */ 0x616E6C67,
+    bmdAudioConnectionAnalogXLR_v10_2                            = /* 'axlr' */ 0x61786C72,
+    bmdAudioConnectionAnalogRCA_v10_2                            = /* 'arca' */ 0x61726361
+} BMDAudioConnection_v10_2;
+
+// Forward Declarations
+
+interface IDeckLinkConfiguration_v10_2;
+
+/* Interface IDeckLinkConfiguration_v10_2 - DeckLink Configuration interface */
+
+[
+    object,
+    uuid(C679A35B-610C-4D09-B748-1D0478100FC0),
+    local, 
+    helpstring("DeckLink Configuration interface")
+] interface IDeckLinkConfiguration_v10_2 : IUnknown
+{
+    HRESULT SetFlag([in] BMDDeckLinkConfigurationID cfgID, [in] BOOL value);
+    HRESULT GetFlag([in] BMDDeckLinkConfigurationID cfgID, [out] BOOL *value);
+    HRESULT SetInt([in] BMDDeckLinkConfigurationID cfgID, [in] LONGLONG value);
+    HRESULT GetInt([in] BMDDeckLinkConfigurationID cfgID, [out] LONGLONG *value);
+    HRESULT SetFloat([in] BMDDeckLinkConfigurationID cfgID, [in] double value);
+    HRESULT GetFloat([in] BMDDeckLinkConfigurationID cfgID, [out] double *value);
+    HRESULT SetString([in] BMDDeckLinkConfigurationID cfgID, [in] BSTR value);
+    HRESULT GetString([in] BMDDeckLinkConfigurationID cfgID, [out] BSTR *value);
+    HRESULT WriteConfigurationToPreferences(void);
+};
diff --git a/DeckLinkSDK/Win/include/DeckLinkAPI_v10_4.idl b/DeckLinkSDK/Win/include/DeckLinkAPI_v10_4.idl
new file mode 100644
index 0000000000..e5e47942ac
--- /dev/null
+++ b/DeckLinkSDK/Win/include/DeckLinkAPI_v10_4.idl
@@ -0,0 +1,74 @@
+/* -LICENSE-START-
+** Copyright (c) 2015 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+/* DeckLinkAPI_v10_4.idl */
+
+/* Enum BMDDeckLinkConfigurationID - DeckLink Configuration ID */
+
+typedef [v1_enum] enum	_BMDDeckLinkConfigurationID_v10_4 {
+
+    /* Video output flags */
+
+    bmdDeckLinkConfigSingleLinkVideoOutput_v10_4                       = /* 'sglo' */ 0x73676C6F,
+
+} BMDDeckLinkConfigurationID_v10_4;
+
+// Forward Declarations
+
+interface IDeckLinkConfiguration_v10_4;
+
+/* Interface IDeckLinkConfiguration_v10_4 - DeckLink Configuration interface */
+
+[
+    object,
+    uuid(1E69FCF6-4203-4936-8076-2A9F4CFD50CB),
+    local,
+    helpstring("DeckLink Configuration interface")
+] interface IDeckLinkConfiguration_v10_4 : IUnknown
+{
+    HRESULT SetFlag([in] BMDDeckLinkConfigurationID cfgID, [in] BOOL value);
+    HRESULT GetFlag([in] BMDDeckLinkConfigurationID cfgID, [out] BOOL *value);
+    HRESULT SetInt([in] BMDDeckLinkConfigurationID cfgID, [in] LONGLONG value);
+    HRESULT GetInt([in] BMDDeckLinkConfigurationID cfgID, [out] LONGLONG *value);
+    HRESULT SetFloat([in] BMDDeckLinkConfigurationID cfgID, [in] double value);
+    HRESULT GetFloat([in] BMDDeckLinkConfigurationID cfgID, [out] double *value);
+    HRESULT SetString([in] BMDDeckLinkConfigurationID cfgID, [in] BSTR value);
+    HRESULT GetString([in] BMDDeckLinkConfigurationID cfgID, [out] BSTR *value);
+    HRESULT WriteConfigurationToPreferences(void);
+};
diff --git a/DeckLinkSDK/Win/include/DeckLinkAPI_v10_5.idl b/DeckLinkSDK/Win/include/DeckLinkAPI_v10_5.idl
new file mode 100644
index 0000000000..f18274494e
--- /dev/null
+++ b/DeckLinkSDK/Win/include/DeckLinkAPI_v10_5.idl
@@ -0,0 +1,74 @@
+/* -LICENSE-START-
+** Copyright (c) 2015 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+/* DeckLinkAPI_v10_5.idl */
+
+/* Enum BMDDeckLinkConfigurationID - DeckLink Configuration ID */
+
+typedef [v1_enum] enum	_BMDDeckLinkAttributeID_v10_5 {
+
+    /* Integers */
+
+    BMDDeckLinkDeviceBusyState_v10_5                             = /* 'dbst' */ 0x64627374,
+
+} BMDDeckLinkAttributeID_v10_5;
+
+// Forward Declarations
+
+interface IDeckLinkEncoderConfiguration_v10_5;
+
+/* Interface IDeckLinkEncoderConfiguration_v10_5 - DeckLink Encoder Configuration interface. Obtained from IDeckLinkEncoderInput */
+
+[
+    object,
+    uuid(67455668-0848-45DF-8D8E-350A77C9A028),
+    local, 
+    helpstring("DeckLink Encoder Configuration interface. Obtained from IDeckLinkEncoderInput")
+] interface IDeckLinkEncoderConfiguration_v10_5 : IUnknown
+{
+    HRESULT SetFlag([in] BMDDeckLinkEncoderConfigurationID cfgID, [in] BOOL value);
+    HRESULT GetFlag([in] BMDDeckLinkEncoderConfigurationID cfgID, [out] BOOL *value);
+    HRESULT SetInt([in] BMDDeckLinkEncoderConfigurationID cfgID, [in] LONGLONG value);
+    HRESULT GetInt([in] BMDDeckLinkEncoderConfigurationID cfgID, [out] LONGLONG *value);
+    HRESULT SetFloat([in] BMDDeckLinkEncoderConfigurationID cfgID, [in] double value);
+    HRESULT GetFloat([in] BMDDeckLinkEncoderConfigurationID cfgID, [out] double *value);
+    HRESULT SetString([in] BMDDeckLinkEncoderConfigurationID cfgID, [in] BSTR value);
+    HRESULT GetString([in] BMDDeckLinkEncoderConfigurationID cfgID, [out] BSTR *value);
+    HRESULT GetDecoderConfigurationInfo([out] void *buffer, [in] long bufferSize, [out] long *returnedSize);
+};
diff --git a/DeckLinkSDK/Win/include/DeckLinkAPI_v10_6.idl b/DeckLinkSDK/Win/include/DeckLinkAPI_v10_6.idl
new file mode 100644
index 0000000000..4993772094
--- /dev/null
+++ b/DeckLinkSDK/Win/include/DeckLinkAPI_v10_6.idl
@@ -0,0 +1,54 @@
+/* -LICENSE-START-
+** Copyright (c) 2016 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+/* DeckLinkAPI_v10_6.idl */
+
+/* Enum BMDDeckLinkAttributeID - DeckLink Attribute ID */
+
+typedef [v1_enum] enum	_BMDDeckLinkAttributeID_v10_6 {
+
+    /* Flags */
+
+    BMDDeckLinkSupportsDesktopDisplay_v10_6                      = /* 'extd' */ 0x65787464,
+
+} BMDDeckLinkAttributeID_v10_6;
+
+typedef [v1_enum] enum _BMDIdleVideoOutputOperation_v10_6 {
+    bmdIdleVideoOutputDesktop_v10_6                              = /* 'desk' */ 0x6465736B
+} BMDIdleVideoOutputOperation_v10_6;
diff --git a/DeckLinkSDK/Win/include/DeckLinkAPI_v10_8.idl b/DeckLinkSDK/Win/include/DeckLinkAPI_v10_8.idl
new file mode 100644
index 0000000000..d115625e9e
--- /dev/null
+++ b/DeckLinkSDK/Win/include/DeckLinkAPI_v10_8.idl
@@ -0,0 +1,59 @@
+/* -LICENSE-START-
+** Copyright (c) 2016 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+/* DeckLinkAPI_v10_8.idl */
+
+
+importlib("stdole2.tlb");
+
+[
+    uuid(1F2E109A-8F4F-49E4-9203-135595CB6FA5),
+    helpstring("CDeckLinkIterator_v10_8 Class")
+] coclass CDeckLinkIterator_v10_8
+{
+    [default] interface IDeckLinkIterator;
+};
+
+[
+    uuid(1073A05C-D885-47E9-B3C6-129B3F9F648B),
+    helpstring("CDeckLinkDiscovery_v10_8 Class")
+] coclass CDeckLinkDiscovery_v10_8
+{
+    [default] interface IDeckLinkDiscovery;
+};
diff --git a/DeckLinkSDK/Win/include/DeckLinkAPI_v10_9.idl b/DeckLinkSDK/Win/include/DeckLinkAPI_v10_9.idl
new file mode 100644
index 0000000000..db75747ee3
--- /dev/null
+++ b/DeckLinkSDK/Win/include/DeckLinkAPI_v10_9.idl
@@ -0,0 +1,74 @@
+/* -LICENSE-START-
+** Copyright (c) 2017 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+/* DeckLinkAPI_v10_9.idl */
+
+/* Enum BMDDeckLinkConfigurationID - DeckLink Configuration ID */
+
+typedef [v1_enum] enum	_BMDDeckLinkConfigurationID_v10_9 {
+
+    /* Video output flags */
+
+    bmdDeckLinkConfig1080pNotPsF_v10_9                      = /* 'fpro' */ 0x6670726F,
+
+} BMDDeckLinkConfigurationID_v10_9;
+
+// Forward Declarations
+
+interface IDeckLinkConfiguration_v10_9;
+
+/* Interface IDeckLinkConfiguration_v10_9 - DeckLink Configuration interface */
+
+[
+    object,
+    uuid(CB71734A-FE37-4E8D-8E13-802133A1C3F2),
+    local,
+    helpstring("DeckLink Configuration interface")
+] interface IDeckLinkConfiguration_v10_9 : IUnknown
+{
+    HRESULT SetFlag([in] BMDDeckLinkConfigurationID cfgID, [in] BOOL value);
+    HRESULT GetFlag([in] BMDDeckLinkConfigurationID cfgID, [out] BOOL *value);
+    HRESULT SetInt([in] BMDDeckLinkConfigurationID cfgID, [in] LONGLONG value);
+    HRESULT GetInt([in] BMDDeckLinkConfigurationID cfgID, [out] LONGLONG *value);
+    HRESULT SetFloat([in] BMDDeckLinkConfigurationID cfgID, [in] double value);
+    HRESULT GetFloat([in] BMDDeckLinkConfigurationID cfgID, [out] double *value);
+    HRESULT SetString([in] BMDDeckLinkConfigurationID cfgID, [in] BSTR value);
+    HRESULT GetString([in] BMDDeckLinkConfigurationID cfgID, [out] BSTR *value);
+    HRESULT WriteConfigurationToPreferences(void);
+};
diff --git a/DeckLinkSDK/Win/include/DeckLinkAPI_v11_4.idl b/DeckLinkSDK/Win/include/DeckLinkAPI_v11_4.idl
new file mode 100644
index 0000000000..a72bfad8df
--- /dev/null
+++ b/DeckLinkSDK/Win/include/DeckLinkAPI_v11_4.idl
@@ -0,0 +1,133 @@
+/* -LICENSE-START-
+** Copyright (c) 2019 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+/* DeckLinkAPI_v11_4.idl */
+
+// Enumeration Mapping
+
+/* Interface IDeckLinkOutput_v11_4 - Created by QueryInterface from IDeckLink. */
+
+[
+    object,
+    uuid(065A0F6C-C508-4D0D-B919-F5EB0EBFC96B),
+    local,
+    helpstring("Created by QueryInterface from IDeckLink.")
+] interface IDeckLinkOutput_v11_4 : IUnknown
+{
+    HRESULT DoesSupportVideoMode ([in] BMDVideoConnection connection /* If a value of 0 is specified, the caller does not care about the connection */, [in] BMDDisplayMode requestedMode, [in] BMDPixelFormat requestedPixelFormat, [in] BMDSupportedVideoModeFlags flags, [out] BMDDisplayMode* actualMode, [out] BOOL* supported);
+    HRESULT GetDisplayMode ([in] BMDDisplayMode displayMode, [out] IDeckLinkDisplayMode** resultDisplayMode);
+    HRESULT GetDisplayModeIterator ([out] IDeckLinkDisplayModeIterator** iterator);
+    HRESULT SetScreenPreviewCallback ([in] IDeckLinkScreenPreviewCallback* previewCallback);
+
+    /* Video Output */
+
+    HRESULT EnableVideoOutput ([in] BMDDisplayMode displayMode, [in] BMDVideoOutputFlags flags);
+    HRESULT DisableVideoOutput (void);
+    HRESULT SetVideoOutputFrameMemoryAllocator ([in] IDeckLinkMemoryAllocator* theAllocator);
+    HRESULT CreateVideoFrame ([in] int width, [in] int height, [in] int rowBytes, [in] BMDPixelFormat pixelFormat, [in] BMDFrameFlags flags, [out] IDeckLinkMutableVideoFrame** outFrame);
+    HRESULT CreateAncillaryData ([in] BMDPixelFormat pixelFormat, [out] IDeckLinkVideoFrameAncillary** outBuffer);	// Use of IDeckLinkVideoFrameAncillaryPackets is preferred
+    HRESULT DisplayVideoFrameSync ([in] IDeckLinkVideoFrame* theFrame);
+    HRESULT ScheduleVideoFrame ([in] IDeckLinkVideoFrame* theFrame, [in] BMDTimeValue displayTime, [in] BMDTimeValue displayDuration, [in] BMDTimeScale timeScale);
+    HRESULT SetScheduledFrameCompletionCallback ([in] IDeckLinkVideoOutputCallback* theCallback);
+    HRESULT GetBufferedVideoFrameCount ([out] unsigned int* bufferedFrameCount);
+
+    /* Audio Output */
+
+    HRESULT EnableAudioOutput ([in] BMDAudioSampleRate sampleRate, [in] BMDAudioSampleType sampleType, [in] unsigned int channelCount, [in] BMDAudioOutputStreamType streamType);
+    HRESULT DisableAudioOutput (void);
+    HRESULT WriteAudioSamplesSync ([in] void* buffer, [in] unsigned int sampleFrameCount, [out] unsigned int* sampleFramesWritten);
+    HRESULT BeginAudioPreroll (void);
+    HRESULT EndAudioPreroll (void);
+    HRESULT ScheduleAudioSamples ([in] void* buffer, [in] unsigned int sampleFrameCount, [in] BMDTimeValue streamTime, [in] BMDTimeScale timeScale, [out] unsigned int* sampleFramesWritten);
+    HRESULT GetBufferedAudioSampleFrameCount ([out] unsigned int* bufferedSampleFrameCount);
+    HRESULT FlushBufferedAudioSamples (void);
+    HRESULT SetAudioCallback ([in] IDeckLinkAudioOutputCallback* theCallback);
+
+    /* Output Control */
+
+    HRESULT StartScheduledPlayback ([in] BMDTimeValue playbackStartTime, [in] BMDTimeScale timeScale, [in] double playbackSpeed);
+    HRESULT StopScheduledPlayback ([in] BMDTimeValue stopPlaybackAtTime, [out] BMDTimeValue* actualStopTime, [in] BMDTimeScale timeScale);
+    HRESULT IsScheduledPlaybackRunning ([out] BOOL* active);
+    HRESULT GetScheduledStreamTime ([in] BMDTimeScale desiredTimeScale, [out] BMDTimeValue* streamTime, [out] double* playbackSpeed);
+    HRESULT GetReferenceStatus ([out] BMDReferenceStatus* referenceStatus);
+
+    /* Hardware Timing */
+
+    HRESULT GetHardwareReferenceClock ([in] BMDTimeScale desiredTimeScale, [out] BMDTimeValue* hardwareTime, [out] BMDTimeValue* timeInFrame, [out] BMDTimeValue* ticksPerFrame);
+    HRESULT GetFrameCompletionReferenceTimestamp ([in] IDeckLinkVideoFrame* theFrame, [in] BMDTimeScale desiredTimeScale, [out] BMDTimeValue* frameCompletionTimestamp);
+};
+
+/* Interface IDeckLinkInput_v11_4 - Created by QueryInterface from IDeckLink. */
+
+[
+    object,
+    uuid(2A88CF76-F494-4216-A7EF-DC74EEB83882),
+    helpstring("Created by QueryInterface from IDeckLink.")
+] interface IDeckLinkInput_v11_4 : IUnknown
+{
+    HRESULT DoesSupportVideoMode ([in] BMDVideoConnection connection /* If a value of 0 is specified, the caller does not care about the connection */, [in] BMDDisplayMode requestedMode, [in] BMDPixelFormat requestedPixelFormat, [in] BMDSupportedVideoModeFlags flags, [out] BOOL* supported);
+    HRESULT GetDisplayMode ([in] BMDDisplayMode displayMode, [out] IDeckLinkDisplayMode** resultDisplayMode);
+    HRESULT GetDisplayModeIterator ([out] IDeckLinkDisplayModeIterator** iterator);
+    HRESULT SetScreenPreviewCallback ([in] IDeckLinkScreenPreviewCallback* previewCallback);
+
+    /* Video Input */
+
+    HRESULT EnableVideoInput ([in] BMDDisplayMode displayMode, [in] BMDPixelFormat pixelFormat, [in] BMDVideoInputFlags flags);
+    HRESULT DisableVideoInput (void);
+    HRESULT GetAvailableVideoFrameCount ([out] unsigned int* availableFrameCount);
+    HRESULT SetVideoInputFrameMemoryAllocator ([in] IDeckLinkMemoryAllocator* theAllocator);
+
+    /* Audio Input */
+
+    HRESULT EnableAudioInput ([in] BMDAudioSampleRate sampleRate, [in] BMDAudioSampleType sampleType, [in] unsigned int channelCount);
+    HRESULT DisableAudioInput (void);
+    HRESULT GetAvailableAudioSampleFrameCount ([out] unsigned int* availableSampleFrameCount);
+
+    /* Input Control */
+
+    HRESULT StartStreams (void);
+    HRESULT StopStreams (void);
+    HRESULT PauseStreams (void);
+    HRESULT FlushStreams (void);
+    HRESULT SetCallback ([in] IDeckLinkInputCallback_v11_5_1* theCallback);
+
+    /* Hardware Timing */
+
+    HRESULT GetHardwareReferenceClock ([in] BMDTimeScale desiredTimeScale, [out] BMDTimeValue* hardwareTime, [out] BMDTimeValue* timeInFrame, [out] BMDTimeValue* ticksPerFrame);
+};
diff --git a/DeckLinkSDK/Win/include/DeckLinkAPI_v11_5.idl b/DeckLinkSDK/Win/include/DeckLinkAPI_v11_5.idl
new file mode 100644
index 0000000000..050bb6744e
--- /dev/null
+++ b/DeckLinkSDK/Win/include/DeckLinkAPI_v11_5.idl
@@ -0,0 +1,112 @@
+/* -LICENSE-START-
+** Copyright (c) 2020 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+/* DeckLinkAPI_v11_5.idl */
+
+typedef [v1_enum] enum	_BMDDeckLinkFrameMetadataID_v11_5 {
+    bmdDeckLinkFrameMetadataCintelFilmType_v11_5                       = /* 'cfty' */ 0x63667479,	// Current film type
+    bmdDeckLinkFrameMetadataCintelFilmGauge_v11_5                      = /* 'cfga' */ 0x63666761,	// Current film gauge
+    bmdDeckLinkFrameMetadataCintelKeykodeLow_v11_5                     = /* 'ckkl' */ 0x636B6B6C,	// Raw keykode value - low 64 bits
+    bmdDeckLinkFrameMetadataCintelKeykodeHigh_v11_5                    = /* 'ckkh' */ 0x636B6B68,	// Raw keykode value - high 64 bits
+    bmdDeckLinkFrameMetadataCintelTile1Size_v11_5                      = /* 'ct1s' */ 0x63743173,	// Size in bytes of compressed raw tile 1
+    bmdDeckLinkFrameMetadataCintelTile2Size_v11_5                      = /* 'ct2s' */ 0x63743273,	// Size in bytes of compressed raw tile 2
+    bmdDeckLinkFrameMetadataCintelTile3Size_v11_5                      = /* 'ct3s' */ 0x63743373,	// Size in bytes of compressed raw tile 3
+    bmdDeckLinkFrameMetadataCintelTile4Size_v11_5                      = /* 'ct4s' */ 0x63743473,	// Size in bytes of compressed raw tile 4
+    bmdDeckLinkFrameMetadataCintelImageWidth_v11_5                     = /* 'IWPx' */ 0x49575078,	// Width in pixels of image
+    bmdDeckLinkFrameMetadataCintelImageHeight_v11_5                    = /* 'IHPx' */ 0x49485078,	// Height in pixels of image
+    bmdDeckLinkFrameMetadataCintelLinearMaskingRedInRed_v11_5          = /* 'mrir' */ 0x6D726972,	// Red in red linear masking parameter
+    bmdDeckLinkFrameMetadataCintelLinearMaskingGreenInRed_v11_5        = /* 'mgir' */ 0x6D676972,	// Green in red linear masking parameter
+    bmdDeckLinkFrameMetadataCintelLinearMaskingBlueInRed_v11_5         = /* 'mbir' */ 0x6D626972,	// Blue in red linear masking parameter
+    bmdDeckLinkFrameMetadataCintelLinearMaskingRedInGreen_v11_5        = /* 'mrig' */ 0x6D726967,	// Red in green linear masking parameter
+    bmdDeckLinkFrameMetadataCintelLinearMaskingGreenInGreen_v11_5      = /* 'mgig' */ 0x6D676967,	// Green in green linear masking parameter
+    bmdDeckLinkFrameMetadataCintelLinearMaskingBlueInGreen_v11_5       = /* 'mbig' */ 0x6D626967,	// Blue in green linear masking parameter
+    bmdDeckLinkFrameMetadataCintelLinearMaskingRedInBlue_v11_5         = /* 'mrib' */ 0x6D726962,	// Red in blue linear masking parameter
+    bmdDeckLinkFrameMetadataCintelLinearMaskingGreenInBlue_v11_5       = /* 'mgib' */ 0x6D676962,	// Green in blue linear masking parameter
+    bmdDeckLinkFrameMetadataCintelLinearMaskingBlueInBlue_v11_5        = /* 'mbib' */ 0x6D626962,	// Blue in blue linear masking parameter
+    bmdDeckLinkFrameMetadataCintelLogMaskingRedInRed_v11_5             = /* 'mlrr' */ 0x6D6C7272,	// Red in red log masking parameter
+    bmdDeckLinkFrameMetadataCintelLogMaskingGreenInRed_v11_5           = /* 'mlgr' */ 0x6D6C6772,	// Green in red log masking parameter
+    bmdDeckLinkFrameMetadataCintelLogMaskingBlueInRed_v11_5            = /* 'mlbr' */ 0x6D6C6272,	// Blue in red log masking parameter
+    bmdDeckLinkFrameMetadataCintelLogMaskingRedInGreen_v11_5           = /* 'mlrg' */ 0x6D6C7267,	// Red in green log masking parameter
+    bmdDeckLinkFrameMetadataCintelLogMaskingGreenInGreen_v11_5         = /* 'mlgg' */ 0x6D6C6767,	// Green in green log masking parameter
+    bmdDeckLinkFrameMetadataCintelLogMaskingBlueInGreen_v11_5          = /* 'mlbg' */ 0x6D6C6267,	// Blue in green log masking parameter
+    bmdDeckLinkFrameMetadataCintelLogMaskingRedInBlue_v11_5            = /* 'mlrb' */ 0x6D6C7262,	// Red in blue log masking parameter
+    bmdDeckLinkFrameMetadataCintelLogMaskingGreenInBlue_v11_5          = /* 'mlgb' */ 0x6D6C6762,	// Green in blue log masking parameter
+    bmdDeckLinkFrameMetadataCintelLogMaskingBlueInBlue_v11_5           = /* 'mlbb' */ 0x6D6C6262,	// Blue in blue log masking parameter
+    bmdDeckLinkFrameMetadataCintelFilmFrameRate_v11_5                  = /* 'cffr' */ 0x63666672,	// Film frame rate
+    bmdDeckLinkFrameMetadataCintelOffsetToApplyHorizontal_v11_5        = /* 'otah' */ 0x6F746168,	// Horizontal offset (pixels) to be applied to image
+    bmdDeckLinkFrameMetadataCintelOffsetToApplyVertical_v11_5          = /* 'otav' */ 0x6F746176,	// Vertical offset (pixels) to be applied to image
+    bmdDeckLinkFrameMetadataCintelGainRed_v11_5                        = /* 'LfRd' */ 0x4C665264,	// Red gain parameter to apply after log
+    bmdDeckLinkFrameMetadataCintelGainGreen_v11_5                      = /* 'LfGr' */ 0x4C664772,	// Green gain parameter to apply after log
+    bmdDeckLinkFrameMetadataCintelGainBlue_v11_5                       = /* 'LfBl' */ 0x4C66426C,	// Blue gain parameter to apply after log
+    bmdDeckLinkFrameMetadataCintelLiftRed_v11_5                        = /* 'GnRd' */ 0x476E5264,	// Red lift parameter to apply after log and gain
+    bmdDeckLinkFrameMetadataCintelLiftGreen_v11_5                      = /* 'GnGr' */ 0x476E4772,	// Green lift parameter to apply after log and gain
+    bmdDeckLinkFrameMetadataCintelLiftBlue_v11_5                       = /* 'GnBl' */ 0x476E426C,	// Blue lift parameter to apply after log and gain
+    bmdDeckLinkFrameMetadataCintelHDRGainRed_v11_5                     = /* 'HGRd' */ 0x48475264,	// Red gain parameter to apply to linear data for HDR Combination
+    bmdDeckLinkFrameMetadataCintelHDRGainGreen_v11_5                   = /* 'HGGr' */ 0x48474772,	// Green gain parameter to apply to linear data for HDR Combination
+    bmdDeckLinkFrameMetadataCintelHDRGainBlue_v11_5                    = /* 'HGBl' */ 0x4847426C,	// Blue gain parameter to apply to linear data for HDR Combination
+	bmdDeckLinkFrameMetadataCintel16mmCropRequired_v11_5               = /* 'c16c' */ 0x63313663,	// The image should be cropped to 16mm size
+    bmdDeckLinkFrameMetadataCintelInversionRequired_v11_5              = /* 'cinv' */ 0x63696E76,	// The image should be colour inverted
+    bmdDeckLinkFrameMetadataCintelFlipRequired_v11_5                   = /* 'cflr' */ 0x63666C72,	// The image should be flipped horizontally
+    bmdDeckLinkFrameMetadataCintelFocusAssistEnabled_v11_5             = /* 'cfae' */ 0x63666165,	// Focus Assist is currently enabled
+    bmdDeckLinkFrameMetadataCintelKeykodeIsInterpolated_v11_5          = /* 'kkii' */ 0x6B6B6969	// The keykode for this frame is interpolated from nearby keykodes
+} BMDDeckLinkFrameMetadataID_v11_5;
+
+// Forward Declarations
+
+interface IDeckLinkVideoFrameMetadataExtensions_v11_5;
+
+/* Interface IDeckLinkVideoFrameMetadataExtensions_v11_5 - Optional interface implemented on IDeckLinkVideoFrame to support frame metadata such as HDMI HDR information */
+
+[
+    object,
+    uuid(D5973DC9-6432-46D0-8F0B-2496F8A1238F),
+    local, 
+    helpstring("Optional interface implemented on IDeckLinkVideoFrame to support frame metadata such as HDMI HDR information")
+] interface IDeckLinkVideoFrameMetadataExtensions_v11_5 : IUnknown
+{
+    HRESULT GetInt([in] BMDDeckLinkFrameMetadataID_v11_5 metadataID, [out] LONGLONG *value);
+    HRESULT GetFloat([in] BMDDeckLinkFrameMetadataID_v11_5 metadataID, [out] double *value);
+    HRESULT GetFlag([in] BMDDeckLinkFrameMetadataID_v11_5 metadataID, [out] BOOL* value);
+    HRESULT GetString([in] BMDDeckLinkFrameMetadataID_v11_5 metadataID, [out] BSTR *value);
+};
+
+/* Coclasses */
+
+importlib("stdole2.tlb");
diff --git a/DeckLinkSDK/Win/include/DeckLinkAPI_v11_5_1.idl b/DeckLinkSDK/Win/include/DeckLinkAPI_v11_5_1.idl
new file mode 100644
index 0000000000..b9f3bd6a51
--- /dev/null
+++ b/DeckLinkSDK/Win/include/DeckLinkAPI_v11_5_1.idl
@@ -0,0 +1,104 @@
+/* -LICENSE-START-
+** Copyright (c) 2020 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+/* DeckLinkAPI_v11_5_1.idl */
+
+// Enumeration Mapping
+
+/* Enum BMDDeckLinkStatusID - DeckLink Status ID */
+
+typedef [v1_enum] enum	_BMDDeckLinkStatusID_v11_5_1 {
+
+    /* Video output flags */
+
+    bmdDeckLinkStatusDetectedVideoInputFlags_v11_5_1                     = /* 'dvif' */ 0x64766966,
+
+} BMDDeckLinkStatusID_v11_5_1;
+
+/* Interface IDeckLinkInputCallback_v11_5_1 - Frame arrival callback. */
+
+[
+    object,
+    uuid(DD04E5EC-7415-42AB-AE4A-E80C4DFC044A),
+    helpstring("Frame arrival callback.")
+] interface IDeckLinkInputCallback_v11_5_1 : IUnknown
+{
+    HRESULT VideoInputFormatChanged ([in] BMDVideoInputFormatChangedEvents notificationEvents, [in] IDeckLinkDisplayMode* newDisplayMode, [in] BMDDetectedVideoInputFormatFlags detectedSignalFlags);
+    HRESULT VideoInputFrameArrived ([in] IDeckLinkVideoInputFrame* videoFrame, [in] IDeckLinkAudioInputPacket* audioPacket);
+};
+
+/* Interface IDeckLinkInput_v11_5_1 - Created by QueryInterface from IDeckLink. */
+
+[
+    object,
+    uuid(9434C6E4-B15D-4B1C-979E-661E3DDCB4B9),
+    helpstring("Created by QueryInterface from IDeckLink.")
+] interface IDeckLinkInput_v11_5_1 : IUnknown
+{
+    HRESULT DoesSupportVideoMode ([in] BMDVideoConnection connection /* If a value of bmdVideoConnectionUnspecified is specified, the caller does not care about the connection */, [in] BMDDisplayMode requestedMode, [in] BMDPixelFormat requestedPixelFormat, [in] BMDVideoInputConversionMode conversionMode, [in] BMDSupportedVideoModeFlags flags, [out] BMDDisplayMode* actualMode, [out] BOOL* supported);
+    HRESULT GetDisplayMode ([in] BMDDisplayMode displayMode, [out] IDeckLinkDisplayMode** resultDisplayMode);
+    HRESULT GetDisplayModeIterator ([out] IDeckLinkDisplayModeIterator** iterator);
+    HRESULT SetScreenPreviewCallback ([in] IDeckLinkScreenPreviewCallback* previewCallback);
+
+    /* Video Input */
+
+    HRESULT EnableVideoInput ([in] BMDDisplayMode displayMode, [in] BMDPixelFormat pixelFormat, [in] BMDVideoInputFlags flags);
+    HRESULT DisableVideoInput (void);
+    HRESULT GetAvailableVideoFrameCount ([out] unsigned int* availableFrameCount);
+    HRESULT SetVideoInputFrameMemoryAllocator ([in] IDeckLinkMemoryAllocator* theAllocator);
+
+    /* Audio Input */
+
+    HRESULT EnableAudioInput ([in] BMDAudioSampleRate sampleRate, [in] BMDAudioSampleType sampleType, [in] unsigned int channelCount);
+    HRESULT DisableAudioInput (void);
+    HRESULT GetAvailableAudioSampleFrameCount ([out] unsigned int* availableSampleFrameCount);
+
+    /* Input Control */
+
+    HRESULT StartStreams (void);
+    HRESULT StopStreams (void);
+    HRESULT PauseStreams (void);
+    HRESULT FlushStreams (void);
+    HRESULT SetCallback ([in] IDeckLinkInputCallback_v11_5_1* theCallback);
+
+    /* Hardware Timing */
+
+    HRESULT GetHardwareReferenceClock ([in] BMDTimeScale desiredTimeScale, [out] BMDTimeValue* hardwareTime, [out] BMDTimeValue* timeInFrame, [out] BMDTimeValue* ticksPerFrame);
+};
+
diff --git a/DeckLinkSDK/Win/include/DeckLinkAPI_v7_1.idl b/DeckLinkSDK/Win/include/DeckLinkAPI_v7_1.idl
new file mode 100644
index 0000000000..24707bf169
--- /dev/null
+++ b/DeckLinkSDK/Win/include/DeckLinkAPI_v7_1.idl
@@ -0,0 +1,173 @@
+/* -LICENSE-START-
+** Copyright (c) 2009 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+/* DeckLinkAPI_v7_1.idl */
+
+	interface IDeckLinkDisplayModeIterator_v7_1;
+	interface IDeckLinkDisplayMode_v7_1;
+	interface IDeckLinkVideoFrame_v7_1;
+	interface IDeckLinkVideoInputFrame_v7_1;
+	interface IDeckLinkAudioInputPacket_v7_1;
+	
+	[object, uuid(B28131B6-59AC-4857-B5AC-CD75D5883E2F),
+	 helpstring("IDeckLinkDisplayModeIterator_v7_1 enumerates over supported input/output display modes.")]
+	interface IDeckLinkDisplayModeIterator_v7_1 : IUnknown
+	{
+		HRESULT		Next ([out] IDeckLinkDisplayMode_v7_1** deckLinkDisplayMode);
+	};
+
+
+	[object, uuid(AF0CD6D5-8376-435E-8433-54F9DD530AC3),
+	 helpstring("IDeckLinkDisplayMode_v7_1 represents a display mode")]
+	interface IDeckLinkDisplayMode_v7_1 : IUnknown
+	{
+		HRESULT				GetName ([out] BSTR* name);
+		BMDDisplayMode		GetDisplayMode ();
+		long				GetWidth ();
+		long				GetHeight ();
+		HRESULT				GetFrameRate ([out] BMDTimeValue *frameDuration, [out] BMDTimeScale *timeScale);
+	};
+	
+	[object, uuid(EBD01AFA-E4B0-49C6-A01D-EDB9D1B55FD9),
+     helpstring("IDeckLinkVideoOutputCallback. Frame completion callback.")]
+    interface IDeckLinkVideoOutputCallback_v7_1 : IUnknown
+    {
+        HRESULT		ScheduledFrameCompleted ([in] IDeckLinkVideoFrame_v7_1* completedFrame, [in] BMDOutputFrameCompletionResult result);
+    };
+	
+    [object, uuid(7F94F328-5ED4-4E9F-9729-76A86BDC99CC),
+     helpstring("IDeckLinkInputCallback_v7_1. Frame arrival callback.")]
+    interface IDeckLinkInputCallback_v7_1 : IUnknown
+    {
+        HRESULT		VideoInputFrameArrived ([in] IDeckLinkVideoInputFrame_v7_1* videoFrame, [in] IDeckLinkAudioInputPacket_v7_1* audioPacket);
+    };
+	
+
+    [object, uuid(AE5B3E9B-4E1E-4535-B6E8-480FF52F6CE5), local,
+     helpstring("IDeckLinkOutput_v7_1.  Created by QueryInterface from IDeckLink.")]
+    interface IDeckLinkOutput_v7_1 : IUnknown
+    {
+		HRESULT		DoesSupportVideoMode (BMDDisplayMode displayMode, BMDPixelFormat pixelFormat, [out] BMDDisplayModeSupport_v10_11 *result);
+		HRESULT		GetDisplayModeIterator ([out] IDeckLinkDisplayModeIterator_v7_1 **iterator);
+		
+		// Video output
+        HRESULT		EnableVideoOutput (BMDDisplayMode displayMode);
+        HRESULT		DisableVideoOutput ();
+		
+		HRESULT		SetVideoOutputFrameMemoryAllocator ([in] IDeckLinkMemoryAllocator* theAllocator);
+        HRESULT		CreateVideoFrame (int width, int height, int rowBytes, BMDPixelFormat pixelFormat, BMDFrameFlags flags, IDeckLinkVideoFrame_v7_1** outFrame);
+        HRESULT		CreateVideoFrameFromBuffer (void* buffer, int width, int height, int rowBytes, BMDPixelFormat pixelFormat, BMDFrameFlags flags, IDeckLinkVideoFrame_v7_1** outFrame);
+
+        HRESULT		DisplayVideoFrameSync (IDeckLinkVideoFrame_v7_1* theFrame);
+        HRESULT		ScheduleVideoFrame (IDeckLinkVideoFrame_v7_1* theFrame, BMDTimeValue displayTime, BMDTimeValue displayDuration, BMDTimeScale timeScale);
+        HRESULT		SetScheduledFrameCompletionCallback ([in] IDeckLinkVideoOutputCallback_v7_1* theCallback);
+		
+		// Audio output
+		HRESULT		EnableAudioOutput (BMDAudioSampleRate sampleRate, BMDAudioSampleType sampleType, unsigned int channelCount);
+		HRESULT		DisableAudioOutput ();
+		
+		HRESULT		WriteAudioSamplesSync (void* buffer, unsigned int sampleFrameCount, [out] unsigned int *sampleFramesWritten);
+		
+		HRESULT		BeginAudioPreroll ();
+		HRESULT		EndAudioPreroll ();
+		HRESULT		ScheduleAudioSamples (void* buffer, unsigned int sampleFrameCount, BMDTimeValue streamTime, BMDTimeScale timeScale, [out] unsigned int *sampleFramesWritten);
+		
+		HRESULT		GetBufferedAudioSampleFrameCount ( [out] unsigned int *bufferedSampleCount);
+		HRESULT		FlushBufferedAudioSamples ();
+		
+		HRESULT		SetAudioCallback ( [in] IDeckLinkAudioOutputCallback* theCallback);
+		
+		// Output control
+        HRESULT		StartScheduledPlayback (BMDTimeValue playbackStartTime, BMDTimeScale timeScale, double playbackSpeed);
+        HRESULT		StopScheduledPlayback (BMDTimeValue stopPlaybackAtTime, BMDTimeValue *actualStopTime, BMDTimeScale timeScale);
+        HRESULT		GetHardwareReferenceClock (BMDTimeScale desiredTimeScale, BMDTimeValue *elapsedTimeSinceSchedulerBegan);
+    };
+
+    [object, uuid(2B54EDEF-5B32-429F-BA11-BB990596EACD),
+     helpstring("IDeckLinkInput_v7_1.  Created by QueryInterface from IDeckLink.")]
+    interface IDeckLinkInput_v7_1 : IUnknown
+    {
+		HRESULT		DoesSupportVideoMode (BMDDisplayMode displayMode, BMDPixelFormat pixelFormat, [out] BMDDisplayModeSupport_v10_11 *result);
+		HRESULT		GetDisplayModeIterator ([out] IDeckLinkDisplayModeIterator_v7_1 **iterator);
+		
+		// Video input
+		HRESULT		EnableVideoInput (BMDDisplayMode displayMode, BMDPixelFormat pixelFormat, BMDVideoInputFlags flags);
+		HRESULT		DisableVideoInput ();
+		
+		// Audio input
+		HRESULT		EnableAudioInput (BMDAudioSampleRate sampleRate, BMDAudioSampleType sampleType, unsigned int channelCount);
+		HRESULT		DisableAudioInput ();
+		HRESULT		ReadAudioSamples (void* buffer, unsigned int sampleFrameCount, [out] unsigned int *sampleFramesRead, [out] BMDTimeValue *audioPacketTime, BMDTimeScale timeScale);
+		HRESULT		GetBufferedAudioSampleFrameCount ( [out] unsigned int *bufferedSampleCount);
+		
+		// Input control
+		HRESULT		StartStreams ();
+		HRESULT		StopStreams ();
+		HRESULT		PauseStreams ();
+		HRESULT		SetCallback ([in] IDeckLinkInputCallback_v7_1* theCallback);
+    };
+	
+	[object, uuid(333F3A10-8C2D-43CF-B79D-46560FEEA1CE), local,
+     helpstring("IDeckLinkVideoFrame_v7_1.  Created by IDeckLinkVideoOutput::CreateVideoFrame.")]
+    interface IDeckLinkVideoFrame_v7_1 : IUnknown
+    {
+        long				GetWidth ();
+        long				GetHeight ();
+        long				GetRowBytes ();
+        BMDPixelFormat		GetPixelFormat ();
+        BMDFrameFlags		GetFlags ();
+        HRESULT				GetBytes (void* *buffer);
+    };
+	
+	[object, uuid(C8B41D95-8848-40EE-9B37-6E3417FB114B), local,
+     helpstring("IDeckLinkVideoInputFrame_v7_1.  Provided by the IDeckLinkVideoInput frame arrival callback.")]
+    interface IDeckLinkVideoInputFrame_v7_1 : IDeckLinkVideoFrame_v7_1
+    {
+        HRESULT				GetFrameTime (BMDTimeValue *frameTime, BMDTimeValue *frameDuration, BMDTimeScale timeScale);
+    };
+	
+	[object, uuid(C86DE4F6-A29F-42E3-AB3A-1363E29F0788), local,
+     helpstring("IDeckLinkAudioInputPacket_v7_1.  Provided by the IDeckLinkInput callback.")]
+    interface IDeckLinkAudioInputPacket_v7_1 : IUnknown
+    {
+		long				GetSampleCount ();
+		HRESULT				GetBytes (void* *buffer);
+		HRESULT				GetAudioPacketTime (BMDTimeValue *packetTime, BMDTimeScale timeScale);
+    };
+	
diff --git a/DeckLinkSDK/Win/include/DeckLinkAPI_v7_3.idl b/DeckLinkSDK/Win/include/DeckLinkAPI_v7_3.idl
new file mode 100644
index 0000000000..3cbb0455eb
--- /dev/null
+++ b/DeckLinkSDK/Win/include/DeckLinkAPI_v7_3.idl
@@ -0,0 +1,170 @@
+/* -LICENSE-START-
+** Copyright (c) 2009 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+/* Forward Declarations */
+
+interface IDeckLinkInputCallback_v7_3;
+interface IDeckLinkOutput_v7_3;
+interface IDeckLinkInput_v7_3;
+interface IDeckLinkVideoInputFrame_v7_3;
+
+/* End Forward Declarations */
+
+
+/* Interface IDeckLinkInputCallback - Frame arrival callback. */
+
+[
+    object,
+    uuid(FD6F311D-4D00-444B-9ED4-1F25B5730AD0),
+    helpstring("Frame arrival callback.")
+] interface IDeckLinkInputCallback_v7_3 : IUnknown
+{
+    HRESULT VideoInputFormatChanged([in] BMDVideoInputFormatChangedEvents notificationEvents, [in] IDeckLinkDisplayMode_v7_6 *newDisplayMode, [in] BMDDetectedVideoInputFormatFlags detectedSignalFlags);
+    HRESULT VideoInputFrameArrived([in] IDeckLinkVideoInputFrame_v7_3 *videoFrame, [in] IDeckLinkAudioInputPacket *audioPacket);
+};
+
+/* End Interface IDeckLinkInputCallback */
+
+
+/* Interface IDeckLinkOutput - Created by QueryInterface from IDeckLink. */
+
+[
+    object,
+    uuid(271C65E3-C323-4344-A30F-D908BCB20AA3),
+    local, 
+    helpstring("Created by QueryInterface from IDeckLink.")
+] interface IDeckLinkOutput_v7_3 : IUnknown
+{
+	HRESULT DoesSupportVideoMode(BMDDisplayMode displayMode, BMDPixelFormat pixelFormat, [out] BMDDisplayModeSupport_v10_11 *result);
+    HRESULT GetDisplayModeIterator([out] IDeckLinkDisplayModeIterator_v7_6 **iterator);
+
+    HRESULT SetScreenPreviewCallback([in] IDeckLinkScreenPreviewCallback *previewCallback);
+
+    /* Video Output */
+
+    HRESULT EnableVideoOutput(BMDDisplayMode displayMode, BMDVideoOutputFlags flags);
+    HRESULT DisableVideoOutput(void);
+
+    HRESULT SetVideoOutputFrameMemoryAllocator([in] IDeckLinkMemoryAllocator *theAllocator);
+    HRESULT CreateVideoFrame(int width, int height, int rowBytes, BMDPixelFormat pixelFormat, BMDFrameFlags flags, [out] IDeckLinkMutableVideoFrame_v7_6 **outFrame);
+    HRESULT CreateAncillaryData(BMDPixelFormat pixelFormat, [out] IDeckLinkVideoFrameAncillary **outBuffer);
+
+    HRESULT DisplayVideoFrameSync([in] IDeckLinkVideoFrame_v7_6 *theFrame);
+    HRESULT ScheduleVideoFrame([in] IDeckLinkVideoFrame_v7_6 *theFrame, BMDTimeValue displayTime, BMDTimeValue displayDuration, BMDTimeScale timeScale);
+    HRESULT SetScheduledFrameCompletionCallback([in] IDeckLinkVideoOutputCallback *theCallback);
+    HRESULT GetBufferedVideoFrameCount([out] unsigned int *bufferedFrameCount);
+
+    /* Audio Output */
+
+    HRESULT EnableAudioOutput(BMDAudioSampleRate sampleRate, BMDAudioSampleType sampleType, unsigned int channelCount, BMDAudioOutputStreamType streamType);
+    HRESULT DisableAudioOutput(void);
+
+    HRESULT WriteAudioSamplesSync([in] void *buffer, unsigned int sampleFrameCount, [out] unsigned int *sampleFramesWritten);
+
+    HRESULT BeginAudioPreroll(void);
+    HRESULT EndAudioPreroll(void);
+    HRESULT ScheduleAudioSamples([in] void *buffer, unsigned int sampleFrameCount, BMDTimeValue streamTime, BMDTimeScale timeScale, [out] unsigned int *sampleFramesWritten);
+
+    HRESULT GetBufferedAudioSampleFrameCount([out] unsigned int *bufferedSampleFrameCount);
+    HRESULT FlushBufferedAudioSamples(void);
+
+    HRESULT SetAudioCallback([in] IDeckLinkAudioOutputCallback *theCallback);
+
+    /* Output Control */
+
+    HRESULT StartScheduledPlayback(BMDTimeValue playbackStartTime, BMDTimeScale timeScale, double playbackSpeed);
+    HRESULT StopScheduledPlayback(BMDTimeValue stopPlaybackAtTime, [out] BMDTimeValue *actualStopTime, BMDTimeScale timeScale);
+    HRESULT IsScheduledPlaybackRunning([out] BOOL *active);
+    HRESULT GetHardwareReferenceClock(BMDTimeScale desiredTimeScale, [out] BMDTimeValue *elapsedTimeSinceSchedulerBegan);
+};
+
+/* End Interface IDeckLinkOutput */
+
+/* Interface IDeckLinkInput - Created by QueryInterface from IDeckLink. */
+
+[
+    object,
+    uuid(4973F012-9925-458C-871C-18774CDBBECB),
+    helpstring("Created by QueryInterface from IDeckLink.")
+] interface IDeckLinkInput_v7_3 : IUnknown
+{
+	HRESULT DoesSupportVideoMode(BMDDisplayMode displayMode, BMDPixelFormat pixelFormat, [out] BMDDisplayModeSupport_v10_11 *result);
+    HRESULT GetDisplayModeIterator([out] IDeckLinkDisplayModeIterator_v7_6 **iterator);
+
+    HRESULT SetScreenPreviewCallback([in] IDeckLinkScreenPreviewCallback *previewCallback);
+
+    /* Video Input */
+
+    HRESULT EnableVideoInput(BMDDisplayMode displayMode, BMDPixelFormat pixelFormat, BMDVideoInputFlags flags);
+    HRESULT DisableVideoInput(void);
+    HRESULT GetAvailableVideoFrameCount([out] unsigned int *availableFrameCount);
+
+    /* Audio Input */
+
+    HRESULT EnableAudioInput(BMDAudioSampleRate sampleRate, BMDAudioSampleType sampleType, unsigned int channelCount);
+    HRESULT DisableAudioInput(void);
+    HRESULT GetAvailableAudioSampleFrameCount([out] unsigned int *availableSampleFrameCount);
+
+    /* Input Control */
+
+    HRESULT StartStreams(void);
+    HRESULT StopStreams(void);
+    HRESULT PauseStreams(void);
+    HRESULT FlushStreams(void);
+    HRESULT SetCallback([in] IDeckLinkInputCallback_v7_3 *theCallback);
+};
+
+/* End Interface IDeckLinkInput */
+
+
+/* Interface IDeckLinkVideoInputFrame - Provided by the IDeckLinkVideoInput frame arrival callback. */
+
+[
+    object,
+    uuid(CF317790-2894-11DE-8C30-0800200C9A66),
+    local, 
+    helpstring("Provided by the IDeckLinkVideoInput frame arrival callback.")
+] interface IDeckLinkVideoInputFrame_v7_3 : IDeckLinkVideoFrame_v7_6
+{
+    HRESULT GetStreamTime([out] BMDTimeValue *frameTime, [out] BMDTimeValue *frameDuration, BMDTimeScale timeScale);
+};
+
+/* End Interface IDeckLinkVideoInputFrame */
+
diff --git a/DeckLinkSDK/Win/include/DeckLinkAPI_v7_6.idl b/DeckLinkSDK/Win/include/DeckLinkAPI_v7_6.idl
new file mode 100644
index 0000000000..ddf5a74b77
--- /dev/null
+++ b/DeckLinkSDK/Win/include/DeckLinkAPI_v7_6.idl
@@ -0,0 +1,409 @@
+/* -LICENSE-START-
+** Copyright (c) 2009 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+/* Enum BMDVideoConnection - Video connection types */
+
+typedef [v1_enum] enum  _BMDVideoConnection_v7_6 {
+    bmdVideoConnectionSDI_v7_6                              = /* 'sdi ' */ 0x73646920,
+    bmdVideoConnectionHDMI_v7_6                             = /* 'hdmi' */ 0x68646D69,
+    bmdVideoConnectionOpticalSDI_v7_6                       = /* 'opti' */ 0x6F707469,
+    bmdVideoConnectionComponent_v7_6                        = /* 'cpnt' */ 0x63706E74,
+    bmdVideoConnectionComposite_v7_6                        = /* 'cmst' */ 0x636D7374,
+    bmdVideoConnectionSVideo_v7_6                           = /* 'svid' */ 0x73766964
+} BMDVideoConnection_v7_6;
+
+
+
+/* Forward Declarations */
+
+interface IDeckLinkDisplayModeIterator_v7_6;
+interface IDeckLinkDisplayMode_v7_6;
+interface IDeckLinkOutput_v7_6;
+interface IDeckLinkInput_v7_6;
+interface IDeckLinkTimecode_v7_6;
+interface IDeckLinkVideoFrame_v7_6;
+interface IDeckLinkMutableVideoFrame_v7_6;
+interface IDeckLinkVideoInputFrame_v7_6;
+interface IDeckLinkScreenPreviewCallback_v7_6;
+interface IDeckLinkGLScreenPreviewHelper_v7_6;
+interface IDeckLinkVideoConversion_v7_6;
+interface IDeckLinkConfiguration_v7_6;
+
+
+/* Interface IDeckLinkVideoOutputCallback - Frame completion callback. */
+
+[
+    object,
+    uuid(E763A626-4A3C-49D1-BF13-E7AD3692AE52),
+    helpstring("Frame completion callback.")
+] interface IDeckLinkVideoOutputCallback_v7_6 : IUnknown
+{
+    HRESULT ScheduledFrameCompleted([in] IDeckLinkVideoFrame_v7_6 *completedFrame, [in] BMDOutputFrameCompletionResult result);
+    HRESULT ScheduledPlaybackHasStopped(void);
+};
+
+
+/* Interface IDeckLinkInputCallback - Frame arrival callback. */
+
+[
+    object,
+    uuid(31D28EE7-88B6-4CB1-897A-CDBF79A26414),
+    helpstring("Frame arrival callback.")
+] interface IDeckLinkInputCallback_v7_6 : IUnknown
+{
+    HRESULT VideoInputFormatChanged([in] BMDVideoInputFormatChangedEvents notificationEvents, [in] IDeckLinkDisplayMode_v7_6 *newDisplayMode, [in] BMDDetectedVideoInputFormatFlags detectedSignalFlags);
+    HRESULT VideoInputFrameArrived([in] IDeckLinkVideoInputFrame_v7_6* videoFrame, [in] IDeckLinkAudioInputPacket* audioPacket);
+};
+
+
+/* Interface IDeckLinkDisplayModeIterator - enumerates over supported input/output display modes. */
+
+[
+    object,
+    uuid(455D741F-1779-4800-86F5-0B5D13D79751),
+    helpstring("enumerates over supported input/output display modes.")
+] interface IDeckLinkDisplayModeIterator_v7_6 : IUnknown
+{
+    HRESULT Next([out] IDeckLinkDisplayMode_v7_6 **deckLinkDisplayMode);
+};
+
+
+/* Interface IDeckLinkDisplayMode - represents a display mode */
+
+[
+    object,
+    uuid(87451E84-2B7E-439E-A629-4393EA4A8550),
+    helpstring("represents a display mode")
+] interface IDeckLinkDisplayMode_v7_6 : IUnknown
+{
+    HRESULT GetName([out] BSTR *name);
+    BMDDisplayMode GetDisplayMode(void);
+    long GetWidth(void);
+    long GetHeight(void);
+    HRESULT GetFrameRate([out] BMDTimeValue *frameDuration, [out] BMDTimeScale *timeScale);
+    BMDFieldDominance GetFieldDominance(void);
+};
+
+
+/* Interface IDeckLinkOutput - Created by QueryInterface from IDeckLink. */
+
+[
+    object,
+    uuid(29228142-EB8C-4141-A621-F74026450955),
+    local, 
+    helpstring("Created by QueryInterface from IDeckLink.")
+] interface IDeckLinkOutput_v7_6 : IUnknown
+{
+	HRESULT DoesSupportVideoMode(BMDDisplayMode displayMode, BMDPixelFormat pixelFormat, [out] BMDDisplayModeSupport_v10_11 *result);
+    HRESULT GetDisplayModeIterator([out] IDeckLinkDisplayModeIterator_v7_6 **iterator);
+
+    HRESULT SetScreenPreviewCallback([in] IDeckLinkScreenPreviewCallback_v7_6 *previewCallback);
+
+    /* Video Output */
+
+    HRESULT EnableVideoOutput(BMDDisplayMode displayMode, BMDVideoOutputFlags flags);
+    HRESULT DisableVideoOutput(void);
+
+    HRESULT SetVideoOutputFrameMemoryAllocator([in] IDeckLinkMemoryAllocator *theAllocator);
+    HRESULT CreateVideoFrame(int width, int height, int rowBytes, BMDPixelFormat pixelFormat, BMDFrameFlags flags, [out] IDeckLinkMutableVideoFrame_v7_6 **outFrame);
+    HRESULT CreateAncillaryData(BMDPixelFormat pixelFormat, [out] IDeckLinkVideoFrameAncillary **outBuffer);
+
+    HRESULT DisplayVideoFrameSync([in] IDeckLinkVideoFrame_v7_6 *theFrame);
+    HRESULT ScheduleVideoFrame([in] IDeckLinkVideoFrame_v7_6 *theFrame, BMDTimeValue displayTime, BMDTimeValue displayDuration, BMDTimeScale timeScale);
+    HRESULT SetScheduledFrameCompletionCallback([in] IDeckLinkVideoOutputCallback_v7_6 *theCallback);
+    HRESULT GetBufferedVideoFrameCount([out] unsigned int *bufferedFrameCount);
+
+    /* Audio Output */
+
+    HRESULT EnableAudioOutput(BMDAudioSampleRate sampleRate, BMDAudioSampleType sampleType, unsigned int channelCount, BMDAudioOutputStreamType streamType);
+    HRESULT DisableAudioOutput(void);
+
+    HRESULT WriteAudioSamplesSync([in] void *buffer, unsigned int sampleFrameCount, [out] unsigned int *sampleFramesWritten);
+
+    HRESULT BeginAudioPreroll(void);
+    HRESULT EndAudioPreroll(void);
+    HRESULT ScheduleAudioSamples([in] void *buffer, unsigned int sampleFrameCount, BMDTimeValue streamTime, BMDTimeScale timeScale, [out] unsigned int *sampleFramesWritten);
+
+    HRESULT GetBufferedAudioSampleFrameCount([out] unsigned int *bufferedSampleFrameCount);
+    HRESULT FlushBufferedAudioSamples(void);
+
+    HRESULT SetAudioCallback([in] IDeckLinkAudioOutputCallback *theCallback);
+
+    /* Output Control */
+
+    HRESULT StartScheduledPlayback(BMDTimeValue playbackStartTime, BMDTimeScale timeScale, double playbackSpeed);
+    HRESULT StopScheduledPlayback(BMDTimeValue stopPlaybackAtTime, [out] BMDTimeValue *actualStopTime, BMDTimeScale timeScale);
+    HRESULT IsScheduledPlaybackRunning([out] BOOL *active);
+    HRESULT GetScheduledStreamTime(BMDTimeScale desiredTimeScale, [out] BMDTimeValue *streamTime, [out] double *playbackSpeed);
+
+    /* Hardware Timing */
+
+    HRESULT GetHardwareReferenceClock(BMDTimeScale desiredTimeScale, [out] BMDTimeValue *hardwareTime, [out] BMDTimeValue *timeInFrame, [out] BMDTimeValue *ticksPerFrame);
+};
+
+
+/* Interface IDeckLinkInput - Created by QueryInterface from IDeckLink. */
+
+[
+    object,
+    uuid(300C135A-9F43-48E2-9906-6D7911D93CF1),
+    helpstring("Created by QueryInterface from IDeckLink.")
+] interface IDeckLinkInput_v7_6 : IUnknown
+{
+	HRESULT DoesSupportVideoMode(BMDDisplayMode displayMode, BMDPixelFormat pixelFormat, [out] BMDDisplayModeSupport_v10_11 *result);
+    HRESULT GetDisplayModeIterator([out] IDeckLinkDisplayModeIterator_v7_6 **iterator);
+
+    HRESULT SetScreenPreviewCallback([in] IDeckLinkScreenPreviewCallback_v7_6 *previewCallback);
+
+    /* Video Input */
+
+    HRESULT EnableVideoInput(BMDDisplayMode displayMode, BMDPixelFormat pixelFormat, BMDVideoInputFlags flags);
+    HRESULT DisableVideoInput(void);
+    HRESULT GetAvailableVideoFrameCount([out] unsigned int *availableFrameCount);
+
+    /* Audio Input */
+
+    HRESULT EnableAudioInput(BMDAudioSampleRate sampleRate, BMDAudioSampleType sampleType, unsigned int channelCount);
+    HRESULT DisableAudioInput(void);
+    HRESULT GetAvailableAudioSampleFrameCount([out] unsigned int *availableSampleFrameCount);
+
+    /* Input Control */
+
+    HRESULT StartStreams(void);
+    HRESULT StopStreams(void);
+    HRESULT PauseStreams(void);
+    HRESULT FlushStreams(void);
+    HRESULT SetCallback([in] IDeckLinkInputCallback_v7_6 *theCallback);
+
+    /* Hardware Timing */
+
+    HRESULT GetHardwareReferenceClock(BMDTimeScale desiredTimeScale, [out] BMDTimeValue *hardwareTime, [out] BMDTimeValue *timeInFrame, [out] BMDTimeValue *ticksPerFrame);
+};
+
+
+/* Interface IDeckLinkTimecode_v7_6 - Used for video frame timecode representation. */
+
+[
+    object,
+    uuid(EFB9BCA6-A521-44F7-BD69-2332F24D9EE6),
+    helpstring("Used for video frame timecode representation.")
+] interface IDeckLinkTimecode_v7_6 : IUnknown
+{
+    BMDTimecodeBCD GetBCD(void);
+    HRESULT GetComponents([out] unsigned char *hours, [out] unsigned char *minutes, [out] unsigned char *seconds, [out] unsigned char *frames);
+    HRESULT GetString([out] BSTR *timecode);
+    BMDTimecodeFlags GetFlags(void);
+};
+
+
+/* Interface IDeckLinkVideoFrame - Interface to encapsulate a video frame; can be caller-implemented. */
+
+[
+    object,
+    uuid(A8D8238E-6B18-4196-99E1-5AF717B83D32),
+    local, 
+    helpstring("Interface to encapsulate a video frame; can be caller-implemented.")
+] interface IDeckLinkVideoFrame_v7_6 : IUnknown
+{
+    long GetWidth(void);
+    long GetHeight(void);
+    long GetRowBytes(void);
+    BMDPixelFormat GetPixelFormat(void);
+    BMDFrameFlags GetFlags(void);
+    HRESULT GetBytes([out] void **buffer);
+
+    HRESULT GetTimecode(BMDTimecodeFormat format, [out] IDeckLinkTimecode_v7_6 **timecode);
+    HRESULT GetAncillaryData([out] IDeckLinkVideoFrameAncillary **ancillary);
+};
+
+
+/* Interface IDeckLinkMutableVideoFrame - Created by IDeckLinkOutput::CreateVideoFrame. */
+
+[
+    object,
+    uuid(46FCEE00-B4E6-43D0-91C0-023A7FCEB34F),
+    local, 
+    helpstring("Created by IDeckLinkOutput::CreateVideoFrame.")
+] interface IDeckLinkMutableVideoFrame_v7_6 : IDeckLinkVideoFrame_v7_6
+{
+    HRESULT SetFlags(BMDFrameFlags newFlags);
+
+    HRESULT SetTimecode(BMDTimecodeFormat format, [in] IDeckLinkTimecode_v7_6 *timecode);
+    HRESULT SetTimecodeFromComponents(BMDTimecodeFormat format, unsigned char hours, unsigned char minutes, unsigned char seconds, unsigned char frames, BMDTimecodeFlags flags);
+    HRESULT SetAncillaryData([in] IDeckLinkVideoFrameAncillary *ancillary);
+};
+
+
+/* Interface IDeckLinkVideoInputFrame - Provided by the IDeckLinkVideoInput frame arrival callback. */
+
+[
+    object,
+    uuid(9A74FA41-AE9F-47AC-8CF4-01F42DD59965),
+    local, 
+    helpstring("Provided by the IDeckLinkVideoInput frame arrival callback.")
+] interface IDeckLinkVideoInputFrame_v7_6 : IDeckLinkVideoFrame_v7_6
+{
+    HRESULT GetStreamTime([out] BMDTimeValue *frameTime, [out] BMDTimeValue *frameDuration, BMDTimeScale timeScale);
+    HRESULT GetHardwareReferenceTimestamp(BMDTimeScale timeScale, [out] BMDTimeValue *frameTime, [out] BMDTimeValue *frameDuration);
+};
+
+
+/* Interface IDeckLinkScreenPreviewCallback - Screen preview callback */
+
+[
+    object,
+    uuid(373F499D-4B4D-4518-AD22-6354E5A5825E),
+    local, 
+    helpstring("Screen preview callback")
+] interface IDeckLinkScreenPreviewCallback_v7_6 : IUnknown
+{
+    HRESULT DrawFrame([in] IDeckLinkVideoFrame_v7_6 *theFrame);
+};
+
+
+/* Interface IDeckLinkGLScreenPreviewHelper - Created with CoCreateInstance(). */
+
+[
+    object,
+    uuid(BA575CD9-A15E-497B-B2C2-F9AFE7BE4EBA),
+    local, 
+    helpstring("Created with CoCreateInstance().")
+] interface IDeckLinkGLScreenPreviewHelper_v7_6 : IUnknown
+{
+
+    /* Methods must be called with OpenGL context set */
+
+    HRESULT InitializeGL(void);
+    HRESULT PaintGL(void);
+    HRESULT SetFrame([in] IDeckLinkVideoFrame_v7_6 *theFrame);
+};
+
+
+/* Interface IDeckLinkVideoConversion - Created with CoCreateInstance(). */
+
+[
+    object,
+    uuid(3EB504C9-F97D-40FE-A158-D407D48CB53B),
+    local, 
+    helpstring("Created with CoCreateInstance().")
+] interface IDeckLinkVideoConversion_v7_6 : IUnknown
+{
+    HRESULT ConvertFrame([in] IDeckLinkVideoFrame_v7_6* srcFrame, [in] IDeckLinkVideoFrame_v7_6* dstFrame);
+};
+
+/* Interface IDeckLinkConfiguration_v7_6 - Created by QueryInterface from IDeckLink. */
+
+[
+    object,
+    uuid(B8EAD569-B764-47F0-A73F-AE40DF6CBF10),
+    helpstring("Created by QueryInterface from IDeckLink.")
+] interface IDeckLinkConfiguration_v7_6 : IUnknown
+{
+    HRESULT GetConfigurationValidator([out] IDeckLinkConfiguration_v7_6 **configObject);
+    HRESULT WriteConfigurationToPreferences(void);
+
+    /* Video Output Configuration */
+
+    HRESULT SetVideoOutputFormat([in] BMDVideoConnection_v7_6 videoOutputConnection);
+    HRESULT IsVideoOutputActive([in] BMDVideoConnection_v7_6 videoOutputConnection, [out] BOOL *active);
+
+    HRESULT SetAnalogVideoOutputFlags([in] BMDAnalogVideoFlags analogVideoFlags);
+    HRESULT GetAnalogVideoOutputFlags([out] BMDAnalogVideoFlags *analogVideoFlags);
+
+    HRESULT EnableFieldFlickerRemovalWhenPaused([in] BOOL enable);
+    HRESULT IsEnabledFieldFlickerRemovalWhenPaused([out] BOOL *enabled);
+
+    HRESULT Set444And3GBpsVideoOutput([in] BOOL enable444VideoOutput, [in] BOOL enable3GbsOutput);
+    HRESULT Get444And3GBpsVideoOutput([out] BOOL *is444VideoOutputEnabled, [out] BOOL *threeGbsOutputEnabled);
+
+    HRESULT SetVideoOutputConversionMode([in] BMDVideoOutputConversionMode conversionMode);
+    HRESULT GetVideoOutputConversionMode([out] BMDVideoOutputConversionMode *conversionMode);
+
+    HRESULT Set_HD1080p24_to_HD1080i5994_Conversion([in] BOOL enable);
+    HRESULT Get_HD1080p24_to_HD1080i5994_Conversion([out] BOOL *enabled);
+
+    /* Video Input Configuration */
+
+    HRESULT SetVideoInputFormat([in] BMDVideoConnection_v7_6 videoInputFormat);
+    HRESULT GetVideoInputFormat([out] BMDVideoConnection_v7_6 *videoInputFormat);
+
+    HRESULT SetAnalogVideoInputFlags([in] BMDAnalogVideoFlags analogVideoFlags);
+    HRESULT GetAnalogVideoInputFlags([out] BMDAnalogVideoFlags *analogVideoFlags);
+
+    HRESULT SetVideoInputConversionMode([in] BMDVideoInputConversionMode conversionMode);
+    HRESULT GetVideoInputConversionMode([out] BMDVideoInputConversionMode *conversionMode);
+
+    HRESULT SetBlackVideoOutputDuringCapture([in] BOOL blackOutInCapture);
+    HRESULT GetBlackVideoOutputDuringCapture([out] BOOL *blackOutInCapture);
+
+    HRESULT Set32PulldownSequenceInitialTimecodeFrame([in] unsigned int aFrameTimecode);
+    HRESULT Get32PulldownSequenceInitialTimecodeFrame([out] unsigned int *aFrameTimecode);
+
+    HRESULT SetVancSourceLineMapping([in] unsigned int activeLine1VANCsource, [in] unsigned int activeLine2VANCsource, [in] unsigned int activeLine3VANCsource);
+    HRESULT GetVancSourceLineMapping([out] unsigned int *activeLine1VANCsource, [out] unsigned int *activeLine2VANCsource, [out] unsigned int *activeLine3VANCsource);
+
+    /* Audio Input Configuration */
+
+    HRESULT SetAudioInputFormat([in] BMDAudioConnection_v10_2 audioInputFormat);
+    HRESULT GetAudioInputFormat([out] BMDAudioConnection_v10_2 *audioInputFormat);
+};
+
+
+
+/* Coclasses */
+
+importlib("stdole2.tlb");
+
+[
+    uuid(D398CEE7-4434-4CA3-9BA6-5AE34556B905),
+    helpstring("CDeckLinkGLScreenPreviewHelper Class (DeckLink API v7.6)")
+] coclass CDeckLinkGLScreenPreviewHelper_v7_6
+{
+    [default] interface IDeckLinkGLScreenPreviewHelper_v7_6;
+};
+
+[
+    uuid(FFA84F77-73BE-4FB7-B03E-B5E44B9F759B),
+    helpstring("CDeckLinkVideoConversion Class (DeckLink API v7.6)")
+] coclass CDeckLinkVideoConversion_v7_6
+{
+    [default] interface IDeckLinkVideoConversion_v7_6;
+};
+
diff --git a/DeckLinkSDK/Win/include/DeckLinkAPI_v7_9.idl b/DeckLinkSDK/Win/include/DeckLinkAPI_v7_9.idl
new file mode 100644
index 0000000000..97ecb1c3da
--- /dev/null
+++ b/DeckLinkSDK/Win/include/DeckLinkAPI_v7_9.idl
@@ -0,0 +1,82 @@
+/* -LICENSE-START-
+** Copyright (c) 2010 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+/* DeckLinkAPI_v7_9.idl */
+
+/* Interface IDeckLinkDeckControl_v7_9 - Deck Control main interface */
+
+[
+	object,
+	uuid(A4D81043-0619-42B7-8ED6-602D29041DF7),
+	helpstring("Deck Control main interface")
+] interface IDeckLinkDeckControl_v7_9 : IUnknown
+{
+	HRESULT Open([in] BMDTimeScale timeScale, [in] BMDTimeValue timeValue, [in] BOOL timecodeIsDropFrame, [out] BMDDeckControlError *error);
+	HRESULT Close([in] BOOL standbyOn);
+	HRESULT GetCurrentState([out] BMDDeckControlMode *mode, [out] BMDDeckControlVTRControlState *vtrControlState, [out] BMDDeckControlStatusFlags *flags);
+	HRESULT SetStandby([in] BOOL standbyOn);
+	HRESULT Play([out] BMDDeckControlError *error);
+	HRESULT Stop([out] BMDDeckControlError *error);
+	HRESULT TogglePlayStop([out] BMDDeckControlError *error);
+	HRESULT Eject([out] BMDDeckControlError *error);
+	HRESULT GoToTimecode([in] BMDTimecodeBCD timecode, [out] BMDDeckControlError *error);
+	HRESULT FastForward([in] BOOL viewTape, [out] BMDDeckControlError *error);
+	HRESULT Rewind([in] BOOL viewTape, [out] BMDDeckControlError *error);
+	HRESULT StepForward([out] BMDDeckControlError *error);
+	HRESULT StepBack([out] BMDDeckControlError *error);
+	HRESULT Jog([in] double rate, [out] BMDDeckControlError *error);
+	HRESULT Shuttle([in] double rate, [out] BMDDeckControlError *error);
+	HRESULT GetTimecodeString([out] BSTR *currentTimeCode, [out] BMDDeckControlError *error);
+	HRESULT GetTimecode([out] IDeckLinkTimecode **currentTimecode, [out] BMDDeckControlError *error);
+	HRESULT GetTimecodeBCD([out] BMDTimecodeBCD *currentTimecode, [out] BMDDeckControlError *error);
+	HRESULT SetPreroll([in] unsigned int prerollSeconds);
+	HRESULT GetPreroll([out] unsigned int *prerollSeconds);
+	HRESULT SetExportOffset([in] int exportOffsetFields);
+	HRESULT GetExportOffset([out] int *exportOffsetFields);
+	HRESULT GetManualExportOffset([out] int *deckManualExportOffsetFields);
+	HRESULT SetCaptureOffset([in] int captureOffsetFields);
+	HRESULT GetCaptureOffset([out] int *captureOffsetFields);
+	HRESULT StartExport([in] BMDTimecodeBCD inTimecode, [in] BMDTimecodeBCD outTimecode, [in] BMDDeckControlExportModeOpsFlags exportModeOps, [out] BMDDeckControlError *error);
+	HRESULT StartCapture([in] BOOL useVITC, [in] BMDTimecodeBCD inTimecode, [in] BMDTimecodeBCD outTimecode, [out] BMDDeckControlError *error);
+	HRESULT GetDeviceID([out] unsigned short *deviceId, [out] BMDDeckControlError *error);
+	HRESULT Abort(void);
+	HRESULT CrashRecordStart([out] BMDDeckControlError *error);
+	HRESULT CrashRecordStop([out] BMDDeckControlError *error);
+	HRESULT SetCallback([in] IDeckLinkDeckControlStatusCallback *callback);
+};
diff --git a/DeckLinkSDK/Win/include/DeckLinkAPI_v8_0.idl b/DeckLinkSDK/Win/include/DeckLinkAPI_v8_0.idl
new file mode 100644
index 0000000000..50d7e80ee9
--- /dev/null
+++ b/DeckLinkSDK/Win/include/DeckLinkAPI_v8_0.idl
@@ -0,0 +1,75 @@
+/* -LICENSE-START-
+** Copyright (c) 2011 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+/* DeckLinkAPI_v8_0.idl */
+
+/* Interface IDeckLink_v8_0 - represents a DeckLink device */
+
+[
+    object,
+    uuid(62BFF75D-6569-4E55-8D4D-66AA03829ABC),
+    helpstring("represents a DeckLink device")
+] interface IDeckLink_v8_0 : IUnknown
+{
+    HRESULT GetModelName([out] BSTR *modelName);
+};
+
+/* Interface IDeckLinkIterator_v8_0 - enumerates installed DeckLink hardware */
+
+[
+    object,
+    uuid(74E936FC-CC28-4A67-81A0-1E94E52D4E69),
+    helpstring("enumerates installed DeckLink hardware")
+] interface IDeckLinkIterator_v8_0 : IUnknown
+{
+    HRESULT Next([out] IDeckLink_v8_0 **deckLinkInstance);
+};
+
+
+/* Coclasses */
+
+importlib("stdole2.tlb");
+
+[
+    uuid(D9EDA3B3-2887-41FA-B724-017CF1EB1D37),
+    helpstring("CDeckLinkIterator Class (DeckLink API v8.0)")
+] coclass CDeckLinkIterator_v8_0
+{
+    [default] interface IDeckLinkIterator_v8_0;
+};
diff --git a/DeckLinkSDK/Win/include/DeckLinkAPI_v8_1.idl b/DeckLinkSDK/Win/include/DeckLinkAPI_v8_1.idl
new file mode 100644
index 0000000000..8c1f9ce41c
--- /dev/null
+++ b/DeckLinkSDK/Win/include/DeckLinkAPI_v8_1.idl
@@ -0,0 +1,114 @@
+/* -LICENSE-START-
+** Copyright (c) 2011 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+/* DeckLinkAPI_v8_1.idl */
+
+/* Enum BMDDeckControlVTRControlState_v8_1 - VTR Control state */
+
+typedef [v1_enum] enum  _BMDDeckControlVTRControlState_v8_1 {
+    bmdDeckControlNotInVTRControlMode_v8_1                            = /* 'nvcm' */ 0x6E76636D,
+    bmdDeckControlVTRControlPlaying_v8_1                              = /* 'vtrp' */ 0x76747270,
+    bmdDeckControlVTRControlRecording_v8_1                            = /* 'vtrr' */ 0x76747272,
+    bmdDeckControlVTRControlStill_v8_1                                = /* 'vtra' */ 0x76747261,
+    bmdDeckControlVTRControlSeeking_v8_1                              = /* 'vtrs' */ 0x76747273,
+    bmdDeckControlVTRControlStopped_v8_1                              = /* 'vtro' */ 0x7674726F
+} BMDDeckControlVTRControlState_v8_1;
+
+
+interface IDeckLinkDeckControlStatusCallback;
+interface IDeckLinkDeckControl;
+
+/* Interface IDeckLinkDeckControlStatusCallback_v8_1 - Deck control state change callback. */
+
+[
+    object,
+    uuid(E5F693C1-4283-4716-B18F-C1431521955B),
+    helpstring("Deck control state change callback.")
+] interface IDeckLinkDeckControlStatusCallback_v8_1 : IUnknown
+{
+    HRESULT TimecodeUpdate([in] BMDTimecodeBCD currentTimecode);
+    HRESULT VTRControlStateChanged([in] BMDDeckControlVTRControlState_v8_1 newState, [in] BMDDeckControlError error);
+    HRESULT DeckControlEventReceived([in] BMDDeckControlEvent event, [in] BMDDeckControlError error);
+    HRESULT DeckControlStatusChanged([in] BMDDeckControlStatusFlags flags, [in] unsigned int mask);
+};
+
+/* Interface IDeckLinkDeckControl - Deck Control main interface */
+
+[
+    object,
+    uuid(522A9E39-0F3C-4742-94EE-D80DE335DA1D),
+    helpstring("Deck Control main interface")
+] interface IDeckLinkDeckControl_v8_1 : IUnknown
+{
+    HRESULT Open([in] BMDTimeScale timeScale, [in] BMDTimeValue timeValue, [in] BOOL timecodeIsDropFrame, [out] BMDDeckControlError *error);
+    HRESULT Close([in] BOOL standbyOn);
+    HRESULT GetCurrentState([out] BMDDeckControlMode *mode, [out] BMDDeckControlVTRControlState_v8_1 *vtrControlState, [out] BMDDeckControlStatusFlags *flags);
+    HRESULT SetStandby([in] BOOL standbyOn);
+    HRESULT SendCommand([in] unsigned char *inBuffer, [in] unsigned int inBufferSize, [out] unsigned char *outBuffer, [out] unsigned int *outDataSize, [in] unsigned int outBufferSize, [out] BMDDeckControlError *error);
+    HRESULT Play([out] BMDDeckControlError *error);
+    HRESULT Stop([out] BMDDeckControlError *error);
+    HRESULT TogglePlayStop([out] BMDDeckControlError *error);
+    HRESULT Eject([out] BMDDeckControlError *error);
+    HRESULT GoToTimecode([in] BMDTimecodeBCD timecode, [out] BMDDeckControlError *error);
+    HRESULT FastForward([in] BOOL viewTape, [out] BMDDeckControlError *error);
+    HRESULT Rewind([in] BOOL viewTape, [out] BMDDeckControlError *error);
+    HRESULT StepForward([out] BMDDeckControlError *error);
+    HRESULT StepBack([out] BMDDeckControlError *error);
+    HRESULT Jog([in] double rate, [out] BMDDeckControlError *error);
+    HRESULT Shuttle([in] double rate, [out] BMDDeckControlError *error);
+    HRESULT GetTimecodeString([out] BSTR *currentTimeCode, [out] BMDDeckControlError *error);
+    HRESULT GetTimecode([out] IDeckLinkTimecode **currentTimecode, [out] BMDDeckControlError *error);
+    HRESULT GetTimecodeBCD([out] BMDTimecodeBCD *currentTimecode, [out] BMDDeckControlError *error);
+    HRESULT SetPreroll([in] unsigned int prerollSeconds);
+    HRESULT GetPreroll([out] unsigned int *prerollSeconds);
+    HRESULT SetExportOffset([in] int exportOffsetFields);
+    HRESULT GetExportOffset([out] int *exportOffsetFields);
+    HRESULT GetManualExportOffset([out] int *deckManualExportOffsetFields);
+    HRESULT SetCaptureOffset([in] int captureOffsetFields);
+    HRESULT GetCaptureOffset([out] int *captureOffsetFields);
+    HRESULT StartExport([in] BMDTimecodeBCD inTimecode, [in] BMDTimecodeBCD outTimecode, [in] BMDDeckControlExportModeOpsFlags exportModeOps, [out] BMDDeckControlError *error);
+    HRESULT StartCapture([in] BOOL useVITC, [in] BMDTimecodeBCD inTimecode, [in] BMDTimecodeBCD outTimecode, [out] BMDDeckControlError *error);
+    HRESULT GetDeviceID([out] unsigned short *deviceId, [out] BMDDeckControlError *error);
+    HRESULT Abort(void);
+    HRESULT CrashRecordStart([out] BMDDeckControlError *error);
+    HRESULT CrashRecordStop([out] BMDDeckControlError *error);
+    HRESULT SetCallback([in] IDeckLinkDeckControlStatusCallback_v8_1 *callback);
+};
+
+
diff --git a/DeckLinkSDK/Win/include/DeckLinkAPI_v9_2.idl b/DeckLinkSDK/Win/include/DeckLinkAPI_v9_2.idl
new file mode 100644
index 0000000000..23060d9ef7
--- /dev/null
+++ b/DeckLinkSDK/Win/include/DeckLinkAPI_v9_2.idl
@@ -0,0 +1,81 @@
+/* -LICENSE-START-
+** Copyright (c) 2012 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+/* DeckLinkAPI_v9_2.idl */
+
+
+/* Interface IDeckLinkInput_v9_2 - Created by QueryInterface from IDeckLink. */
+
+[
+    object,
+    uuid(6D40EF78-28B9-4E21-990D-95BB7750A04F),
+    helpstring("Created by QueryInterface from IDeckLink.")
+] interface IDeckLinkInput_v9_2 : IUnknown
+{
+	HRESULT DoesSupportVideoMode([in] BMDDisplayMode displayMode, [in] BMDPixelFormat pixelFormat, [in] BMDVideoInputFlags flags, [out] BMDDisplayModeSupport_v10_11 *result, [out] IDeckLinkDisplayMode **resultDisplayMode);
+    HRESULT GetDisplayModeIterator([out] IDeckLinkDisplayModeIterator **iterator);
+
+    HRESULT SetScreenPreviewCallback([in] IDeckLinkScreenPreviewCallback *previewCallback);
+
+    /* Video Input */
+
+    HRESULT EnableVideoInput([in] BMDDisplayMode displayMode, [in] BMDPixelFormat pixelFormat, [in] BMDVideoInputFlags flags);
+    HRESULT DisableVideoInput(void);
+    HRESULT GetAvailableVideoFrameCount([out] unsigned int *availableFrameCount);
+
+    /* Audio Input */
+
+    HRESULT EnableAudioInput([in] BMDAudioSampleRate sampleRate, [in] BMDAudioSampleType sampleType, [in] unsigned int channelCount);
+    HRESULT DisableAudioInput(void);
+    HRESULT GetAvailableAudioSampleFrameCount([out] unsigned int *availableSampleFrameCount);
+
+    /* Input Control */
+
+    HRESULT StartStreams(void);
+    HRESULT StopStreams(void);
+    HRESULT PauseStreams(void);
+    HRESULT FlushStreams(void);
+    HRESULT SetCallback([in] IDeckLinkInputCallback_v11_5_1 *theCallback);
+
+    /* Hardware Timing */
+
+    HRESULT GetHardwareReferenceClock([in] BMDTimeScale desiredTimeScale, [out] BMDTimeValue *hardwareTime, [out] BMDTimeValue *timeInFrame, [out] BMDTimeValue *ticksPerFrame);
+};
+
diff --git a/DeckLinkSDK/Win/include/DeckLinkAPI_v9_9.idl b/DeckLinkSDK/Win/include/DeckLinkAPI_v9_9.idl
new file mode 100644
index 0000000000..b6c7ca089e
--- /dev/null
+++ b/DeckLinkSDK/Win/include/DeckLinkAPI_v9_9.idl
@@ -0,0 +1,100 @@
+/* -LICENSE-START-
+** Copyright (c) 2012 Blackmagic Design
+**  
+** Permission is hereby granted, free of charge, to any person or organization 
+** obtaining a copy of the software and accompanying documentation (the 
+** "Software") to use, reproduce, display, distribute, sub-license, execute, 
+** and transmit the Software, and to prepare derivative works of the Software, 
+** and to permit third-parties to whom the Software is furnished to do so, in 
+** accordance with:
+** 
+** (1) if the Software is obtained from Blackmagic Design, the End User License 
+** Agreement for the Software Development Kit (“EULA”) available at 
+** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
+** 
+** (2) if the Software is obtained from any third party, such licensing terms 
+** as notified by that third party,
+** 
+** and all subject to the following:
+** 
+** (3) the copyright notices in the Software and this entire statement, 
+** including the above license grant, this restriction and the following 
+** disclaimer, must be included in all copies of the Software, in whole or in 
+** part, and all derivative works of the Software, unless such copies or 
+** derivative works are solely in the form of machine-executable object code 
+** generated by a source language processor.
+** 
+** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
+** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
+** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
+** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
+** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
+** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
+** DEALINGS IN THE SOFTWARE.
+** 
+** A copy of the Software is available free of charge at 
+** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
+** 
+** -LICENSE-END-
+*/
+
+/* DeckLinkAPI_v9_9.idl */
+
+
+/* Interface IDeckLinkOutput - Created by QueryInterface from IDeckLink. */
+
+[
+    object,
+    uuid(A3EF0963-0862-44ED-92A9-EE89ABF431C7),
+    local, 
+    helpstring("Created by QueryInterface from IDeckLink.")
+] interface IDeckLinkOutput_v9_9 : IUnknown
+{
+	HRESULT DoesSupportVideoMode([in] BMDDisplayMode displayMode, [in] BMDPixelFormat pixelFormat, [in] BMDVideoOutputFlags flags, [out] BMDDisplayModeSupport_v10_11 *result, [out] IDeckLinkDisplayMode **resultDisplayMode);
+    HRESULT GetDisplayModeIterator([out] IDeckLinkDisplayModeIterator **iterator);
+
+    HRESULT SetScreenPreviewCallback([in] IDeckLinkScreenPreviewCallback *previewCallback);
+
+    /* Video Output */
+
+    HRESULT EnableVideoOutput([in] BMDDisplayMode displayMode, [in] BMDVideoOutputFlags flags);
+    HRESULT DisableVideoOutput(void);
+
+    HRESULT SetVideoOutputFrameMemoryAllocator([in] IDeckLinkMemoryAllocator *theAllocator);
+    HRESULT CreateVideoFrame([in] int width, [in] int height, [in] int rowBytes, [in] BMDPixelFormat pixelFormat, [in] BMDFrameFlags flags, [out] IDeckLinkMutableVideoFrame **outFrame);
+    HRESULT CreateAncillaryData([in] BMDPixelFormat pixelFormat, [out] IDeckLinkVideoFrameAncillary **outBuffer);
+
+    HRESULT DisplayVideoFrameSync([in] IDeckLinkVideoFrame *theFrame);
+    HRESULT ScheduleVideoFrame([in] IDeckLinkVideoFrame *theFrame, [in] BMDTimeValue displayTime, [in] BMDTimeValue displayDuration, [in] BMDTimeScale timeScale);
+    HRESULT SetScheduledFrameCompletionCallback([in] IDeckLinkVideoOutputCallback *theCallback);
+    HRESULT GetBufferedVideoFrameCount([out] unsigned int *bufferedFrameCount);
+
+    /* Audio Output */
+
+    HRESULT EnableAudioOutput([in] BMDAudioSampleRate sampleRate, [in] BMDAudioSampleType sampleType, [in] unsigned int channelCount, [in] BMDAudioOutputStreamType streamType);
+    HRESULT DisableAudioOutput(void);
+
+    HRESULT WriteAudioSamplesSync([in] void *buffer, [in] unsigned int sampleFrameCount, [out] unsigned int *sampleFramesWritten);
+
+    HRESULT BeginAudioPreroll(void);
+    HRESULT EndAudioPreroll(void);
+    HRESULT ScheduleAudioSamples([in] void *buffer, [in] unsigned int sampleFrameCount, [in] BMDTimeValue streamTime, [in] BMDTimeScale timeScale, [out] unsigned int *sampleFramesWritten);
+
+    HRESULT GetBufferedAudioSampleFrameCount([out] unsigned int *bufferedSampleFrameCount);
+    HRESULT FlushBufferedAudioSamples(void);
+
+    HRESULT SetAudioCallback([in] IDeckLinkAudioOutputCallback *theCallback);
+
+    /* Output Control */
+
+    HRESULT StartScheduledPlayback([in] BMDTimeValue playbackStartTime, [in] BMDTimeScale timeScale, [in] double playbackSpeed);
+    HRESULT StopScheduledPlayback([in] BMDTimeValue stopPlaybackAtTime, [out] BMDTimeValue *actualStopTime, [in] BMDTimeScale timeScale);
+    HRESULT IsScheduledPlaybackRunning([out] BOOL *active);
+    HRESULT GetScheduledStreamTime([in] BMDTimeScale desiredTimeScale, [out] BMDTimeValue *streamTime, [out] double *playbackSpeed);
+    HRESULT GetReferenceStatus([out] BMDReferenceStatus *referenceStatus);
+
+    /* Hardware Timing */
+
+    HRESULT GetHardwareReferenceClock([in] BMDTimeScale desiredTimeScale, [out] BMDTimeValue *hardwareTime, [out] BMDTimeValue *timeInFrame, [out] BMDTimeValue *ticksPerFrame);
+};
+
